
fw-apple12port-AM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000081b8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003d8  20000000  000081b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000968  200003e0  000085a0  000203e0  2**4
                  ALLOC
  3 .stack        00001000  20000d48  00008f08  000203e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
  6 .debug_info   000717a5  00000000  00000000  00020459  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a2d3  00000000  00000000  00091bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fba3  00000000  00000000  0009bed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011c8  00000000  00000000  000aba74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001728  00000000  00000000  000acc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012473  00000000  00000000  000ae364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024572  00000000  00000000  000c07d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00091367  00000000  00000000  000e4d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003880  00000000  00000000  001760b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 1d 00 20 15 53 00 00 11 53 00 00 11 53 00 00     H.. .S...S...S..
	...
      2c:	11 53 00 00 00 00 00 00 00 00 00 00 11 53 00 00     .S...........S..
      3c:	11 53 00 00 11 53 00 00 11 53 00 00 7d 38 00 00     .S...S...S..}8..
      4c:	11 53 00 00 8d 25 00 00 11 53 00 00 a5 26 00 00     .S...%...S...&..
      5c:	11 53 00 00 2d 4a 00 00 ed 49 00 00 fd 49 00 00     .S..-J...I...I..
      6c:	0d 4a 00 00 1d 4a 00 00 00 00 00 00 00 00 00 00     .J...J..........
      7c:	e5 3f 00 00 f5 3f 00 00 05 40 00 00 21 43 00 00     .?...?...@..!C..
      8c:	31 43 00 00 41 43 00 00 00 00 00 00 00 00 00 00     1C..AC..........
      9c:	e1 25 00 00 dd 4a 00 00 11 53 00 00 11 53 00 00     .%...J...S...S..
      ac:	11 53 00 00 00 00 00 00                             .S......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003e0 	.word	0x200003e0
      d4:	00000000 	.word	0x00000000
      d8:	000081b8 	.word	0x000081b8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200003e4 	.word	0x200003e4
     108:	000081b8 	.word	0x000081b8
     10c:	000081b8 	.word	0x000081b8
     110:	00000000 	.word	0x00000000

00000114 <appDisarmFlashTimerHandler>:
}

static void appDisarmFlashTimerHandler(SYS_Timer_t *timer)
{
   // port_pin_toggle_output_level(DISARMED_FLASH_PIN);
}
     114:	4770      	bx	lr
	...

00000118 <appDisarmDurationTimerHandler>:
{
     118:	b510      	push	{r4, lr}
    SYS_TimerRestart(&appAutoArmTimer);
     11a:	4802      	ldr	r0, [pc, #8]	; (124 <appDisarmDurationTimerHandler+0xc>)
     11c:	4b02      	ldr	r3, [pc, #8]	; (128 <appDisarmDurationTimerHandler+0x10>)
     11e:	4798      	blx	r3
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	200003fc 	.word	0x200003fc
     128:	00003189 	.word	0x00003189

0000012c <app_arm_is_any_alarm_active>:
    return armAlarmStatus.armed;
     12c:	4b06      	ldr	r3, [pc, #24]	; (148 <app_arm_is_any_alarm_active+0x1c>)
     12e:	781b      	ldrb	r3, [r3, #0]
    bool result = false;
     130:	2000      	movs	r0, #0
    if(app_arm_is_armed())
     132:	07db      	lsls	r3, r3, #31
     134:	d506      	bpl.n	144 <app_arm_is_any_alarm_active+0x18>
            (armAlarmStatus.daisyChainTamper_Alarm) ||\
     136:	4b04      	ldr	r3, [pc, #16]	; (148 <app_arm_is_any_alarm_active+0x1c>)
     138:	781b      	ldrb	r3, [r3, #0]
        if(((armAlarmStatus.powerTamper_Alarm) ||\
     13a:	3034      	adds	r0, #52	; 0x34
     13c:	4018      	ands	r0, r3
     13e:	1e43      	subs	r3, r0, #1
     140:	4198      	sbcs	r0, r3
     142:	b2c0      	uxtb	r0, r0
}
     144:	4770      	bx	lr
     146:	46c0      	nop			; (mov r8, r8)
     148:	2000044c 	.word	0x2000044c

0000014c <app_arm_reset_auto_arm_timer>:
{
     14c:	b510      	push	{r4, lr}
    SYS_TimerRestart(&appAutoArmTimer);
     14e:	4802      	ldr	r0, [pc, #8]	; (158 <app_arm_reset_auto_arm_timer+0xc>)
     150:	4b02      	ldr	r3, [pc, #8]	; (15c <app_arm_reset_auto_arm_timer+0x10>)
     152:	4798      	blx	r3
}
     154:	bd10      	pop	{r4, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	200003fc 	.word	0x200003fc
     15c:	00003189 	.word	0x00003189

00000160 <app_arm_auto_request>:
{
     160:	b5f0      	push	{r4, r5, r6, r7, lr}
     162:	46ce      	mov	lr, r9
     164:	b500      	push	{lr}
    if (SYS_TimerStarted(&appDisarmDurationTimer))
     166:	4830      	ldr	r0, [pc, #192]	; (228 <app_arm_auto_request+0xc8>)
     168:	4b30      	ldr	r3, [pc, #192]	; (22c <app_arm_auto_request+0xcc>)
     16a:	4798      	blx	r3
     16c:	1e04      	subs	r4, r0, #0
     16e:	d006      	beq.n	17e <app_arm_auto_request+0x1e>
        UART_DBG_TX("Couldn't Arm because of DisarmDurationTimer\n");
     170:	482f      	ldr	r0, [pc, #188]	; (230 <app_arm_auto_request+0xd0>)
     172:	4b30      	ldr	r3, [pc, #192]	; (234 <app_arm_auto_request+0xd4>)
     174:	4798      	blx	r3
        return false;
     176:	2000      	movs	r0, #0
}
     178:	bc04      	pop	{r2}
     17a:	4691      	mov	r9, r2
     17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (app_gen_io_is_power_good() == POWER_GOOD) &&\
     17e:	4b2e      	ldr	r3, [pc, #184]	; (238 <app_arm_auto_request+0xd8>)
     180:	4798      	blx	r3
     182:	2800      	cmp	r0, #0
     184:	d103      	bne.n	18e <app_arm_auto_request+0x2e>
    UART_DBG_TX("\n+++++ AUTO ARM REQUEST COMPLETE +++++\n ");
     186:	482d      	ldr	r0, [pc, #180]	; (23c <app_arm_auto_request+0xdc>)
     188:	4b2a      	ldr	r3, [pc, #168]	; (234 <app_arm_auto_request+0xd4>)
     18a:	4798      	blx	r3
}
     18c:	e7f4      	b.n	178 <app_arm_auto_request+0x18>
         (app_gen_io_get_nDISARM() == CAN_ARM) )
     18e:	4b2c      	ldr	r3, [pc, #176]	; (240 <app_arm_auto_request+0xe0>)
     190:	4798      	blx	r3
    if ( (app_gen_io_is_power_good() == POWER_GOOD) &&\
     192:	2800      	cmp	r0, #0
     194:	d0f7      	beq.n	186 <app_arm_auto_request+0x26>
        UART_DBG_TX("\n\n******** Powerd and ArmLB Connected ******** \n\n");
     196:	482b      	ldr	r0, [pc, #172]	; (244 <app_arm_auto_request+0xe4>)
     198:	4b26      	ldr	r3, [pc, #152]	; (234 <app_arm_auto_request+0xd4>)
     19a:	4798      	blx	r3
        for(int num = 0; num < CH_COUNT; num++)
     19c:	2700      	movs	r7, #0
            if( app_gen_io_is_cable_present(num) ) 					
     19e:	4e2a      	ldr	r6, [pc, #168]	; (248 <app_arm_auto_request+0xe8>)
     1a0:	e013      	b.n	1ca <app_arm_auto_request+0x6a>
                    UART_DBG_TX("Armed port from Disarmed State\n");
     1a2:	482a      	ldr	r0, [pc, #168]	; (24c <app_arm_auto_request+0xec>)
     1a4:	4b23      	ldr	r3, [pc, #140]	; (234 <app_arm_auto_request+0xd4>)
     1a6:	4798      	blx	r3
                    app_gen_io_set_port_armed(num, SENSOR_ARMED); //set port to armed (!disarmed)
     1a8:	2101      	movs	r1, #1
     1aa:	0028      	movs	r0, r5
     1ac:	4b28      	ldr	r3, [pc, #160]	; (250 <app_arm_auto_request+0xf0>)
     1ae:	4798      	blx	r3
                    armAlarmStatus.armed = SYSTEM_ARMED;
     1b0:	4a28      	ldr	r2, [pc, #160]	; (254 <app_arm_auto_request+0xf4>)
     1b2:	7813      	ldrb	r3, [r2, #0]
     1b4:	2101      	movs	r1, #1
     1b6:	430b      	orrs	r3, r1
     1b8:	7013      	strb	r3, [r2, #0]
                    SYS_TimerStop(&appDisarmFlashTimer);
     1ba:	4827      	ldr	r0, [pc, #156]	; (258 <app_arm_auto_request+0xf8>)
     1bc:	4b27      	ldr	r3, [pc, #156]	; (25c <app_arm_auto_request+0xfc>)
     1be:	4798      	blx	r3
                    channelHasArmed = true;
     1c0:	464c      	mov	r4, r9
     1c2:	e00d      	b.n	1e0 <app_arm_auto_request+0x80>
        for(int num = 0; num < CH_COUNT; num++)
     1c4:	3701      	adds	r7, #1
     1c6:	2f0c      	cmp	r7, #12
     1c8:	d01f      	beq.n	20a <app_arm_auto_request+0xaa>
            if( app_gen_io_is_cable_present(num) ) 					
     1ca:	b2fd      	uxtb	r5, r7
     1cc:	0028      	movs	r0, r5
     1ce:	47b0      	blx	r6
     1d0:	4681      	mov	r9, r0
     1d2:	2800      	cmp	r0, #0
     1d4:	d0f6      	beq.n	1c4 <app_arm_auto_request+0x64>
                if( app_gen_io_is_port_armed(num) == PORT_DISARMED )
     1d6:	0028      	movs	r0, r5
     1d8:	4b21      	ldr	r3, [pc, #132]	; (260 <app_arm_auto_request+0x100>)
     1da:	4798      	blx	r3
     1dc:	2800      	cmp	r0, #0
     1de:	d0e0      	beq.n	1a2 <app_arm_auto_request+0x42>
                if( (armAlarmStatus.silentAlarm == SILENT_ALARMING ) ) // && )
     1e0:	4b1c      	ldr	r3, [pc, #112]	; (254 <app_arm_auto_request+0xf4>)
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	079b      	lsls	r3, r3, #30
     1e6:	d5ed      	bpl.n	1c4 <app_arm_auto_request+0x64>
                    UART_DBG_TX("Armed port from Silent ALarming State\n");
     1e8:	481e      	ldr	r0, [pc, #120]	; (264 <app_arm_auto_request+0x104>)
     1ea:	4b12      	ldr	r3, [pc, #72]	; (234 <app_arm_auto_request+0xd4>)
     1ec:	4798      	blx	r3
                    app_gen_io_set_port_armed(num, SENSOR_ARMED); //set port to armed (!disarmed)
     1ee:	2101      	movs	r1, #1
     1f0:	0028      	movs	r0, r5
     1f2:	4b17      	ldr	r3, [pc, #92]	; (250 <app_arm_auto_request+0xf0>)
     1f4:	4798      	blx	r3
                    armAlarmStatus.armed = SYSTEM_ARMED;
     1f6:	4a17      	ldr	r2, [pc, #92]	; (254 <app_arm_auto_request+0xf4>)
     1f8:	7813      	ldrb	r3, [r2, #0]
     1fa:	2101      	movs	r1, #1
     1fc:	430b      	orrs	r3, r1
     1fe:	7013      	strb	r3, [r2, #0]
                    SYS_TimerStop(&appDisarmFlashTimer);
     200:	4815      	ldr	r0, [pc, #84]	; (258 <app_arm_auto_request+0xf8>)
     202:	4b16      	ldr	r3, [pc, #88]	; (25c <app_arm_auto_request+0xfc>)
     204:	4798      	blx	r3
                    channelHasArmed = true;
     206:	464c      	mov	r4, r9
     208:	e7dc      	b.n	1c4 <app_arm_auto_request+0x64>
        if( channelHasArmed || app_gen_io_is_any_port_armed())
     20a:	2c00      	cmp	r4, #0
     20c:	d007      	beq.n	21e <app_arm_auto_request+0xbe>
            armAlarmStatus.armed                    = SYSTEM_ARMED;
     20e:	4a11      	ldr	r2, [pc, #68]	; (254 <app_arm_auto_request+0xf4>)
     210:	7813      	ldrb	r3, [r2, #0]
     212:	2101      	movs	r1, #1
     214:	430b      	orrs	r3, r1
     216:	7013      	strb	r3, [r2, #0]
        app_arm_reset_auto_arm_timer();  
     218:	4b13      	ldr	r3, [pc, #76]	; (268 <app_arm_auto_request+0x108>)
     21a:	4798      	blx	r3
     21c:	e7b3      	b.n	186 <app_arm_auto_request+0x26>
        if( channelHasArmed || app_gen_io_is_any_port_armed())
     21e:	4b13      	ldr	r3, [pc, #76]	; (26c <app_arm_auto_request+0x10c>)
     220:	4798      	blx	r3
     222:	2800      	cmp	r0, #0
     224:	d0f8      	beq.n	218 <app_arm_auto_request+0xb8>
     226:	e7f2      	b.n	20e <app_arm_auto_request+0xae>
     228:	20000410 	.word	0x20000410
     22c:	0000311d 	.word	0x0000311d
     230:	00006d3c 	.word	0x00006d3c
     234:	00001ff5 	.word	0x00001ff5
     238:	0000173d 	.word	0x0000173d
     23c:	00006de8 	.word	0x00006de8
     240:	00001709 	.word	0x00001709
     244:	00006d6c 	.word	0x00006d6c
     248:	00001791 	.word	0x00001791
     24c:	00006da0 	.word	0x00006da0
     250:	000017c9 	.word	0x000017c9
     254:	2000044c 	.word	0x2000044c
     258:	20000424 	.word	0x20000424
     25c:	000030c9 	.word	0x000030c9
     260:	000017ad 	.word	0x000017ad
     264:	00006dc0 	.word	0x00006dc0
     268:	0000014d 	.word	0x0000014d
     26c:	00001815 	.word	0x00001815

00000270 <appAutoArmTimerHandler>:
{
     270:	b510      	push	{r4, lr}
    app_arm_auto_request();
     272:	4b01      	ldr	r3, [pc, #4]	; (278 <appAutoArmTimerHandler+0x8>)
     274:	4798      	blx	r3
}
     276:	bd10      	pop	{r4, pc}
     278:	00000161 	.word	0x00000161

0000027c <app_arm_set_PowerTamper_armed>:
    if( powerTamperArmedState )
     27c:	2800      	cmp	r0, #0
     27e:	d105      	bne.n	28c <app_arm_set_PowerTamper_armed+0x10>
       armAlarmStatus.powerTamper_Armed = SYSTEM_DISARMED; 
     280:	4a05      	ldr	r2, [pc, #20]	; (298 <app_arm_set_PowerTamper_armed+0x1c>)
     282:	7813      	ldrb	r3, [r2, #0]
     284:	2108      	movs	r1, #8
     286:	438b      	bics	r3, r1
     288:	7013      	strb	r3, [r2, #0]
}
     28a:	4770      	bx	lr
        armAlarmStatus.powerTamper_Armed = SYSTEM_ARMED; 
     28c:	4a02      	ldr	r2, [pc, #8]	; (298 <app_arm_set_PowerTamper_armed+0x1c>)
     28e:	7813      	ldrb	r3, [r2, #0]
     290:	2108      	movs	r1, #8
     292:	430b      	orrs	r3, r1
     294:	7013      	strb	r3, [r2, #0]
     296:	e7f8      	b.n	28a <app_arm_set_PowerTamper_armed+0xe>
     298:	2000044c 	.word	0x2000044c

0000029c <app_arm_clear_PowerTamper_alarm>:
    armAlarmStatus.powerTamper_Alarm = DIDNT_ALARM;
     29c:	4a02      	ldr	r2, [pc, #8]	; (2a8 <app_arm_clear_PowerTamper_alarm+0xc>)
     29e:	7813      	ldrb	r3, [r2, #0]
     2a0:	2110      	movs	r1, #16
     2a2:	438b      	bics	r3, r1
     2a4:	7013      	strb	r3, [r2, #0]
}
     2a6:	4770      	bx	lr
     2a8:	2000044c 	.word	0x2000044c

000002ac <app_arm_set_daisyChainTamper_armed>:
    if( daisyChainArmedState )
     2ac:	2800      	cmp	r0, #0
     2ae:	d105      	bne.n	2bc <app_arm_set_daisyChainTamper_armed+0x10>
        armAlarmStatus.daisyChainTamper_Armed = SYSTEM_DISARMED;
     2b0:	4a06      	ldr	r2, [pc, #24]	; (2cc <app_arm_set_daisyChainTamper_armed+0x20>)
     2b2:	7813      	ldrb	r3, [r2, #0]
     2b4:	2140      	movs	r1, #64	; 0x40
     2b6:	438b      	bics	r3, r1
     2b8:	7013      	strb	r3, [r2, #0]
}
     2ba:	4770      	bx	lr
        armAlarmStatus.daisyChainTamper_Armed = SYSTEM_ARMED; 
     2bc:	4a03      	ldr	r2, [pc, #12]	; (2cc <app_arm_set_daisyChainTamper_armed+0x20>)
     2be:	7813      	ldrb	r3, [r2, #0]
     2c0:	2140      	movs	r1, #64	; 0x40
     2c2:	430b      	orrs	r3, r1
        armAlarmStatus.daisyChainTamper_Alarm = DIDNT_ALARM;
     2c4:	21df      	movs	r1, #223	; 0xdf
     2c6:	400b      	ands	r3, r1
     2c8:	7013      	strb	r3, [r2, #0]
     2ca:	e7f6      	b.n	2ba <app_arm_set_daisyChainTamper_armed+0xe>
     2cc:	2000044c 	.word	0x2000044c

000002d0 <app_arm_get_daisyChainTamper_armed>:
    return armAlarmStatus.daisyChainTamper_Armed;
     2d0:	4b02      	ldr	r3, [pc, #8]	; (2dc <app_arm_get_daisyChainTamper_armed+0xc>)
     2d2:	7818      	ldrb	r0, [r3, #0]
     2d4:	0640      	lsls	r0, r0, #25
     2d6:	0fc0      	lsrs	r0, r0, #31
}
     2d8:	4770      	bx	lr
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	2000044c 	.word	0x2000044c

000002e0 <app_arm_request>:
{
     2e0:	b510      	push	{r4, lr}
    app_arm_auto_request();
     2e2:	4b03      	ldr	r3, [pc, #12]	; (2f0 <app_arm_request+0x10>)
     2e4:	4798      	blx	r3
    return armAlarmStatus.armed; //(ready_to_arm & !armAlarmStatus.disarmed);
     2e6:	4b03      	ldr	r3, [pc, #12]	; (2f4 <app_arm_request+0x14>)
     2e8:	7818      	ldrb	r0, [r3, #0]
     2ea:	07c0      	lsls	r0, r0, #31
     2ec:	0fc0      	lsrs	r0, r0, #31
}
     2ee:	bd10      	pop	{r4, pc}
     2f0:	00000161 	.word	0x00000161
     2f4:	2000044c 	.word	0x2000044c

000002f8 <app_arm_disarm>:
{
     2f8:	b570      	push	{r4, r5, r6, lr}
    disarmDuration = duration;
     2fa:	4b16      	ldr	r3, [pc, #88]	; (354 <app_arm_disarm+0x5c>)
     2fc:	8018      	strh	r0, [r3, #0]
    if (duration > 0)
     2fe:	2800      	cmp	r0, #0
     300:	d11f      	bne.n	342 <app_arm_disarm+0x4a>
    armAlarmStatus.armed                        = SYSTEM_DISARMED;
     302:	4a15      	ldr	r2, [pc, #84]	; (358 <app_arm_disarm+0x60>)
     304:	7813      	ldrb	r3, [r2, #0]
    armAlarmStatus.silentAlarm                  = NOT_SILENT_ALARMING;
     306:	2101      	movs	r1, #1
     308:	438b      	bics	r3, r1
    armAlarmStatus.powerTamper_Alarm            = DIDNT_ALARM;
     30a:	3101      	adds	r1, #1
     30c:	438b      	bics	r3, r1
    armAlarmStatus.channel_Alarm                = DIDNT_ALARM;
     30e:	310e      	adds	r1, #14
     310:	438b      	bics	r3, r1
    armAlarmStatus.daisyChainTamper_Alarm       = DIDNT_ALARM;
     312:	390c      	subs	r1, #12
     314:	438b      	bics	r3, r1
     316:	311c      	adds	r1, #28
     318:	438b      	bics	r3, r1
     31a:	7013      	strb	r3, [r2, #0]
    for(int num = 0; num < CH_COUNT; num++)
     31c:	2400      	movs	r4, #0
        app_gen_io_set_port_armed(num, SENSOR_DISARMED);        
     31e:	4d0f      	ldr	r5, [pc, #60]	; (35c <app_arm_disarm+0x64>)
     320:	b2e0      	uxtb	r0, r4
     322:	2100      	movs	r1, #0
     324:	47a8      	blx	r5
    for(int num = 0; num < CH_COUNT; num++)
     326:	3401      	adds	r4, #1
     328:	2c0c      	cmp	r4, #12
     32a:	d1f9      	bne.n	320 <app_arm_disarm+0x28>
    app_arm_reset_auto_arm_timer();
     32c:	4b0c      	ldr	r3, [pc, #48]	; (360 <app_arm_disarm+0x68>)
     32e:	4798      	blx	r3
    app_buzzer_alarm_stop();
     330:	4b0c      	ldr	r3, [pc, #48]	; (364 <app_arm_disarm+0x6c>)
     332:	4798      	blx	r3
    SYS_TimerStop(&app_arm_alarm_LimitTimer);   // try to silentAlarm if not alarming
     334:	480c      	ldr	r0, [pc, #48]	; (368 <app_arm_disarm+0x70>)
     336:	4b0d      	ldr	r3, [pc, #52]	; (36c <app_arm_disarm+0x74>)
     338:	4798      	blx	r3
    SYS_TimerStart(&appDisarmFlashTimer);       //
     33a:	480d      	ldr	r0, [pc, #52]	; (370 <app_arm_disarm+0x78>)
     33c:	4b0d      	ldr	r3, [pc, #52]	; (374 <app_arm_disarm+0x7c>)
     33e:	4798      	blx	r3
}
     340:	bd70      	pop	{r4, r5, r6, pc}
        appDisarmDurationTimer.interval = 1000 * duration;
     342:	4a0d      	ldr	r2, [pc, #52]	; (378 <app_arm_disarm+0x80>)
     344:	23fa      	movs	r3, #250	; 0xfa
     346:	009b      	lsls	r3, r3, #2
     348:	4343      	muls	r3, r0
     34a:	6093      	str	r3, [r2, #8]
        SYS_TimerRestart(&appDisarmDurationTimer);
     34c:	0010      	movs	r0, r2
     34e:	4b0b      	ldr	r3, [pc, #44]	; (37c <app_arm_disarm+0x84>)
     350:	4798      	blx	r3
     352:	e7d6      	b.n	302 <app_arm_disarm+0xa>
     354:	20000acc 	.word	0x20000acc
     358:	2000044c 	.word	0x2000044c
     35c:	000017c9 	.word	0x000017c9
     360:	0000014d 	.word	0x0000014d
     364:	00000931 	.word	0x00000931
     368:	20000438 	.word	0x20000438
     36c:	000030c9 	.word	0x000030c9
     370:	20000424 	.word	0x20000424
     374:	00003159 	.word	0x00003159
     378:	20000410 	.word	0x20000410
     37c:	00003189 	.word	0x00003189

00000380 <app_arm_init>:
{
     380:	b530      	push	{r4, r5, lr}
     382:	b083      	sub	sp, #12
    app_arm_disarm(0);
     384:	2000      	movs	r0, #0
     386:	4b1b      	ldr	r3, [pc, #108]	; (3f4 <app_arm_init+0x74>)
     388:	4798      	blx	r3
    disarmDuration = 0;
     38a:	2200      	movs	r2, #0
     38c:	4b1a      	ldr	r3, [pc, #104]	; (3f8 <app_arm_init+0x78>)
     38e:	801a      	strh	r2, [r3, #0]
    if (APP_EEPROM_MODEL_TYPE_FACTORY == app_eeprom_read_connect_wanted())
     390:	4b1a      	ldr	r3, [pc, #104]	; (3fc <app_arm_init+0x7c>)
     392:	4798      	blx	r3
     394:	2802      	cmp	r0, #2
     396:	d028      	beq.n	3ea <app_arm_init+0x6a>
        appAutoArmTimer.interval = AUTO_ARM_TIME;
     398:	4a19      	ldr	r2, [pc, #100]	; (400 <app_arm_init+0x80>)
     39a:	4b1a      	ldr	r3, [pc, #104]	; (404 <app_arm_init+0x84>)
     39c:	609a      	str	r2, [r3, #8]
    appAutoArmTimer.mode    = SYS_TIMER_INTERVAL_MODE;
     39e:	4819      	ldr	r0, [pc, #100]	; (404 <app_arm_init+0x84>)
     3a0:	2400      	movs	r4, #0
     3a2:	7304      	strb	r4, [r0, #12]
    appAutoArmTimer.handler = appAutoArmTimerHandler;
     3a4:	4b18      	ldr	r3, [pc, #96]	; (408 <app_arm_init+0x88>)
     3a6:	6103      	str	r3, [r0, #16]
    SYS_TimerStart(&appAutoArmTimer);
     3a8:	4b18      	ldr	r3, [pc, #96]	; (40c <app_arm_init+0x8c>)
     3aa:	4798      	blx	r3
    app_arm_alarm_LimitTimer.interval = ALARM_TIME_BEFORE_SILENT;           // 10 min -> 5min 8/25/2020
     3ac:	4b18      	ldr	r3, [pc, #96]	; (410 <app_arm_init+0x90>)
     3ae:	4a19      	ldr	r2, [pc, #100]	; (414 <app_arm_init+0x94>)
     3b0:	609a      	str	r2, [r3, #8]
    app_arm_alarm_LimitTimer.mode     = SYS_TIMER_INTERVAL_MODE;
     3b2:	731c      	strb	r4, [r3, #12]
    app_arm_alarm_LimitTimer.handler  = app_arm_alarm_LimitTimerHandler;
     3b4:	4a18      	ldr	r2, [pc, #96]	; (418 <app_arm_init+0x98>)
     3b6:	611a      	str	r2, [r3, #16]
    appDisarmDurationTimer.interval = DISARM_DURATION;
     3b8:	4b18      	ldr	r3, [pc, #96]	; (41c <app_arm_init+0x9c>)
     3ba:	25fa      	movs	r5, #250	; 0xfa
     3bc:	00ad      	lsls	r5, r5, #2
     3be:	609d      	str	r5, [r3, #8]
    appDisarmDurationTimer.mode     = SYS_TIMER_INTERVAL_MODE;
     3c0:	731c      	strb	r4, [r3, #12]
    appDisarmDurationTimer.handler  = appDisarmDurationTimerHandler;
     3c2:	4a17      	ldr	r2, [pc, #92]	; (420 <app_arm_init+0xa0>)
     3c4:	611a      	str	r2, [r3, #16]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     3c6:	a901      	add	r1, sp, #4
     3c8:	2301      	movs	r3, #1
     3ca:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     3cc:	708c      	strb	r4, [r1, #2]
    pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     3ce:	700b      	strb	r3, [r1, #0]
    port_pin_set_config(DISARMED_FLASH_PIN, &pin_conf);
     3d0:	2006      	movs	r0, #6
     3d2:	4b14      	ldr	r3, [pc, #80]	; (424 <app_arm_init+0xa4>)
     3d4:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3d6:	2240      	movs	r2, #64	; 0x40
     3d8:	4b13      	ldr	r3, [pc, #76]	; (428 <app_arm_init+0xa8>)
     3da:	619a      	str	r2, [r3, #24]
    appDisarmFlashTimer.interval = DISARM_FLASH_TIME;           // delay
     3dc:	4b13      	ldr	r3, [pc, #76]	; (42c <app_arm_init+0xac>)
     3de:	609d      	str	r5, [r3, #8]
    appDisarmFlashTimer.mode     = SYS_TIMER_INTERVAL_MODE;
     3e0:	731c      	strb	r4, [r3, #12]
    appDisarmFlashTimer.handler  = appDisarmFlashTimerHandler;
     3e2:	4a13      	ldr	r2, [pc, #76]	; (430 <app_arm_init+0xb0>)
     3e4:	611a      	str	r2, [r3, #16]
}
     3e6:	b003      	add	sp, #12
     3e8:	bd30      	pop	{r4, r5, pc}
        appAutoArmTimer.interval = DEFAULT_MODE_AUTO_ARM_TIME;
     3ea:	4a12      	ldr	r2, [pc, #72]	; (434 <app_arm_init+0xb4>)
     3ec:	4b05      	ldr	r3, [pc, #20]	; (404 <app_arm_init+0x84>)
     3ee:	609a      	str	r2, [r3, #8]
     3f0:	e7d5      	b.n	39e <app_arm_init+0x1e>
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	000002f9 	.word	0x000002f9
     3f8:	20000acc 	.word	0x20000acc
     3fc:	00000b1d 	.word	0x00000b1d
     400:	0000ea60 	.word	0x0000ea60
     404:	200003fc 	.word	0x200003fc
     408:	00000271 	.word	0x00000271
     40c:	00003159 	.word	0x00003159
     410:	20000438 	.word	0x20000438
     414:	000493e0 	.word	0x000493e0
     418:	00000495 	.word	0x00000495
     41c:	20000410 	.word	0x20000410
     420:	00000119 	.word	0x00000119
     424:	00004bc5 	.word	0x00004bc5
     428:	41004400 	.word	0x41004400
     42c:	20000424 	.word	0x20000424
     430:	00000115 	.word	0x00000115
     434:	000dbba0 	.word	0x000dbba0

00000438 <app_arm_silence_alarm>:
{
     438:	b510      	push	{r4, lr}
    app_arm_reset_auto_arm_timer();
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <app_arm_silence_alarm+0x3c>)
     43c:	4798      	blx	r3
    if ((app_arm_is_any_alarm_active()) && (armAlarmStatus.silentAlarm == NOT_SILENT_ALARMING))
     43e:	4b0e      	ldr	r3, [pc, #56]	; (478 <app_arm_silence_alarm+0x40>)
     440:	4798      	blx	r3
     442:	1e04      	subs	r4, r0, #0
     444:	d003      	beq.n	44e <app_arm_silence_alarm+0x16>
     446:	4b0d      	ldr	r3, [pc, #52]	; (47c <app_arm_silence_alarm+0x44>)
     448:	781b      	ldrb	r3, [r3, #0]
     44a:	079b      	lsls	r3, r3, #30
     44c:	d507      	bpl.n	45e <app_arm_silence_alarm+0x26>
        app_led_update();
     44e:	4b0c      	ldr	r3, [pc, #48]	; (480 <app_arm_silence_alarm+0x48>)
     450:	4798      	blx	r3
        app_arm_disarm(0);
     452:	2000      	movs	r0, #0
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <app_arm_silence_alarm+0x4c>)
     456:	4798      	blx	r3
        return false;  // Couldn't enter silent alarming mode
     458:	2400      	movs	r4, #0
}
     45a:	0020      	movs	r0, r4
     45c:	bd10      	pop	{r4, pc}
        armAlarmStatus.silentAlarm = SILENT_ALARMING;
     45e:	4a07      	ldr	r2, [pc, #28]	; (47c <app_arm_silence_alarm+0x44>)
     460:	7813      	ldrb	r3, [r2, #0]
     462:	2102      	movs	r1, #2
     464:	430b      	orrs	r3, r1
     466:	7013      	strb	r3, [r2, #0]
        app_buzzer_alarm_stop();                   // Silence the alarm
     468:	4b07      	ldr	r3, [pc, #28]	; (488 <app_arm_silence_alarm+0x50>)
     46a:	4798      	blx	r3
        SYS_TimerStop(&app_arm_alarm_LimitTimer);  // Don't come here again
     46c:	4807      	ldr	r0, [pc, #28]	; (48c <app_arm_silence_alarm+0x54>)
     46e:	4b08      	ldr	r3, [pc, #32]	; (490 <app_arm_silence_alarm+0x58>)
     470:	4798      	blx	r3
        return true;  // Silent Alarming
     472:	e7f2      	b.n	45a <app_arm_silence_alarm+0x22>
     474:	0000014d 	.word	0x0000014d
     478:	0000012d 	.word	0x0000012d
     47c:	2000044c 	.word	0x2000044c
     480:	00001841 	.word	0x00001841
     484:	000002f9 	.word	0x000002f9
     488:	00000931 	.word	0x00000931
     48c:	20000438 	.word	0x20000438
     490:	000030c9 	.word	0x000030c9

00000494 <app_arm_alarm_LimitTimerHandler>:
{
     494:	b510      	push	{r4, lr}
    app_arm_silence_alarm();
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <app_arm_alarm_LimitTimerHandler+0x8>)
     498:	4798      	blx	r3
}
     49a:	bd10      	pop	{r4, pc}
     49c:	00000439 	.word	0x00000439

000004a0 <app_arm_alarmEvent>:
{
     4a0:	b510      	push	{r4, lr}
        (SYSTEM_ARMED == armAlarmStatus.daisyChainTamper_Armed ) ||\
     4a2:	4b18      	ldr	r3, [pc, #96]	; (504 <app_arm_alarmEvent+0x64>)
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	2249      	movs	r2, #73	; 0x49
    if( (SYSTEM_ARMED == armAlarmStatus.armed) ||\
     4a8:	421a      	tst	r2, r3
     4aa:	d021      	beq.n	4f0 <app_arm_alarmEvent+0x50>
        switch (alarmCause)
     4ac:	280c      	cmp	r0, #12
     4ae:	d020      	beq.n	4f2 <app_arm_alarmEvent+0x52>
     4b0:	d30a      	bcc.n	4c8 <app_arm_alarmEvent+0x28>
     4b2:	280d      	cmp	r0, #13
     4b4:	d11a      	bne.n	4ec <app_arm_alarmEvent+0x4c>
                armAlarmStatus.daisyChainTamper_Alarm   = CAUSED_ALARM;
     4b6:	4a13      	ldr	r2, [pc, #76]	; (504 <app_arm_alarmEvent+0x64>)
     4b8:	7813      	ldrb	r3, [r2, #0]
     4ba:	2120      	movs	r1, #32
     4bc:	430b      	orrs	r3, r1
     4be:	7013      	strb	r3, [r2, #0]
                UART_DBG_TX("DAISY CHAIN TAMPER ALARM");
     4c0:	4811      	ldr	r0, [pc, #68]	; (508 <app_arm_alarmEvent+0x68>)
     4c2:	4b12      	ldr	r3, [pc, #72]	; (50c <app_arm_alarmEvent+0x6c>)
     4c4:	4798      	blx	r3
                break;
     4c6:	e007      	b.n	4d8 <app_arm_alarmEvent+0x38>
                armAlarmStatus.channel_Alarm            = CAUSED_ALARM;
     4c8:	4a0e      	ldr	r2, [pc, #56]	; (504 <app_arm_alarmEvent+0x64>)
     4ca:	7813      	ldrb	r3, [r2, #0]
     4cc:	2104      	movs	r1, #4
     4ce:	430b      	orrs	r3, r1
     4d0:	7013      	strb	r3, [r2, #0]
                UART_DBG_TX("CHANNEL ALARMED");
     4d2:	480f      	ldr	r0, [pc, #60]	; (510 <app_arm_alarmEvent+0x70>)
     4d4:	4b0d      	ldr	r3, [pc, #52]	; (50c <app_arm_alarmEvent+0x6c>)
     4d6:	4798      	blx	r3
            armAlarmStatus.silentAlarm = NOT_SILENT_ALARMING;
     4d8:	4a0a      	ldr	r2, [pc, #40]	; (504 <app_arm_alarmEvent+0x64>)
     4da:	7813      	ldrb	r3, [r2, #0]
     4dc:	2102      	movs	r1, #2
     4de:	438b      	bics	r3, r1
     4e0:	7013      	strb	r3, [r2, #0]
            SYS_TimerStart(&app_arm_alarm_LimitTimer);
     4e2:	480c      	ldr	r0, [pc, #48]	; (514 <app_arm_alarmEvent+0x74>)
     4e4:	4b0c      	ldr	r3, [pc, #48]	; (518 <app_arm_alarmEvent+0x78>)
     4e6:	4798      	blx	r3
            app_buzzer_alarm_start();
     4e8:	4b0c      	ldr	r3, [pc, #48]	; (51c <app_arm_alarmEvent+0x7c>)
     4ea:	4798      	blx	r3
        app_led_update();
     4ec:	4b0c      	ldr	r3, [pc, #48]	; (520 <app_arm_alarmEvent+0x80>)
     4ee:	4798      	blx	r3
}
     4f0:	bd10      	pop	{r4, pc}
                armAlarmStatus.powerTamper_Alarm        = CAUSED_ALARM;
     4f2:	4a04      	ldr	r2, [pc, #16]	; (504 <app_arm_alarmEvent+0x64>)
     4f4:	7813      	ldrb	r3, [r2, #0]
     4f6:	2110      	movs	r1, #16
     4f8:	430b      	orrs	r3, r1
     4fa:	7013      	strb	r3, [r2, #0]
                UART_DBG_TX("POWER TAMPER ALARM");
     4fc:	4809      	ldr	r0, [pc, #36]	; (524 <app_arm_alarmEvent+0x84>)
     4fe:	4b03      	ldr	r3, [pc, #12]	; (50c <app_arm_alarmEvent+0x6c>)
     500:	4798      	blx	r3
                break;
     502:	e7e9      	b.n	4d8 <app_arm_alarmEvent+0x38>
     504:	2000044c 	.word	0x2000044c
     508:	00006d20 	.word	0x00006d20
     50c:	00001ff5 	.word	0x00001ff5
     510:	00006cfc 	.word	0x00006cfc
     514:	20000438 	.word	0x20000438
     518:	00003159 	.word	0x00003159
     51c:	000008ad 	.word	0x000008ad
     520:	00001841 	.word	0x00001841
     524:	00006d0c 	.word	0x00006d0c

00000528 <app_arm_get_alarm_status>:
    return armAlarmStatus.sAlarm;
     528:	4b01      	ldr	r3, [pc, #4]	; (530 <app_arm_get_alarm_status+0x8>)
     52a:	8818      	ldrh	r0, [r3, #0]
}
     52c:	4770      	bx	lr
     52e:	46c0      	nop			; (mov r8, r8)
     530:	2000044c 	.word	0x2000044c

00000534 <app_arm_check_why_arm_failed>:
}
     534:	4770      	bx	lr
	...

00000538 <app_arm_get_system_armed>:
    return armAlarmStatus.armed; 
     538:	4b02      	ldr	r3, [pc, #8]	; (544 <app_arm_get_system_armed+0xc>)
     53a:	7818      	ldrb	r0, [r3, #0]
     53c:	07c0      	lsls	r0, r0, #31
     53e:	0fc0      	lsrs	r0, r0, #31
}
     540:	4770      	bx	lr
     542:	46c0      	nop			; (mov r8, r8)
     544:	2000044c 	.word	0x2000044c

00000548 <app_arm_only_powerTamper_alarming>:
       (DIDNT_ALARM == armAlarmStatus.daisyChainTamper_Alarm) &&\
     548:	4b04      	ldr	r3, [pc, #16]	; (55c <app_arm_only_powerTamper_alarming+0x14>)
     54a:	781b      	ldrb	r3, [r3, #0]
   if( (CAUSED_ALARM == armAlarmStatus.powerTamper_Alarm) &&\
     54c:	2034      	movs	r0, #52	; 0x34
     54e:	4018      	ands	r0, r3
     550:	3810      	subs	r0, #16
     552:	4243      	negs	r3, r0
     554:	4158      	adcs	r0, r3
   return  result;
     556:	b2c0      	uxtb	r0, r0
}
     558:	4770      	bx	lr
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	2000044c 	.word	0x2000044c

00000560 <app_bbu_request_active>:

    app_led_update();
}

void app_bbu_request_active(void)
{
     560:	b510      	push	{r4, lr}
    appBbuState = APP_BBU_STATE_ACTIVE;
     562:	2400      	movs	r4, #0
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <app_bbu_request_active+0x20>)
     566:	701c      	strb	r4, [r3, #0]
    app_gen_io_set_status_deepSleep(APP_BBU_STATE_ACTIVE);
     568:	2000      	movs	r0, #0
     56a:	4b06      	ldr	r3, [pc, #24]	; (584 <app_bbu_request_active+0x24>)
     56c:	4798      	blx	r3
 //   app_puckToBaseCom_change_Timeout(UART_PING_TIMEOUT);

    SLP_TimerStop(&appBBUTimeLimitTimer);
     56e:	4806      	ldr	r0, [pc, #24]	; (588 <app_bbu_request_active+0x28>)
     570:	4b06      	ldr	r3, [pc, #24]	; (58c <app_bbu_request_active+0x2c>)
     572:	4798      	blx	r3
    shelfStorageTimerCompleteFlag = false;  // Dont allow shelf storage timeout condition
     574:	4b06      	ldr	r3, [pc, #24]	; (590 <app_bbu_request_active+0x30>)
     576:	701c      	strb	r4, [r3, #0]
    app_led_update();
     578:	4b06      	ldr	r3, [pc, #24]	; (594 <app_bbu_request_active+0x34>)
     57a:	4798      	blx	r3
}
     57c:	bd10      	pop	{r4, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	20000464 	.word	0x20000464
     584:	00001705 	.word	0x00001705
     588:	20000450 	.word	0x20000450
     58c:	00002f95 	.word	0x00002f95
     590:	20000465 	.word	0x20000465
     594:	00001841 	.word	0x00001841

00000598 <app_bbu_sleep_on_exit>:

void app_bbu_sleep_on_exit(bool sleepOnExit)
{
    if (APP_BBU_STATE_SLEEP == appBbuState)
     598:	4b09      	ldr	r3, [pc, #36]	; (5c0 <app_bbu_sleep_on_exit+0x28>)
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	2b01      	cmp	r3, #1
     59e:	d000      	beq.n	5a2 <app_bbu_sleep_on_exit+0xa>
        else
        {
            SCB->SCR &= ~SCB_SCR_SLEEPONEXIT_Msk;
        }
    }
}
     5a0:	4770      	bx	lr
        if (sleepOnExit)
     5a2:	2800      	cmp	r0, #0
     5a4:	d105      	bne.n	5b2 <app_bbu_sleep_on_exit+0x1a>
            SCB->SCR &= ~SCB_SCR_SLEEPONEXIT_Msk;
     5a6:	4a07      	ldr	r2, [pc, #28]	; (5c4 <app_bbu_sleep_on_exit+0x2c>)
     5a8:	6913      	ldr	r3, [r2, #16]
     5aa:	2102      	movs	r1, #2
     5ac:	438b      	bics	r3, r1
     5ae:	6113      	str	r3, [r2, #16]
}
     5b0:	e7f6      	b.n	5a0 <app_bbu_sleep_on_exit+0x8>
            SCB->SCR |= SCB_SCR_SLEEPONEXIT_Msk;
     5b2:	4a04      	ldr	r2, [pc, #16]	; (5c4 <app_bbu_sleep_on_exit+0x2c>)
     5b4:	6913      	ldr	r3, [r2, #16]
     5b6:	2102      	movs	r1, #2
     5b8:	430b      	orrs	r3, r1
     5ba:	6113      	str	r3, [r2, #16]
     5bc:	e7f0      	b.n	5a0 <app_bbu_sleep_on_exit+0x8>
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	20000464 	.word	0x20000464
     5c4:	e000ed00 	.word	0xe000ed00

000005c8 <app_buzzer_disable>:
        buzzerState = BUZ_STATE_PROCESSING;
    }
}

static void app_buzzer_disable(void)
{
     5c8:	b510      	push	{r4, lr}
     5ca:	b082      	sub	sp, #8
    if (SYS_TimerStarted(&app_buzzer_alarm_note_timer))
     5cc:	4814      	ldr	r0, [pc, #80]	; (620 <app_buzzer_disable+0x58>)
     5ce:	4b15      	ldr	r3, [pc, #84]	; (624 <app_buzzer_disable+0x5c>)
     5d0:	4798      	blx	r3
     5d2:	2800      	cmp	r0, #0
     5d4:	d11f      	bne.n	616 <app_buzzer_disable+0x4e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     5d6:	4b14      	ldr	r3, [pc, #80]	; (628 <app_buzzer_disable+0x60>)
     5d8:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     5da:	2102      	movs	r1, #2
     5dc:	6893      	ldr	r3, [r2, #8]
     5de:	4219      	tst	r1, r3
     5e0:	d1fc      	bne.n	5dc <app_buzzer_disable+0x14>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     5e2:	4b12      	ldr	r3, [pc, #72]	; (62c <app_buzzer_disable+0x64>)
     5e4:	6253      	str	r3, [r2, #36]	; 0x24
	/* Clear interrupt flag */
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     5e6:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Disable the TCC module */
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     5e8:	6813      	ldr	r3, [r2, #0]
     5ea:	2102      	movs	r1, #2
     5ec:	438b      	bics	r3, r1
     5ee:	6013      	str	r3, [r2, #0]
    {
        SYS_TimerStop(&app_buzzer_alarm_note_timer);
    }

    tcc_disable(&tcc_instance_buzzer);
    tcc_disable_callback(&tcc_instance_buzzer, (TCC_CALLBACK_CHANNEL_0 + BUZZER_CHANNEL));
     5f0:	3106      	adds	r1, #6
     5f2:	480d      	ldr	r0, [pc, #52]	; (628 <app_buzzer_disable+0x60>)
     5f4:	4b0e      	ldr	r3, [pc, #56]	; (630 <app_buzzer_disable+0x68>)
     5f6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5f8:	a901      	add	r1, sp, #4
     5fa:	2380      	movs	r3, #128	; 0x80
     5fc:	700b      	strb	r3, [r1, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     5fe:	2300      	movs	r3, #0
     600:	70cb      	strb	r3, [r1, #3]

    // Configure the pin to output and set to low to avoid high current through the speaker
    struct system_pinmux_config muxConfig;
    system_pinmux_get_config_defaults(&muxConfig);
    muxConfig.direction  = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     602:	2401      	movs	r4, #1
     604:	704c      	strb	r4, [r1, #1]
    muxConfig.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     606:	708b      	strb	r3, [r1, #2]
    system_pinmux_pin_set_config(BUZZER_PIN, &muxConfig);
     608:	2000      	movs	r0, #0
     60a:	4b0a      	ldr	r3, [pc, #40]	; (634 <app_buzzer_disable+0x6c>)
     60c:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <app_buzzer_disable+0x70>)
     610:	615c      	str	r4, [r3, #20]
    port_pin_set_output_level(BUZZER_PIN, false);
}
     612:	b002      	add	sp, #8
     614:	bd10      	pop	{r4, pc}
        SYS_TimerStop(&app_buzzer_alarm_note_timer);
     616:	4802      	ldr	r0, [pc, #8]	; (620 <app_buzzer_disable+0x58>)
     618:	4b08      	ldr	r3, [pc, #32]	; (63c <app_buzzer_disable+0x74>)
     61a:	4798      	blx	r3
     61c:	e7db      	b.n	5d6 <app_buzzer_disable+0xe>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	20000468 	.word	0x20000468
     624:	0000311d 	.word	0x0000311d
     628:	20000528 	.word	0x20000528
     62c:	000ffc0f 	.word	0x000ffc0f
     630:	00003f59 	.word	0x00003f59
     634:	000052b1 	.word	0x000052b1
     638:	41004400 	.word	0x41004400
     63c:	000030c9 	.word	0x000030c9

00000640 <app_buzzer_alarm_note_timerHandler>:
{
     640:	b510      	push	{r4, lr}
    buzzerState = BUZ_STATE_TIMEOUT;
     642:	2202      	movs	r2, #2
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <app_buzzer_alarm_note_timerHandler+0x10>)
     646:	701a      	strb	r2, [r3, #0]
    app_buzzer_disable();
     648:	4b02      	ldr	r3, [pc, #8]	; (654 <app_buzzer_alarm_note_timerHandler+0x14>)
     64a:	4798      	blx	r3
}
     64c:	bd10      	pop	{r4, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	2000047d 	.word	0x2000047d
     654:	000005c9 	.word	0x000005c9

00000658 <app_buzzer_alarmCallback>:

    buzzerState = BUZ_STATE_IDLE;
}

static void app_buzzer_alarmCallback(struct tcc_module* const module)
{
     658:	b510      	push	{r4, lr}
     65a:	0004      	movs	r4, r0
    static uint16_t sweepCounter  = BUZ_FREQ_MAX;
    static uint8_t sweepDirection = 1;
    static uint16_t sweepDelay    = 0;

    if ((abs(sweepCounter - BUZ_FREQ_RESONANT) > BUZ_FREQ_INC) || (sweepDelay >= BUZ_FREQ_DELAY) || (sweepDirection == 1))
     65c:	4b1f      	ldr	r3, [pc, #124]	; (6dc <app_buzzer_alarmCallback+0x84>)
     65e:	881b      	ldrh	r3, [r3, #0]
     660:	4a1f      	ldr	r2, [pc, #124]	; (6e0 <app_buzzer_alarmCallback+0x88>)
     662:	189a      	adds	r2, r3, r2
     664:	17d1      	asrs	r1, r2, #31
     666:	1852      	adds	r2, r2, r1
     668:	404a      	eors	r2, r1
     66a:	2a02      	cmp	r2, #2
     66c:	dc0b      	bgt.n	686 <app_buzzer_alarmCallback+0x2e>
     66e:	4a1d      	ldr	r2, [pc, #116]	; (6e4 <app_buzzer_alarmCallback+0x8c>)
     670:	8812      	ldrh	r2, [r2, #0]
     672:	2ad1      	cmp	r2, #209	; 0xd1
     674:	d807      	bhi.n	686 <app_buzzer_alarmCallback+0x2e>
     676:	491c      	ldr	r1, [pc, #112]	; (6e8 <app_buzzer_alarmCallback+0x90>)
     678:	7809      	ldrb	r1, [r1, #0]
     67a:	2901      	cmp	r1, #1
     67c:	d015      	beq.n	6aa <app_buzzer_alarmCallback+0x52>
        // Changes Period
        tcc_set_top_value(module, sweepCounter);
        tcc_set_compare_value(module, (TCC_MATCH_CAPTURE_CHANNEL_0 + BUZZER_CHANNEL), sweepCounter / 2);
    }
    else
        sweepDelay++;
     67e:	3201      	adds	r2, #1
     680:	4b18      	ldr	r3, [pc, #96]	; (6e4 <app_buzzer_alarmCallback+0x8c>)
     682:	801a      	strh	r2, [r3, #0]
}
     684:	e029      	b.n	6da <app_buzzer_alarmCallback+0x82>
        sweepDelay = 0;
     686:	2100      	movs	r1, #0
     688:	4a16      	ldr	r2, [pc, #88]	; (6e4 <app_buzzer_alarmCallback+0x8c>)
     68a:	8011      	strh	r1, [r2, #0]
        if (sweepDirection)
     68c:	4a16      	ldr	r2, [pc, #88]	; (6e8 <app_buzzer_alarmCallback+0x90>)
     68e:	7812      	ldrb	r2, [r2, #0]
     690:	2a00      	cmp	r2, #0
     692:	d10d      	bne.n	6b0 <app_buzzer_alarmCallback+0x58>
            sweepCounter -= BUZ_FREQ_INC;
     694:	3b02      	subs	r3, #2
     696:	4a11      	ldr	r2, [pc, #68]	; (6dc <app_buzzer_alarmCallback+0x84>)
     698:	8013      	strh	r3, [r2, #0]
     69a:	e00c      	b.n	6b6 <app_buzzer_alarmCallback+0x5e>
        else if (sweepCounter >= BUZ_FREQ_MIN)
     69c:	4b13      	ldr	r3, [pc, #76]	; (6ec <app_buzzer_alarmCallback+0x94>)
     69e:	4299      	cmp	r1, r3
     6a0:	d911      	bls.n	6c6 <app_buzzer_alarmCallback+0x6e>
            sweepDirection = 0;
     6a2:	2200      	movs	r2, #0
     6a4:	4b10      	ldr	r3, [pc, #64]	; (6e8 <app_buzzer_alarmCallback+0x90>)
     6a6:	701a      	strb	r2, [r3, #0]
     6a8:	e00d      	b.n	6c6 <app_buzzer_alarmCallback+0x6e>
        sweepDelay = 0;
     6aa:	2100      	movs	r1, #0
     6ac:	4a0d      	ldr	r2, [pc, #52]	; (6e4 <app_buzzer_alarmCallback+0x8c>)
     6ae:	8011      	strh	r1, [r2, #0]
            sweepCounter += BUZ_FREQ_INC;
     6b0:	3302      	adds	r3, #2
     6b2:	4a0a      	ldr	r2, [pc, #40]	; (6dc <app_buzzer_alarmCallback+0x84>)
     6b4:	8013      	strh	r3, [r2, #0]
        if (sweepCounter <= BUZ_FREQ_MAX)
     6b6:	4b09      	ldr	r3, [pc, #36]	; (6dc <app_buzzer_alarmCallback+0x84>)
     6b8:	8819      	ldrh	r1, [r3, #0]
     6ba:	4b0d      	ldr	r3, [pc, #52]	; (6f0 <app_buzzer_alarmCallback+0x98>)
     6bc:	4299      	cmp	r1, r3
     6be:	d8ed      	bhi.n	69c <app_buzzer_alarmCallback+0x44>
            sweepDirection = 1;
     6c0:	2201      	movs	r2, #1
     6c2:	4b09      	ldr	r3, [pc, #36]	; (6e8 <app_buzzer_alarmCallback+0x90>)
     6c4:	701a      	strb	r2, [r3, #0]
        tcc_set_top_value(module, sweepCounter);
     6c6:	0020      	movs	r0, r4
     6c8:	4b0a      	ldr	r3, [pc, #40]	; (6f4 <app_buzzer_alarmCallback+0x9c>)
     6ca:	4798      	blx	r3
        tcc_set_compare_value(module, (TCC_MATCH_CAPTURE_CHANNEL_0 + BUZZER_CHANNEL), sweepCounter / 2);
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <app_buzzer_alarmCallback+0x84>)
     6ce:	881a      	ldrh	r2, [r3, #0]
     6d0:	0852      	lsrs	r2, r2, #1
     6d2:	2100      	movs	r1, #0
     6d4:	0020      	movs	r0, r4
     6d6:	4b08      	ldr	r3, [pc, #32]	; (6f8 <app_buzzer_alarmCallback+0xa0>)
     6d8:	4798      	blx	r3
}
     6da:	bd10      	pop	{r4, pc}
     6dc:	20000000 	.word	0x20000000
     6e0:	fffff890 	.word	0xfffff890
     6e4:	20000526 	.word	0x20000526
     6e8:	20000002 	.word	0x20000002
     6ec:	00000a6a 	.word	0x00000a6a
     6f0:	000006f2 	.word	0x000006f2
     6f4:	00003ef1 	.word	0x00003ef1
     6f8:	00003ee1 	.word	0x00003ee1

000006fc <app_buzzer_enable>:
{
     6fc:	b570      	push	{r4, r5, r6, lr}
     6fe:	0005      	movs	r5, r0
     700:	000c      	movs	r4, r1
    if (!SYS_TimerStarted(&app_buzzer_alarm_note_timer))
     702:	4829      	ldr	r0, [pc, #164]	; (7a8 <app_buzzer_enable+0xac>)
     704:	4b29      	ldr	r3, [pc, #164]	; (7ac <app_buzzer_enable+0xb0>)
     706:	4798      	blx	r3
     708:	2800      	cmp	r0, #0
     70a:	d14c      	bne.n	7a6 <app_buzzer_enable+0xaa>
        if (BEEP_PAUSE != freq)
     70c:	2d00      	cmp	r5, #0
     70e:	d040      	beq.n	792 <app_buzzer_enable+0x96>
            switch (freq)
     710:	2d08      	cmp	r5, #8
     712:	d832      	bhi.n	77a <app_buzzer_enable+0x7e>
     714:	00ad      	lsls	r5, r5, #2
     716:	4b26      	ldr	r3, [pc, #152]	; (7b0 <app_buzzer_enable+0xb4>)
     718:	595b      	ldr	r3, [r3, r5]
     71a:	469f      	mov	pc, r3
                    tccTopValue = FREQ_4500Hz;
     71c:	4d25      	ldr	r5, [pc, #148]	; (7b4 <app_buzzer_enable+0xb8>)
            tcc_init(&tcc_instance_buzzer, BUZZER_MODULE, &config_tcc_buzzer);
     71e:	4e26      	ldr	r6, [pc, #152]	; (7b8 <app_buzzer_enable+0xbc>)
     720:	4a26      	ldr	r2, [pc, #152]	; (7bc <app_buzzer_enable+0xc0>)
     722:	4927      	ldr	r1, [pc, #156]	; (7c0 <app_buzzer_enable+0xc4>)
     724:	0030      	movs	r0, r6
     726:	4b27      	ldr	r3, [pc, #156]	; (7c4 <app_buzzer_enable+0xc8>)
     728:	4798      	blx	r3
            tcc_set_top_value(&tcc_instance_buzzer, tccTopValue);
     72a:	0029      	movs	r1, r5
     72c:	0030      	movs	r0, r6
     72e:	4b26      	ldr	r3, [pc, #152]	; (7c8 <app_buzzer_enable+0xcc>)
     730:	4798      	blx	r3
            tcc_set_compare_value(&tcc_instance_buzzer, (TCC_MATCH_CAPTURE_CHANNEL_0 + BUZZER_CHANNEL), tccTopValue / 2);
     732:	086a      	lsrs	r2, r5, #1
     734:	2100      	movs	r1, #0
     736:	0030      	movs	r0, r6
     738:	4b24      	ldr	r3, [pc, #144]	; (7cc <app_buzzer_enable+0xd0>)
     73a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     73c:	6832      	ldr	r2, [r6, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     73e:	2104      	movs	r1, #4
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     740:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Cancel STOP command and issue RETRIGGER */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     742:	25e0      	movs	r5, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     744:	6893      	ldr	r3, [r2, #8]
     746:	4219      	tst	r1, r3
     748:	d1fc      	bne.n	744 <app_buzzer_enable+0x48>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     74a:	7953      	ldrb	r3, [r2, #5]
     74c:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     74e:	d016      	beq.n	77e <app_buzzer_enable+0x82>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
     750:	2b20      	cmp	r3, #32
     752:	d016      	beq.n	782 <app_buzzer_enable+0x86>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
     754:	2b40      	cmp	r3, #64	; 0x40
     756:	d1f5      	bne.n	744 <app_buzzer_enable+0x48>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     758:	7115      	strb	r5, [r2, #4]
     75a:	e7f3      	b.n	744 <app_buzzer_enable+0x48>
                    tccTopValue = FREQ_4200Hz;
     75c:	25ee      	movs	r5, #238	; 0xee
     75e:	00ed      	lsls	r5, r5, #3
                    break;
     760:	e7dd      	b.n	71e <app_buzzer_enable+0x22>
                    tccTopValue = FREQ_4000Hz;
     762:	25fa      	movs	r5, #250	; 0xfa
     764:	00ed      	lsls	r5, r5, #3
                    break;
     766:	e7da      	b.n	71e <app_buzzer_enable+0x22>
                    tccTopValue = FREQ_3000Hz;
     768:	4d19      	ldr	r5, [pc, #100]	; (7d0 <app_buzzer_enable+0xd4>)
                    break;
     76a:	e7d8      	b.n	71e <app_buzzer_enable+0x22>
                    tccTopValue = FREQ_2700Hz;
     76c:	4d19      	ldr	r5, [pc, #100]	; (7d4 <app_buzzer_enable+0xd8>)
                    break;
     76e:	e7d6      	b.n	71e <app_buzzer_enable+0x22>
                    tccTopValue = FREQ_2637Hz;
     770:	4d19      	ldr	r5, [pc, #100]	; (7d8 <app_buzzer_enable+0xdc>)
                    break;
     772:	e7d4      	b.n	71e <app_buzzer_enable+0x22>
                    tccTopValue = FREQ_2000Hz;
     774:	25fa      	movs	r5, #250	; 0xfa
     776:	012d      	lsls	r5, r5, #4
                    break;
     778:	e7d1      	b.n	71e <app_buzzer_enable+0x22>
            uint16_t tccTopValue = 0;
     77a:	2500      	movs	r5, #0
     77c:	e7cf      	b.n	71e <app_buzzer_enable+0x22>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
     77e:	2320      	movs	r3, #32
     780:	7153      	strb	r3, [r2, #5]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     782:	2102      	movs	r1, #2
     784:	6893      	ldr	r3, [r2, #8]
     786:	4219      	tst	r1, r3
     788:	d1fc      	bne.n	784 <app_buzzer_enable+0x88>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     78a:	6813      	ldr	r3, [r2, #0]
     78c:	2102      	movs	r1, #2
     78e:	430b      	orrs	r3, r1
     790:	6013      	str	r3, [r2, #0]
        app_buzzer_alarm_note_timer.interval = duration;
     792:	4805      	ldr	r0, [pc, #20]	; (7a8 <app_buzzer_enable+0xac>)
     794:	6084      	str	r4, [r0, #8]
        app_buzzer_alarm_note_timer.mode     = SYS_TIMER_PERIODIC_MODE;
     796:	2401      	movs	r4, #1
     798:	7304      	strb	r4, [r0, #12]
        app_buzzer_alarm_note_timer.handler  = app_buzzer_alarm_note_timerHandler;
     79a:	4b10      	ldr	r3, [pc, #64]	; (7dc <app_buzzer_enable+0xe0>)
     79c:	6103      	str	r3, [r0, #16]
        SYS_TimerStart(&app_buzzer_alarm_note_timer);
     79e:	4b10      	ldr	r3, [pc, #64]	; (7e0 <app_buzzer_enable+0xe4>)
     7a0:	4798      	blx	r3
        buzzerState = BUZ_STATE_PROCESSING;
     7a2:	4b10      	ldr	r3, [pc, #64]	; (7e4 <app_buzzer_enable+0xe8>)
     7a4:	701c      	strb	r4, [r3, #0]
}
     7a6:	bd70      	pop	{r4, r5, r6, pc}
     7a8:	20000468 	.word	0x20000468
     7ac:	0000311d 	.word	0x0000311d
     7b0:	00006e14 	.word	0x00006e14
     7b4:	000006f2 	.word	0x000006f2
     7b8:	20000528 	.word	0x20000528
     7bc:	20000480 	.word	0x20000480
     7c0:	42002800 	.word	0x42002800
     7c4:	00003ad5 	.word	0x00003ad5
     7c8:	00003ef1 	.word	0x00003ef1
     7cc:	00003ee1 	.word	0x00003ee1
     7d0:	00000a6b 	.word	0x00000a6b
     7d4:	00000b93 	.word	0x00000b93
     7d8:	00000bda 	.word	0x00000bda
     7dc:	00000641 	.word	0x00000641
     7e0:	00003159 	.word	0x00003159
     7e4:	2000047d 	.word	0x2000047d

000007e8 <app_buzzer_start_pattern>:
{
     7e8:	b510      	push	{r4, lr}
     7ea:	0004      	movs	r4, r0
    if (BUZ_PAT_ALARM != buzzerPatternIdx)
     7ec:	4b09      	ldr	r3, [pc, #36]	; (814 <app_buzzer_start_pattern+0x2c>)
     7ee:	781b      	ldrb	r3, [r3, #0]
     7f0:	2bff      	cmp	r3, #255	; 0xff
     7f2:	d00d      	beq.n	810 <app_buzzer_start_pattern+0x28>
        app_buzzer_disable();
     7f4:	4b08      	ldr	r3, [pc, #32]	; (818 <app_buzzer_start_pattern+0x30>)
     7f6:	4798      	blx	r3
        buzzerPatternIdx         = pattern;
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <app_buzzer_start_pattern+0x2c>)
     7fa:	701c      	strb	r4, [r3, #0]
        notePointer              = 0;
     7fc:	2200      	movs	r2, #0
     7fe:	4b07      	ldr	r3, [pc, #28]	; (81c <app_buzzer_start_pattern+0x34>)
     800:	701a      	strb	r2, [r3, #0]
        struct buzzerNote_t note = buzzerPatterns[buzzerPatternIdx][0];
     802:	00a4      	lsls	r4, r4, #2
     804:	4b06      	ldr	r3, [pc, #24]	; (820 <app_buzzer_start_pattern+0x38>)
     806:	58e3      	ldr	r3, [r4, r3]
        app_buzzer_enable(note.freq, note.duration);
     808:	8859      	ldrh	r1, [r3, #2]
     80a:	7818      	ldrb	r0, [r3, #0]
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <app_buzzer_start_pattern+0x3c>)
     80e:	4798      	blx	r3
}
     810:	bd10      	pop	{r4, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	2000047c 	.word	0x2000047c
     818:	000005c9 	.word	0x000005c9
     81c:	20000524 	.word	0x20000524
     820:	00006e38 	.word	0x00006e38
     824:	000006fd 	.word	0x000006fd

00000828 <app_buzzer_init>:
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	b083      	sub	sp, #12
    tcc_get_config_defaults(&config_tcc_buzzer, BUZZER_MODULE);
     82c:	4f15      	ldr	r7, [pc, #84]	; (884 <app_buzzer_init+0x5c>)
     82e:	4c16      	ldr	r4, [pc, #88]	; (888 <app_buzzer_init+0x60>)
     830:	0039      	movs	r1, r7
     832:	0020      	movs	r0, r4
     834:	4b15      	ldr	r3, [pc, #84]	; (88c <app_buzzer_init+0x64>)
     836:	4798      	blx	r3
    config_tcc_buzzer.counter.clock_source    = BUZZER_CLK_SRC;
     838:	2305      	movs	r3, #5
     83a:	72a3      	strb	r3, [r4, #10]
    config_tcc_buzzer.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
     83c:	2500      	movs	r5, #0
     83e:	72e5      	strb	r5, [r4, #11]
    config_tcc_buzzer.counter.direction       = TCC_COUNT_DIRECTION_DOWN;
     840:	2601      	movs	r6, #1
     842:	7266      	strb	r6, [r4, #9]
    config_tcc_buzzer.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     844:	3b03      	subs	r3, #3
     846:	7623      	strb	r3, [r4, #24]
    config_tcc_buzzer.pins.enable_wave_out_pin[BUZZER_CHANNEL] = true;
     848:	3396      	adds	r3, #150	; 0x96
     84a:	54e6      	strb	r6, [r4, r3]
    config_tcc_buzzer.pins.wave_out_pin[BUZZER_CHANNEL]        = BUZZER_PIN;
     84c:	65a5      	str	r5, [r4, #88]	; 0x58
    config_tcc_buzzer.pins.wave_out_pin_mux[BUZZER_CHANNEL]    = BUZZER_MUX;
     84e:	3b94      	subs	r3, #148	; 0x94
     850:	67a3      	str	r3, [r4, #120]	; 0x78
    config_tcc_buzzer.double_buffering_enabled                 = false;
     852:	339c      	adds	r3, #156	; 0x9c
     854:	54e5      	strb	r5, [r4, r3]
    tcc_init(&tcc_instance_buzzer, BUZZER_MODULE, &config_tcc_buzzer);
     856:	0022      	movs	r2, r4
     858:	0039      	movs	r1, r7
     85a:	480d      	ldr	r0, [pc, #52]	; (890 <app_buzzer_init+0x68>)
     85c:	4b0d      	ldr	r3, [pc, #52]	; (894 <app_buzzer_init+0x6c>)
     85e:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
     860:	a901      	add	r1, sp, #4
     862:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
     864:	708d      	strb	r5, [r1, #2]
    pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     866:	700e      	strb	r6, [r1, #0]
    port_pin_set_config(BUZZER_PIN, &pin_conf);
     868:	2000      	movs	r0, #0
     86a:	4b0b      	ldr	r3, [pc, #44]	; (898 <app_buzzer_init+0x70>)
     86c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <app_buzzer_init+0x74>)
     870:	615e      	str	r6, [r3, #20]
    buzzerPatternIdx = BUZ_PAT_NONE;
     872:	4b0b      	ldr	r3, [pc, #44]	; (8a0 <app_buzzer_init+0x78>)
     874:	701d      	strb	r5, [r3, #0]
    notePointer      = 0;
     876:	4b0b      	ldr	r3, [pc, #44]	; (8a4 <app_buzzer_init+0x7c>)
     878:	701d      	strb	r5, [r3, #0]
    buzzerState = BUZ_STATE_IDLE;
     87a:	4b0b      	ldr	r3, [pc, #44]	; (8a8 <app_buzzer_init+0x80>)
     87c:	701d      	strb	r5, [r3, #0]
}
     87e:	b003      	add	sp, #12
     880:	bdf0      	pop	{r4, r5, r6, r7, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	42002800 	.word	0x42002800
     888:	20000480 	.word	0x20000480
     88c:	00003989 	.word	0x00003989
     890:	20000528 	.word	0x20000528
     894:	00003ad5 	.word	0x00003ad5
     898:	00004bc5 	.word	0x00004bc5
     89c:	41004400 	.word	0x41004400
     8a0:	2000047c 	.word	0x2000047c
     8a4:	20000524 	.word	0x20000524
     8a8:	2000047d 	.word	0x2000047d

000008ac <app_buzzer_alarm_start>:

void app_buzzer_alarm_start(void)
{
     8ac:	b510      	push	{r4, lr}
//     {
//         return;
//     }
//    app_buzzer_set_volume(buzVolume);

    app_buzzer_disable();
     8ae:	4b13      	ldr	r3, [pc, #76]	; (8fc <app_buzzer_alarm_start+0x50>)
     8b0:	4798      	blx	r3

    buzzerPatternIdx = BUZ_PAT_ALARM;
     8b2:	22ff      	movs	r2, #255	; 0xff
     8b4:	4b12      	ldr	r3, [pc, #72]	; (900 <app_buzzer_alarm_start+0x54>)
     8b6:	701a      	strb	r2, [r3, #0]

    tcc_init(&tcc_instance_buzzer, BUZZER_MODULE, &config_tcc_buzzer);
     8b8:	4c12      	ldr	r4, [pc, #72]	; (904 <app_buzzer_alarm_start+0x58>)
     8ba:	4a13      	ldr	r2, [pc, #76]	; (908 <app_buzzer_alarm_start+0x5c>)
     8bc:	4913      	ldr	r1, [pc, #76]	; (90c <app_buzzer_alarm_start+0x60>)
     8be:	0020      	movs	r0, r4
     8c0:	4b13      	ldr	r3, [pc, #76]	; (910 <app_buzzer_alarm_start+0x64>)
     8c2:	4798      	blx	r3
    tcc_set_top_value(&tcc_instance_buzzer, BUZ_FREQ_MAX);
     8c4:	4913      	ldr	r1, [pc, #76]	; (914 <app_buzzer_alarm_start+0x68>)
     8c6:	0020      	movs	r0, r4
     8c8:	4b13      	ldr	r3, [pc, #76]	; (918 <app_buzzer_alarm_start+0x6c>)
     8ca:	4798      	blx	r3
    tcc_set_compare_value(&tcc_instance_buzzer, (TCC_MATCH_CAPTURE_CHANNEL_0 + BUZZER_CHANNEL), (BUZ_FREQ_MAX / 2));
     8cc:	4a13      	ldr	r2, [pc, #76]	; (91c <app_buzzer_alarm_start+0x70>)
     8ce:	2100      	movs	r1, #0
     8d0:	0020      	movs	r0, r4
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <app_buzzer_alarm_start+0x74>)
     8d4:	4798      	blx	r3
    tcc_register_callback(&tcc_instance_buzzer, app_buzzer_alarmCallback, (TCC_CALLBACK_CHANNEL_0 + BUZZER_CHANNEL));
     8d6:	2208      	movs	r2, #8
     8d8:	4912      	ldr	r1, [pc, #72]	; (924 <app_buzzer_alarm_start+0x78>)
     8da:	0020      	movs	r0, r4
     8dc:	4b12      	ldr	r3, [pc, #72]	; (928 <app_buzzer_alarm_start+0x7c>)
     8de:	4798      	blx	r3
	Tcc *const tcc_module = module_inst->hw;
     8e0:	6822      	ldr	r2, [r4, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     8e2:	2102      	movs	r1, #2
     8e4:	6893      	ldr	r3, [r2, #8]
     8e6:	4219      	tst	r1, r3
     8e8:	d1fc      	bne.n	8e4 <app_buzzer_alarm_start+0x38>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     8ea:	6813      	ldr	r3, [r2, #0]
     8ec:	2102      	movs	r1, #2
     8ee:	430b      	orrs	r3, r1
     8f0:	6013      	str	r3, [r2, #0]
    tcc_enable(&tcc_instance_buzzer);
    tcc_enable_callback(&tcc_instance_buzzer, (TCC_CALLBACK_CHANNEL_0 + BUZZER_CHANNEL));
     8f2:	3106      	adds	r1, #6
     8f4:	4803      	ldr	r0, [pc, #12]	; (904 <app_buzzer_alarm_start+0x58>)
     8f6:	4b0d      	ldr	r3, [pc, #52]	; (92c <app_buzzer_alarm_start+0x80>)
     8f8:	4798      	blx	r3
}
     8fa:	bd10      	pop	{r4, pc}
     8fc:	000005c9 	.word	0x000005c9
     900:	2000047c 	.word	0x2000047c
     904:	20000528 	.word	0x20000528
     908:	20000480 	.word	0x20000480
     90c:	42002800 	.word	0x42002800
     910:	00003ad5 	.word	0x00003ad5
     914:	000006f2 	.word	0x000006f2
     918:	00003ef1 	.word	0x00003ef1
     91c:	00000379 	.word	0x00000379
     920:	00003ee1 	.word	0x00003ee1
     924:	00000659 	.word	0x00000659
     928:	00003f01 	.word	0x00003f01
     92c:	00003f19 	.word	0x00003f19

00000930 <app_buzzer_alarm_stop>:

void app_buzzer_alarm_stop(void)
{
     930:	b510      	push	{r4, lr}
    buzzerPatternIdx = BUZ_PAT_NONE;
     932:	2200      	movs	r2, #0
     934:	4b0a      	ldr	r3, [pc, #40]	; (960 <app_buzzer_alarm_stop+0x30>)
     936:	701a      	strb	r2, [r3, #0]
	Tcc *const tcc_module = module_inst->hw;
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <app_buzzer_alarm_stop+0x34>)
     93a:	681a      	ldr	r2, [r3, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     93c:	2102      	movs	r1, #2
     93e:	6893      	ldr	r3, [r2, #8]
     940:	4219      	tst	r1, r3
     942:	d1fc      	bne.n	93e <app_buzzer_alarm_stop+0xe>
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     944:	4b08      	ldr	r3, [pc, #32]	; (968 <app_buzzer_alarm_stop+0x38>)
     946:	6253      	str	r3, [r2, #36]	; 0x24
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     948:	62d3      	str	r3, [r2, #44]	; 0x2c
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     94a:	6813      	ldr	r3, [r2, #0]
     94c:	2102      	movs	r1, #2
     94e:	438b      	bics	r3, r1
     950:	6013      	str	r3, [r2, #0]

    tcc_disable(&tcc_instance_buzzer);
    tcc_disable_callback(&tcc_instance_buzzer, (TCC_CALLBACK_CHANNEL_0 + BUZZER_CHANNEL));
     952:	3106      	adds	r1, #6
     954:	4803      	ldr	r0, [pc, #12]	; (964 <app_buzzer_alarm_stop+0x34>)
     956:	4b05      	ldr	r3, [pc, #20]	; (96c <app_buzzer_alarm_stop+0x3c>)
     958:	4798      	blx	r3
    app_buzzer_disable();
     95a:	4b05      	ldr	r3, [pc, #20]	; (970 <app_buzzer_alarm_stop+0x40>)
     95c:	4798      	blx	r3
}
     95e:	bd10      	pop	{r4, pc}
     960:	2000047c 	.word	0x2000047c
     964:	20000528 	.word	0x20000528
     968:	000ffc0f 	.word	0x000ffc0f
     96c:	00003f59 	.word	0x00003f59
     970:	000005c9 	.word	0x000005c9

00000974 <app_buzzer_pattern_playing>:

enum app_buzzer_pattern_t app_buzzer_pattern_playing(void)
{
    return buzzerPatternIdx;
     974:	4b01      	ldr	r3, [pc, #4]	; (97c <app_buzzer_pattern_playing+0x8>)
     976:	7818      	ldrb	r0, [r3, #0]
}
     978:	4770      	bx	lr
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	2000047c 	.word	0x2000047c

00000980 <app_buzzer_stop_pattern>:

void app_buzzer_stop_pattern(enum app_buzzer_pattern_t pattern)
{
     980:	b510      	push	{r4, lr}
    if (buzzerPatternIdx == pattern)
     982:	4b0f      	ldr	r3, [pc, #60]	; (9c0 <app_buzzer_stop_pattern+0x40>)
     984:	781b      	ldrb	r3, [r3, #0]
     986:	4283      	cmp	r3, r0
     988:	d000      	beq.n	98c <app_buzzer_stop_pattern+0xc>

        SYS_TimerStop(&app_buzzer_alarm_note_timer);

        buzzerState = BUZ_STATE_END;
    }
}
     98a:	bd10      	pop	{r4, pc}
        buzzerPatternIdx = BUZ_PAT_NONE;
     98c:	2200      	movs	r2, #0
     98e:	4b0c      	ldr	r3, [pc, #48]	; (9c0 <app_buzzer_stop_pattern+0x40>)
     990:	701a      	strb	r2, [r3, #0]
	Tcc *const tcc_module = module_inst->hw;
     992:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <app_buzzer_stop_pattern+0x44>)
     994:	681a      	ldr	r2, [r3, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     996:	2102      	movs	r1, #2
     998:	6893      	ldr	r3, [r2, #8]
     99a:	4219      	tst	r1, r3
     99c:	d1fc      	bne.n	998 <app_buzzer_stop_pattern+0x18>
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     99e:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <app_buzzer_stop_pattern+0x48>)
     9a0:	6253      	str	r3, [r2, #36]	; 0x24
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     9a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     9a4:	6813      	ldr	r3, [r2, #0]
     9a6:	2102      	movs	r1, #2
     9a8:	438b      	bics	r3, r1
     9aa:	6013      	str	r3, [r2, #0]
     9ac:	2201      	movs	r2, #1
     9ae:	4b07      	ldr	r3, [pc, #28]	; (9cc <app_buzzer_stop_pattern+0x4c>)
     9b0:	615a      	str	r2, [r3, #20]
        SYS_TimerStop(&app_buzzer_alarm_note_timer);
     9b2:	4807      	ldr	r0, [pc, #28]	; (9d0 <app_buzzer_stop_pattern+0x50>)
     9b4:	4b07      	ldr	r3, [pc, #28]	; (9d4 <app_buzzer_stop_pattern+0x54>)
     9b6:	4798      	blx	r3
        buzzerState = BUZ_STATE_END;
     9b8:	2203      	movs	r2, #3
     9ba:	4b07      	ldr	r3, [pc, #28]	; (9d8 <app_buzzer_stop_pattern+0x58>)
     9bc:	701a      	strb	r2, [r3, #0]
}
     9be:	e7e4      	b.n	98a <app_buzzer_stop_pattern+0xa>
     9c0:	2000047c 	.word	0x2000047c
     9c4:	20000528 	.word	0x20000528
     9c8:	000ffc0f 	.word	0x000ffc0f
     9cc:	41004400 	.word	0x41004400
     9d0:	20000468 	.word	0x20000468
     9d4:	000030c9 	.word	0x000030c9
     9d8:	2000047d 	.word	0x2000047d

000009dc <daisyChainCountdownTimerHandler>:
    app_arm_set_daisyChainTamper_armed(SYSTEM_ARMED);  
}


static void daisyChainCountdownTimerHandler(SYS_Timer_t *timer)
{
     9dc:	b510      	push	{r4, lr}
    UNUSED(timer);
    
     if(AM_IS_MASTER == alarmModuleStatus.isMaster)
     9de:	4b0b      	ldr	r3, [pc, #44]	; (a0c <daisyChainCountdownTimerHandler+0x30>)
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	07db      	lsls	r3, r3, #31
     9e4:	d503      	bpl.n	9ee <daisyChainCountdownTimerHandler+0x12>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     9e6:	2220      	movs	r2, #32
     9e8:	4b09      	ldr	r3, [pc, #36]	; (a10 <daisyChainCountdownTimerHandler+0x34>)
     9ea:	61da      	str	r2, [r3, #28]
        {
            app_arm_alarmEvent(DAISY_CHAIN_TAMPER_ALARM);
            app_arm_set_daisyChainTamper_armed(SYSTEM_DISARMED); 
        }
     }         
}
     9ec:	bd10      	pop	{r4, pc}
        if( app_gen_io_is_any_port_armed() && ( SYSTEM_ARMED == app_arm_get_daisyChainTamper_armed() ) )
     9ee:	4b09      	ldr	r3, [pc, #36]	; (a14 <daisyChainCountdownTimerHandler+0x38>)
     9f0:	4798      	blx	r3
     9f2:	2800      	cmp	r0, #0
     9f4:	d0fa      	beq.n	9ec <daisyChainCountdownTimerHandler+0x10>
     9f6:	4b08      	ldr	r3, [pc, #32]	; (a18 <daisyChainCountdownTimerHandler+0x3c>)
     9f8:	4798      	blx	r3
     9fa:	2800      	cmp	r0, #0
     9fc:	d0f6      	beq.n	9ec <daisyChainCountdownTimerHandler+0x10>
            app_arm_alarmEvent(DAISY_CHAIN_TAMPER_ALARM);
     9fe:	200d      	movs	r0, #13
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <daisyChainCountdownTimerHandler+0x40>)
     a02:	4798      	blx	r3
            app_arm_set_daisyChainTamper_armed(SYSTEM_DISARMED); 
     a04:	2000      	movs	r0, #0
     a06:	4b06      	ldr	r3, [pc, #24]	; (a20 <daisyChainCountdownTimerHandler+0x44>)
     a08:	4798      	blx	r3
}
     a0a:	e7ef      	b.n	9ec <daisyChainCountdownTimerHandler+0x10>
     a0c:	20000ad0 	.word	0x20000ad0
     a10:	41004400 	.word	0x41004400
     a14:	00001815 	.word	0x00001815
     a18:	000002d1 	.word	0x000002d1
     a1c:	000004a1 	.word	0x000004a1
     a20:	000002ad 	.word	0x000002ad

00000a24 <daisyChainDebounceTimerHandler>:
{
     a24:	b510      	push	{r4, lr}
    app_arm_set_daisyChainTamper_armed(SYSTEM_ARMED);  
     a26:	2001      	movs	r0, #1
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <daisyChainDebounceTimerHandler+0xc>)
     a2a:	4798      	blx	r3
}
     a2c:	bd10      	pop	{r4, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	000002ad 	.word	0x000002ad

00000a34 <extint_callback_debounce_daisyChain>:
{
     a34:	b510      	push	{r4, lr}
    SYS_TimerRestart(&daisyChainDebounceTimer);
     a36:	4802      	ldr	r0, [pc, #8]	; (a40 <extint_callback_debounce_daisyChain+0xc>)
     a38:	4b02      	ldr	r3, [pc, #8]	; (a44 <extint_callback_debounce_daisyChain+0x10>)
     a3a:	4798      	blx	r3
}
     a3c:	bd10      	pop	{r4, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	2000057c 	.word	0x2000057c
     a44:	00003189 	.word	0x00003189

00000a48 <app_daisychain_init>:
{
     a48:	b530      	push	{r4, r5, lr}
     a4a:	b085      	sub	sp, #20
     alarmModuleStatus.sAlarmModule = app_gen_io_get_AM_status(); 
     a4c:	4b24      	ldr	r3, [pc, #144]	; (ae0 <app_daisychain_init+0x98>)
     a4e:	4798      	blx	r3
     a50:	4a24      	ldr	r2, [pc, #144]	; (ae4 <app_daisychain_init+0x9c>)
     a52:	23ff      	movs	r3, #255	; 0xff
     a54:	4003      	ands	r3, r0
     a56:	7013      	strb	r3, [r2, #0]
     a58:	0a00      	lsrs	r0, r0, #8
     a5a:	7050      	strb	r0, [r2, #1]
     if(AM_IS_MASTER == alarmModuleStatus.isMaster)
     a5c:	07db      	lsls	r3, r3, #31
     a5e:	d42d      	bmi.n	abc <app_daisychain_init+0x74>
     {daisyChainCountdownTimer.interval = DAISY_CHAIN_PULSE_TIME;            // delay
     a60:	4d21      	ldr	r5, [pc, #132]	; (ae8 <app_daisychain_init+0xa0>)
     a62:	23fa      	movs	r3, #250	; 0xfa
     a64:	005b      	lsls	r3, r3, #1
     a66:	60ab      	str	r3, [r5, #8]
        extint_chan_get_config_defaults(&config_extint_chan);
     a68:	ac01      	add	r4, sp, #4
     a6a:	0020      	movs	r0, r4
     a6c:	4b1f      	ldr	r3, [pc, #124]	; (aec <app_daisychain_init+0xa4>)
     a6e:	4798      	blx	r3
        daisyChainDebounceTimer.interval = STANDARD_DEBOUNCE_INTERVAL_MS;        // delay
     a70:	4b1f      	ldr	r3, [pc, #124]	; (af0 <app_daisychain_init+0xa8>)
     a72:	22fa      	movs	r2, #250	; 0xfa
     a74:	609a      	str	r2, [r3, #8]
        daisyChainDebounceTimer.mode     = SYS_TIMER_INTERVAL_MODE;
     a76:	2200      	movs	r2, #0
     a78:	731a      	strb	r2, [r3, #12]
        daisyChainDebounceTimer.handler  = daisyChainDebounceTimerHandler;
     a7a:	491e      	ldr	r1, [pc, #120]	; (af4 <app_daisychain_init+0xac>)
     a7c:	6119      	str	r1, [r3, #16]
        config_extint_chan.gpio_pin           = ARM_PIN;
     a7e:	2305      	movs	r3, #5
     a80:	9301      	str	r3, [sp, #4]
        config_extint_chan.gpio_pin_mux       = ARM_EIC_MUX;
     a82:	6062      	str	r2, [r4, #4]
        config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;  // <<<===
     a84:	3b04      	subs	r3, #4
     a86:	7223      	strb	r3, [r4, #8]
        config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     a88:	3302      	adds	r3, #2
     a8a:	72e3      	strb	r3, [r4, #11]
        extint_chan_set_config(ARM_EIC_LINE, &config_extint_chan);
     a8c:	0021      	movs	r1, r4
     a8e:	2005      	movs	r0, #5
     a90:	4b19      	ldr	r3, [pc, #100]	; (af8 <app_daisychain_init+0xb0>)
     a92:	4798      	blx	r3
        extint_register_callback(extint_callback_debounce_daisyChain, ARM_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     a94:	2200      	movs	r2, #0
     a96:	2105      	movs	r1, #5
     a98:	4818      	ldr	r0, [pc, #96]	; (afc <app_daisychain_init+0xb4>)
     a9a:	4b19      	ldr	r3, [pc, #100]	; (b00 <app_daisychain_init+0xb8>)
     a9c:	4798      	blx	r3
        extint_chan_enable_callback(ARM_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     a9e:	2100      	movs	r1, #0
     aa0:	2005      	movs	r0, #5
     aa2:	4b18      	ldr	r3, [pc, #96]	; (b04 <app_daisychain_init+0xbc>)
     aa4:	4798      	blx	r3
        daisyChainCountdownTimer.interval = DAISY_CHAIN_ALARM_TIME;             // delay
     aa6:	4b18      	ldr	r3, [pc, #96]	; (b08 <app_daisychain_init+0xc0>)
     aa8:	60ab      	str	r3, [r5, #8]
      daisyChainCountdownTimer.mode     = SYS_TIMER_PERIODIC_MODE;
     aaa:	480f      	ldr	r0, [pc, #60]	; (ae8 <app_daisychain_init+0xa0>)
     aac:	2301      	movs	r3, #1
     aae:	7303      	strb	r3, [r0, #12]
      daisyChainCountdownTimer.handler  = daisyChainCountdownTimerHandler;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <app_daisychain_init+0xc4>)
     ab2:	6103      	str	r3, [r0, #16]
      SYS_TimerStart(&daisyChainCountdownTimer);
     ab4:	4b16      	ldr	r3, [pc, #88]	; (b10 <app_daisychain_init+0xc8>)
     ab6:	4798      	blx	r3
}
     ab8:	b005      	add	sp, #20
     aba:	bd30      	pop	{r4, r5, pc}
	config->input_pull = PORT_PIN_PULL_UP;
     abc:	a901      	add	r1, sp, #4
     abe:	2301      	movs	r3, #1
     ac0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     ac2:	2200      	movs	r2, #0
     ac4:	708a      	strb	r2, [r1, #2]
         pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     ac6:	700b      	strb	r3, [r1, #0]
         port_pin_set_config(ARM_PIN, &pin_conf);
     ac8:	2005      	movs	r0, #5
     aca:	4b12      	ldr	r3, [pc, #72]	; (b14 <app_daisychain_init+0xcc>)
     acc:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     ace:	2220      	movs	r2, #32
     ad0:	4b11      	ldr	r3, [pc, #68]	; (b18 <app_daisychain_init+0xd0>)
     ad2:	615a      	str	r2, [r3, #20]
         daisyChainCountdownTimer.interval = DAISY_CHAIN_PULSE_TIME;            // delay
     ad4:	32d5      	adds	r2, #213	; 0xd5
     ad6:	32ff      	adds	r2, #255	; 0xff
     ad8:	4b03      	ldr	r3, [pc, #12]	; (ae8 <app_daisychain_init+0xa0>)
     ada:	609a      	str	r2, [r3, #8]
     adc:	e7e5      	b.n	aaa <app_daisychain_init+0x62>
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	00001719 	.word	0x00001719
     ae4:	20000ad0 	.word	0x20000ad0
     ae8:	20000568 	.word	0x20000568
     aec:	000024b5 	.word	0x000024b5
     af0:	2000057c 	.word	0x2000057c
     af4:	00000a25 	.word	0x00000a25
     af8:	000024c9 	.word	0x000024c9
     afc:	00000a35 	.word	0x00000a35
     b00:	00002541 	.word	0x00002541
     b04:	0000256d 	.word	0x0000256d
     b08:	00000bb8 	.word	0x00000bb8
     b0c:	000009dd 	.word	0x000009dd
     b10:	00003159 	.word	0x00003159
     b14:	00004bc5 	.word	0x00004bc5
     b18:	41004400 	.word	0x41004400

00000b1c <app_eeprom_read_connect_wanted>:
        eeprom_emulator_commit_page_buffer();
    }
}

uint8_t app_eeprom_read_connect_wanted(void)
{
     b1c:	b510      	push	{r4, lr}
     b1e:	b090      	sub	sp, #64	; 0x40
    uint8_t page_data[EEPROM_PAGE_SIZE];
    eeprom_emulator_read_page(EEPROM_PAGE_GENERAL, page_data);
     b20:	ac01      	add	r4, sp, #4
     b22:	0021      	movs	r1, r4
     b24:	2000      	movs	r0, #0
     b26:	4b05      	ldr	r3, [pc, #20]	; (b3c <app_eeprom_read_connect_wanted+0x20>)
     b28:	4798      	blx	r3

    uint8_t currentConnectWanted = page_data[EEPROM_INDEX_CONNECT_WANTED];
     b2a:	7fe3      	ldrb	r3, [r4, #31]
 //       app_rfid_state_set_mode(APP_EEPROM_MODEL_TYPE_FACTORY);
        currentConnectWanted = APP_EEPROM_MODEL_TYPE_FACTORY;
    }

    // return(APP_EEPROM_MODEL_TYPE_NON_CONNECTED != currentConnectWanted);
    return currentConnectWanted;
     b2c:	1c18      	adds	r0, r3, #0
     b2e:	2b02      	cmp	r3, #2
     b30:	d900      	bls.n	b34 <app_eeprom_read_connect_wanted+0x18>
     b32:	2002      	movs	r0, #2
     b34:	b2c0      	uxtb	r0, r0
}
     b36:	b010      	add	sp, #64	; 0x40
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00004c0d 	.word	0x00004c0d

00000b40 <shelfStorageConditionTimerHandler>:
     b40:	2202      	movs	r2, #2
     b42:	4b01      	ldr	r3, [pc, #4]	; (b48 <shelfStorageConditionTimerHandler+0x8>)
     b44:	615a      	str	r2, [r3, #20]
    UNUSED(timer);
    #ifdef ENABLE_GENIO_DEBUG_MSGS
    UART_DBG_TX("Set Kill to LOW\n");
    #endif
    port_pin_set_output_level(BATT_DEADMAN_SW_PIN, BATT_DEADMAN_POWER_DOWN);
}
     b46:	4770      	bx	lr
     b48:	41004400 	.word	0x41004400

00000b4c <debounce_nMASTERTimerHandler>:
    //app_led_update();
}


static void debounce_nMASTERTimerHandler(SYS_Timer_t *timer)
{
     b4c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
     b4e:	4b04      	ldr	r3, [pc, #16]	; (b60 <debounce_nMASTERTimerHandler+0x14>)
     b50:	6a1b      	ldr	r3, [r3, #32]
    UNUSED(timer);
    
    // To get here we are the Master AM have seen a loss of power and waited 2 debounce time units
   if( port_pin_get_input_level(nMASTER_PIN) )
     b52:	05db      	lsls	r3, r3, #23
     b54:	d400      	bmi.n	b58 <debounce_nMASTERTimerHandler+0xc>
   {
       app_arm_alarmEvent(POWER_TAMPER_nMASTER_ALARM);  // Alarm for 5 minutes, unless power is restored
   } 
}
     b56:	bd10      	pop	{r4, pc}
       app_arm_alarmEvent(POWER_TAMPER_nMASTER_ALARM);  // Alarm for 5 minutes, unless power is restored
     b58:	200c      	movs	r0, #12
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <debounce_nMASTERTimerHandler+0x18>)
     b5c:	4798      	blx	r3
}
     b5e:	e7fa      	b.n	b56 <debounce_nMASTERTimerHandler+0xa>
     b60:	41004400 	.word	0x41004400
     b64:	000004a1 	.word	0x000004a1

00000b68 <debounceCh_11_SwitchTimerHandler>:
    }
}


static void debounceCh_11_SwitchTimerHandler(SYS_Timer_t *timer)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	4b15      	ldr	r3, [pc, #84]	; (bc0 <debounceCh_11_SwitchTimerHandler+0x58>)
     b6c:	6a1b      	ldr	r3, [r3, #32]
    UNUSED(timer);
    
    if (port_pin_get_input_level(CHANNEL_11_PIN))
     b6e:	075b      	lsls	r3, r3, #29
     b70:	d519      	bpl.n	ba6 <debounceCh_11_SwitchTimerHandler+0x3e>
    {
        // Primary Switch - High = Open
        Channel[CH_11].portStat.cablePresent = CABLE_ABSENT;
     b72:	4d14      	ldr	r5, [pc, #80]	; (bc4 <debounceCh_11_SwitchTimerHandler+0x5c>)
     b74:	2483      	movs	r4, #131	; 0x83
     b76:	0064      	lsls	r4, r4, #1
     b78:	5b2b      	ldrh	r3, [r5, r4]
     b7a:	2201      	movs	r2, #1
     b7c:	4393      	bics	r3, r2
     b7e:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 11 SWITCH OPENED\n");
     b80:	4811      	ldr	r0, [pc, #68]	; (bc8 <debounceCh_11_SwitchTimerHandler+0x60>)
     b82:	4b12      	ldr	r3, [pc, #72]	; (bcc <debounceCh_11_SwitchTimerHandler+0x64>)
     b84:	4798      	blx	r3
        
        if ( (PORT_ARMED == Channel[CH_11].portStat.armed) &&\
     b86:	5b2b      	ldrh	r3, [r5, r4]
     b88:	079b      	lsls	r3, r3, #30
     b8a:	d518      	bpl.n	bbe <debounceCh_11_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_11].portStat.alarming) )
     b8c:	4a0d      	ldr	r2, [pc, #52]	; (bc4 <debounceCh_11_SwitchTimerHandler+0x5c>)
     b8e:	5b13      	ldrh	r3, [r2, r4]
        if ( (PORT_ARMED == Channel[CH_11].portStat.armed) &&\
     b90:	075b      	lsls	r3, r3, #29
     b92:	d414      	bmi.n	bbe <debounceCh_11_SwitchTimerHandler+0x56>
        {
            // Switch was closed but has opened
            app_arm_alarmEvent(CHANNEL_11_SWITCH_WAS_OPENED);
     b94:	200b      	movs	r0, #11
     b96:	4b0e      	ldr	r3, [pc, #56]	; (bd0 <debounceCh_11_SwitchTimerHandler+0x68>)
     b98:	4798      	blx	r3
            Channel[CH_11].portStat.alarming = PORT_ALARMING; 
     b9a:	490a      	ldr	r1, [pc, #40]	; (bc4 <debounceCh_11_SwitchTimerHandler+0x5c>)
     b9c:	5b0b      	ldrh	r3, [r1, r4]
     b9e:	2004      	movs	r0, #4
     ba0:	4303      	orrs	r3, r0
     ba2:	530b      	strh	r3, [r1, r4]
     ba4:	e00b      	b.n	bbe <debounceCh_11_SwitchTimerHandler+0x56>
    }
    else
    {
        // Primary Switch - Low = Closed
        // Cable Switch was open or absent, but has closed
        Channel[CH_11].portStat.cablePresent = CABLE_PRESENT;
     ba6:	4907      	ldr	r1, [pc, #28]	; (bc4 <debounceCh_11_SwitchTimerHandler+0x5c>)
     ba8:	2283      	movs	r2, #131	; 0x83
     baa:	0052      	lsls	r2, r2, #1
     bac:	5a8b      	ldrh	r3, [r1, r2]
     bae:	2001      	movs	r0, #1
     bb0:	4303      	orrs	r3, r0
     bb2:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 11 SWITCH CLOSED\n");
     bb4:	4807      	ldr	r0, [pc, #28]	; (bd4 <debounceCh_11_SwitchTimerHandler+0x6c>)
     bb6:	4b05      	ldr	r3, [pc, #20]	; (bcc <debounceCh_11_SwitchTimerHandler+0x64>)
     bb8:	4798      	blx	r3
        
        app_arm_reset_auto_arm_timer();     
     bba:	4b07      	ldr	r3, [pc, #28]	; (bd8 <debounceCh_11_SwitchTimerHandler+0x70>)
     bbc:	4798      	blx	r3
    }
}
     bbe:	bd70      	pop	{r4, r5, r6, pc}
     bc0:	41004400 	.word	0x41004400
     bc4:	20000004 	.word	0x20000004
     bc8:	000075d4 	.word	0x000075d4
     bcc:	00001ff5 	.word	0x00001ff5
     bd0:	000004a1 	.word	0x000004a1
     bd4:	000075f0 	.word	0x000075f0
     bd8:	0000014d 	.word	0x0000014d

00000bdc <debounceCh_10_SwitchTimerHandler>:
{
     bdc:	b570      	push	{r4, r5, r6, lr}
     bde:	4b15      	ldr	r3, [pc, #84]	; (c34 <debounceCh_10_SwitchTimerHandler+0x58>)
     be0:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_10_PIN))
     be2:	071b      	lsls	r3, r3, #28
     be4:	d51a      	bpl.n	c1c <debounceCh_10_SwitchTimerHandler+0x40>
        Channel[CH_10].portStat.cablePresent = CABLE_ABSENT;
     be6:	4d14      	ldr	r5, [pc, #80]	; (c38 <debounceCh_10_SwitchTimerHandler+0x5c>)
     be8:	24f0      	movs	r4, #240	; 0xf0
     bea:	5b2b      	ldrh	r3, [r5, r4]
     bec:	2201      	movs	r2, #1
     bee:	4393      	bics	r3, r2
     bf0:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 10 SWITCH OPENED\n");
     bf2:	4812      	ldr	r0, [pc, #72]	; (c3c <debounceCh_10_SwitchTimerHandler+0x60>)
     bf4:	4b12      	ldr	r3, [pc, #72]	; (c40 <debounceCh_10_SwitchTimerHandler+0x64>)
     bf6:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_10].portStat.armed) &&\
     bf8:	5b2b      	ldrh	r3, [r5, r4]
     bfa:	079b      	lsls	r3, r3, #30
     bfc:	d519      	bpl.n	c32 <debounceCh_10_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_10].portStat.alarming) )
     bfe:	23f0      	movs	r3, #240	; 0xf0
     c00:	4a0d      	ldr	r2, [pc, #52]	; (c38 <debounceCh_10_SwitchTimerHandler+0x5c>)
     c02:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_10].portStat.armed) &&\
     c04:	075b      	lsls	r3, r3, #29
     c06:	d414      	bmi.n	c32 <debounceCh_10_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_10_SWITCH_WAS_OPENED);
     c08:	200a      	movs	r0, #10
     c0a:	4b0e      	ldr	r3, [pc, #56]	; (c44 <debounceCh_10_SwitchTimerHandler+0x68>)
     c0c:	4798      	blx	r3
            Channel[CH_10].portStat.alarming = PORT_ALARMING; 
     c0e:	490a      	ldr	r1, [pc, #40]	; (c38 <debounceCh_10_SwitchTimerHandler+0x5c>)
     c10:	22f0      	movs	r2, #240	; 0xf0
     c12:	5a8b      	ldrh	r3, [r1, r2]
     c14:	2004      	movs	r0, #4
     c16:	4303      	orrs	r3, r0
     c18:	528b      	strh	r3, [r1, r2]
     c1a:	e00a      	b.n	c32 <debounceCh_10_SwitchTimerHandler+0x56>
        Channel[CH_10].portStat.cablePresent = CABLE_PRESENT;
     c1c:	4906      	ldr	r1, [pc, #24]	; (c38 <debounceCh_10_SwitchTimerHandler+0x5c>)
     c1e:	22f0      	movs	r2, #240	; 0xf0
     c20:	5a8b      	ldrh	r3, [r1, r2]
     c22:	2001      	movs	r0, #1
     c24:	4303      	orrs	r3, r0
     c26:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 10 SWITCH CLOSED\n");
     c28:	4807      	ldr	r0, [pc, #28]	; (c48 <debounceCh_10_SwitchTimerHandler+0x6c>)
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <debounceCh_10_SwitchTimerHandler+0x64>)
     c2c:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     c2e:	4b07      	ldr	r3, [pc, #28]	; (c4c <debounceCh_10_SwitchTimerHandler+0x70>)
     c30:	4798      	blx	r3
}
     c32:	bd70      	pop	{r4, r5, r6, pc}
     c34:	41004400 	.word	0x41004400
     c38:	20000004 	.word	0x20000004
     c3c:	0000759c 	.word	0x0000759c
     c40:	00001ff5 	.word	0x00001ff5
     c44:	000004a1 	.word	0x000004a1
     c48:	000075b8 	.word	0x000075b8
     c4c:	0000014d 	.word	0x0000014d

00000c50 <debounceCh_09_SwitchTimerHandler>:
{
     c50:	b570      	push	{r4, r5, r6, lr}
     c52:	4b15      	ldr	r3, [pc, #84]	; (ca8 <debounceCh_09_SwitchTimerHandler+0x58>)
     c54:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_9_PIN))
     c56:	06db      	lsls	r3, r3, #27
     c58:	d51a      	bpl.n	c90 <debounceCh_09_SwitchTimerHandler+0x40>
        Channel[CH_09].portStat.cablePresent = CABLE_ABSENT;
     c5a:	4d14      	ldr	r5, [pc, #80]	; (cac <debounceCh_09_SwitchTimerHandler+0x5c>)
     c5c:	24da      	movs	r4, #218	; 0xda
     c5e:	5b2b      	ldrh	r3, [r5, r4]
     c60:	2201      	movs	r2, #1
     c62:	4393      	bics	r3, r2
     c64:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 9 SWITCH OPENED\n");
     c66:	4812      	ldr	r0, [pc, #72]	; (cb0 <debounceCh_09_SwitchTimerHandler+0x60>)
     c68:	4b12      	ldr	r3, [pc, #72]	; (cb4 <debounceCh_09_SwitchTimerHandler+0x64>)
     c6a:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_09].portStat.armed) &&\
     c6c:	5b2b      	ldrh	r3, [r5, r4]
     c6e:	079b      	lsls	r3, r3, #30
     c70:	d519      	bpl.n	ca6 <debounceCh_09_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_09].portStat.alarming) )
     c72:	23da      	movs	r3, #218	; 0xda
     c74:	4a0d      	ldr	r2, [pc, #52]	; (cac <debounceCh_09_SwitchTimerHandler+0x5c>)
     c76:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_09].portStat.armed) &&\
     c78:	075b      	lsls	r3, r3, #29
     c7a:	d414      	bmi.n	ca6 <debounceCh_09_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_9_SWITCH_WAS_OPENED);
     c7c:	2009      	movs	r0, #9
     c7e:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <debounceCh_09_SwitchTimerHandler+0x68>)
     c80:	4798      	blx	r3
            Channel[CH_09].portStat.alarming = PORT_ALARMING; 
     c82:	490a      	ldr	r1, [pc, #40]	; (cac <debounceCh_09_SwitchTimerHandler+0x5c>)
     c84:	22da      	movs	r2, #218	; 0xda
     c86:	5a8b      	ldrh	r3, [r1, r2]
     c88:	2004      	movs	r0, #4
     c8a:	4303      	orrs	r3, r0
     c8c:	528b      	strh	r3, [r1, r2]
     c8e:	e00a      	b.n	ca6 <debounceCh_09_SwitchTimerHandler+0x56>
        Channel[CH_09].portStat.cablePresent = CABLE_PRESENT;
     c90:	4906      	ldr	r1, [pc, #24]	; (cac <debounceCh_09_SwitchTimerHandler+0x5c>)
     c92:	22da      	movs	r2, #218	; 0xda
     c94:	5a8b      	ldrh	r3, [r1, r2]
     c96:	2001      	movs	r0, #1
     c98:	4303      	orrs	r3, r0
     c9a:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 9 SWITCH CLOSED\n");
     c9c:	4807      	ldr	r0, [pc, #28]	; (cbc <debounceCh_09_SwitchTimerHandler+0x6c>)
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <debounceCh_09_SwitchTimerHandler+0x64>)
     ca0:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     ca2:	4b07      	ldr	r3, [pc, #28]	; (cc0 <debounceCh_09_SwitchTimerHandler+0x70>)
     ca4:	4798      	blx	r3
}
     ca6:	bd70      	pop	{r4, r5, r6, pc}
     ca8:	41004400 	.word	0x41004400
     cac:	20000004 	.word	0x20000004
     cb0:	00007564 	.word	0x00007564
     cb4:	00001ff5 	.word	0x00001ff5
     cb8:	000004a1 	.word	0x000004a1
     cbc:	00007580 	.word	0x00007580
     cc0:	0000014d 	.word	0x0000014d

00000cc4 <debounceCh_08_SwitchTimerHandler>:
{
     cc4:	b570      	push	{r4, r5, r6, lr}
     cc6:	4b15      	ldr	r3, [pc, #84]	; (d1c <debounceCh_08_SwitchTimerHandler+0x58>)
     cc8:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_8_PIN))
     cca:	045b      	lsls	r3, r3, #17
     ccc:	d51a      	bpl.n	d04 <debounceCh_08_SwitchTimerHandler+0x40>
        Channel[CH_08].portStat.cablePresent = CABLE_ABSENT;
     cce:	4d14      	ldr	r5, [pc, #80]	; (d20 <debounceCh_08_SwitchTimerHandler+0x5c>)
     cd0:	24c4      	movs	r4, #196	; 0xc4
     cd2:	5b2b      	ldrh	r3, [r5, r4]
     cd4:	2201      	movs	r2, #1
     cd6:	4393      	bics	r3, r2
     cd8:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 8 SWITCH OPENED\n");
     cda:	4812      	ldr	r0, [pc, #72]	; (d24 <debounceCh_08_SwitchTimerHandler+0x60>)
     cdc:	4b12      	ldr	r3, [pc, #72]	; (d28 <debounceCh_08_SwitchTimerHandler+0x64>)
     cde:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_08].portStat.armed) &&\
     ce0:	5b2b      	ldrh	r3, [r5, r4]
     ce2:	079b      	lsls	r3, r3, #30
     ce4:	d519      	bpl.n	d1a <debounceCh_08_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_08].portStat.alarming) )
     ce6:	23c4      	movs	r3, #196	; 0xc4
     ce8:	4a0d      	ldr	r2, [pc, #52]	; (d20 <debounceCh_08_SwitchTimerHandler+0x5c>)
     cea:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_08].portStat.armed) &&\
     cec:	075b      	lsls	r3, r3, #29
     cee:	d414      	bmi.n	d1a <debounceCh_08_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_8_SWITCH_WAS_OPENED);
     cf0:	2008      	movs	r0, #8
     cf2:	4b0e      	ldr	r3, [pc, #56]	; (d2c <debounceCh_08_SwitchTimerHandler+0x68>)
     cf4:	4798      	blx	r3
            Channel[CH_08].portStat.alarming = PORT_ALARMING; 
     cf6:	490a      	ldr	r1, [pc, #40]	; (d20 <debounceCh_08_SwitchTimerHandler+0x5c>)
     cf8:	22c4      	movs	r2, #196	; 0xc4
     cfa:	5a8b      	ldrh	r3, [r1, r2]
     cfc:	2004      	movs	r0, #4
     cfe:	4303      	orrs	r3, r0
     d00:	528b      	strh	r3, [r1, r2]
     d02:	e00a      	b.n	d1a <debounceCh_08_SwitchTimerHandler+0x56>
        Channel[CH_08].portStat.cablePresent = CABLE_PRESENT;
     d04:	4906      	ldr	r1, [pc, #24]	; (d20 <debounceCh_08_SwitchTimerHandler+0x5c>)
     d06:	22c4      	movs	r2, #196	; 0xc4
     d08:	5a8b      	ldrh	r3, [r1, r2]
     d0a:	2001      	movs	r0, #1
     d0c:	4303      	orrs	r3, r0
     d0e:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 8 SWITCH CLOSED\n");
     d10:	4807      	ldr	r0, [pc, #28]	; (d30 <debounceCh_08_SwitchTimerHandler+0x6c>)
     d12:	4b05      	ldr	r3, [pc, #20]	; (d28 <debounceCh_08_SwitchTimerHandler+0x64>)
     d14:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     d16:	4b07      	ldr	r3, [pc, #28]	; (d34 <debounceCh_08_SwitchTimerHandler+0x70>)
     d18:	4798      	blx	r3
}
     d1a:	bd70      	pop	{r4, r5, r6, pc}
     d1c:	41004400 	.word	0x41004400
     d20:	20000004 	.word	0x20000004
     d24:	0000752c 	.word	0x0000752c
     d28:	00001ff5 	.word	0x00001ff5
     d2c:	000004a1 	.word	0x000004a1
     d30:	00007548 	.word	0x00007548
     d34:	0000014d 	.word	0x0000014d

00000d38 <debounceCh_07_SwitchTimerHandler>:
{
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	4b15      	ldr	r3, [pc, #84]	; (d90 <debounceCh_07_SwitchTimerHandler+0x58>)
     d3c:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_7_PIN))
     d3e:	03db      	lsls	r3, r3, #15
     d40:	d51a      	bpl.n	d78 <debounceCh_07_SwitchTimerHandler+0x40>
        Channel[CH_07].portStat.cablePresent = CABLE_ABSENT;
     d42:	4d14      	ldr	r5, [pc, #80]	; (d94 <debounceCh_07_SwitchTimerHandler+0x5c>)
     d44:	24ae      	movs	r4, #174	; 0xae
     d46:	5b2b      	ldrh	r3, [r5, r4]
     d48:	2201      	movs	r2, #1
     d4a:	4393      	bics	r3, r2
     d4c:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 7 SWITCH OPENED\n");
     d4e:	4812      	ldr	r0, [pc, #72]	; (d98 <debounceCh_07_SwitchTimerHandler+0x60>)
     d50:	4b12      	ldr	r3, [pc, #72]	; (d9c <debounceCh_07_SwitchTimerHandler+0x64>)
     d52:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_07].portStat.armed) &&\
     d54:	5b2b      	ldrh	r3, [r5, r4]
     d56:	079b      	lsls	r3, r3, #30
     d58:	d519      	bpl.n	d8e <debounceCh_07_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_07].portStat.alarming) )
     d5a:	23ae      	movs	r3, #174	; 0xae
     d5c:	4a0d      	ldr	r2, [pc, #52]	; (d94 <debounceCh_07_SwitchTimerHandler+0x5c>)
     d5e:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_07].portStat.armed) &&\
     d60:	075b      	lsls	r3, r3, #29
     d62:	d414      	bmi.n	d8e <debounceCh_07_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_7_SWITCH_WAS_OPENED);
     d64:	2007      	movs	r0, #7
     d66:	4b0e      	ldr	r3, [pc, #56]	; (da0 <debounceCh_07_SwitchTimerHandler+0x68>)
     d68:	4798      	blx	r3
            Channel[CH_07].portStat.alarming = PORT_ALARMING; 
     d6a:	490a      	ldr	r1, [pc, #40]	; (d94 <debounceCh_07_SwitchTimerHandler+0x5c>)
     d6c:	22ae      	movs	r2, #174	; 0xae
     d6e:	5a8b      	ldrh	r3, [r1, r2]
     d70:	2004      	movs	r0, #4
     d72:	4303      	orrs	r3, r0
     d74:	528b      	strh	r3, [r1, r2]
     d76:	e00a      	b.n	d8e <debounceCh_07_SwitchTimerHandler+0x56>
        Channel[CH_07].portStat.cablePresent = CABLE_PRESENT;
     d78:	4906      	ldr	r1, [pc, #24]	; (d94 <debounceCh_07_SwitchTimerHandler+0x5c>)
     d7a:	22ae      	movs	r2, #174	; 0xae
     d7c:	5a8b      	ldrh	r3, [r1, r2]
     d7e:	2001      	movs	r0, #1
     d80:	4303      	orrs	r3, r0
     d82:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 7 SWITCH CLOSED\n");
     d84:	4807      	ldr	r0, [pc, #28]	; (da4 <debounceCh_07_SwitchTimerHandler+0x6c>)
     d86:	4b05      	ldr	r3, [pc, #20]	; (d9c <debounceCh_07_SwitchTimerHandler+0x64>)
     d88:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     d8a:	4b07      	ldr	r3, [pc, #28]	; (da8 <debounceCh_07_SwitchTimerHandler+0x70>)
     d8c:	4798      	blx	r3
}
     d8e:	bd70      	pop	{r4, r5, r6, pc}
     d90:	41004400 	.word	0x41004400
     d94:	20000004 	.word	0x20000004
     d98:	000074f4 	.word	0x000074f4
     d9c:	00001ff5 	.word	0x00001ff5
     da0:	000004a1 	.word	0x000004a1
     da4:	00007510 	.word	0x00007510
     da8:	0000014d 	.word	0x0000014d

00000dac <debounceCh_06_SwitchTimerHandler>:
{
     dac:	b570      	push	{r4, r5, r6, lr}
     dae:	4b15      	ldr	r3, [pc, #84]	; (e04 <debounceCh_06_SwitchTimerHandler+0x58>)
     db0:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_6_PIN))
     db2:	039b      	lsls	r3, r3, #14
     db4:	d51a      	bpl.n	dec <debounceCh_06_SwitchTimerHandler+0x40>
        Channel[CH_06].portStat.cablePresent = CABLE_ABSENT;
     db6:	4d14      	ldr	r5, [pc, #80]	; (e08 <debounceCh_06_SwitchTimerHandler+0x5c>)
     db8:	2498      	movs	r4, #152	; 0x98
     dba:	5b2b      	ldrh	r3, [r5, r4]
     dbc:	2201      	movs	r2, #1
     dbe:	4393      	bics	r3, r2
     dc0:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 6 SWITCH OPENED\n");
     dc2:	4812      	ldr	r0, [pc, #72]	; (e0c <debounceCh_06_SwitchTimerHandler+0x60>)
     dc4:	4b12      	ldr	r3, [pc, #72]	; (e10 <debounceCh_06_SwitchTimerHandler+0x64>)
     dc6:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_06].portStat.armed) &&\
     dc8:	5b2b      	ldrh	r3, [r5, r4]
     dca:	079b      	lsls	r3, r3, #30
     dcc:	d519      	bpl.n	e02 <debounceCh_06_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_06].portStat.alarming) )
     dce:	2398      	movs	r3, #152	; 0x98
     dd0:	4a0d      	ldr	r2, [pc, #52]	; (e08 <debounceCh_06_SwitchTimerHandler+0x5c>)
     dd2:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_06].portStat.armed) &&\
     dd4:	075b      	lsls	r3, r3, #29
     dd6:	d414      	bmi.n	e02 <debounceCh_06_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_6_SWITCH_WAS_OPENED);
     dd8:	2006      	movs	r0, #6
     dda:	4b0e      	ldr	r3, [pc, #56]	; (e14 <debounceCh_06_SwitchTimerHandler+0x68>)
     ddc:	4798      	blx	r3
            Channel[CH_06].portStat.alarming = PORT_ALARMING; 
     dde:	490a      	ldr	r1, [pc, #40]	; (e08 <debounceCh_06_SwitchTimerHandler+0x5c>)
     de0:	2298      	movs	r2, #152	; 0x98
     de2:	5a8b      	ldrh	r3, [r1, r2]
     de4:	2004      	movs	r0, #4
     de6:	4303      	orrs	r3, r0
     de8:	528b      	strh	r3, [r1, r2]
     dea:	e00a      	b.n	e02 <debounceCh_06_SwitchTimerHandler+0x56>
        Channel[CH_06].portStat.cablePresent = CABLE_PRESENT;
     dec:	4906      	ldr	r1, [pc, #24]	; (e08 <debounceCh_06_SwitchTimerHandler+0x5c>)
     dee:	2298      	movs	r2, #152	; 0x98
     df0:	5a8b      	ldrh	r3, [r1, r2]
     df2:	2001      	movs	r0, #1
     df4:	4303      	orrs	r3, r0
     df6:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 6 SWITCH CLOSED\n");
     df8:	4807      	ldr	r0, [pc, #28]	; (e18 <debounceCh_06_SwitchTimerHandler+0x6c>)
     dfa:	4b05      	ldr	r3, [pc, #20]	; (e10 <debounceCh_06_SwitchTimerHandler+0x64>)
     dfc:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     dfe:	4b07      	ldr	r3, [pc, #28]	; (e1c <debounceCh_06_SwitchTimerHandler+0x70>)
     e00:	4798      	blx	r3
}
     e02:	bd70      	pop	{r4, r5, r6, pc}
     e04:	41004400 	.word	0x41004400
     e08:	20000004 	.word	0x20000004
     e0c:	000074bc 	.word	0x000074bc
     e10:	00001ff5 	.word	0x00001ff5
     e14:	000004a1 	.word	0x000004a1
     e18:	000074d8 	.word	0x000074d8
     e1c:	0000014d 	.word	0x0000014d

00000e20 <debounceCh_05_SwitchTimerHandler>:
{
     e20:	b570      	push	{r4, r5, r6, lr}
     e22:	4b15      	ldr	r3, [pc, #84]	; (e78 <debounceCh_05_SwitchTimerHandler+0x58>)
     e24:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_5_PIN))
     e26:	025b      	lsls	r3, r3, #9
     e28:	d51a      	bpl.n	e60 <debounceCh_05_SwitchTimerHandler+0x40>
        Channel[CH_05].portStat.cablePresent = CABLE_ABSENT;
     e2a:	4d14      	ldr	r5, [pc, #80]	; (e7c <debounceCh_05_SwitchTimerHandler+0x5c>)
     e2c:	2482      	movs	r4, #130	; 0x82
     e2e:	5b2b      	ldrh	r3, [r5, r4]
     e30:	2201      	movs	r2, #1
     e32:	4393      	bics	r3, r2
     e34:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 5 SWITCH OPENED\n");
     e36:	4812      	ldr	r0, [pc, #72]	; (e80 <debounceCh_05_SwitchTimerHandler+0x60>)
     e38:	4b12      	ldr	r3, [pc, #72]	; (e84 <debounceCh_05_SwitchTimerHandler+0x64>)
     e3a:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_05].portStat.armed) &&\
     e3c:	5b2b      	ldrh	r3, [r5, r4]
     e3e:	079b      	lsls	r3, r3, #30
     e40:	d519      	bpl.n	e76 <debounceCh_05_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_05].portStat.alarming) )
     e42:	2382      	movs	r3, #130	; 0x82
     e44:	4a0d      	ldr	r2, [pc, #52]	; (e7c <debounceCh_05_SwitchTimerHandler+0x5c>)
     e46:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_05].portStat.armed) &&\
     e48:	075b      	lsls	r3, r3, #29
     e4a:	d414      	bmi.n	e76 <debounceCh_05_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_5_SWITCH_WAS_OPENED);
     e4c:	2005      	movs	r0, #5
     e4e:	4b0e      	ldr	r3, [pc, #56]	; (e88 <debounceCh_05_SwitchTimerHandler+0x68>)
     e50:	4798      	blx	r3
            Channel[CH_05].portStat.alarming = PORT_ALARMING; 
     e52:	490a      	ldr	r1, [pc, #40]	; (e7c <debounceCh_05_SwitchTimerHandler+0x5c>)
     e54:	2282      	movs	r2, #130	; 0x82
     e56:	5a8b      	ldrh	r3, [r1, r2]
     e58:	2004      	movs	r0, #4
     e5a:	4303      	orrs	r3, r0
     e5c:	528b      	strh	r3, [r1, r2]
     e5e:	e00a      	b.n	e76 <debounceCh_05_SwitchTimerHandler+0x56>
        Channel[CH_05].portStat.cablePresent = CABLE_PRESENT;
     e60:	4906      	ldr	r1, [pc, #24]	; (e7c <debounceCh_05_SwitchTimerHandler+0x5c>)
     e62:	2282      	movs	r2, #130	; 0x82
     e64:	5a8b      	ldrh	r3, [r1, r2]
     e66:	2001      	movs	r0, #1
     e68:	4303      	orrs	r3, r0
     e6a:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 5 SWITCH CLOSED\n");
     e6c:	4807      	ldr	r0, [pc, #28]	; (e8c <debounceCh_05_SwitchTimerHandler+0x6c>)
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <debounceCh_05_SwitchTimerHandler+0x64>)
     e70:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     e72:	4b07      	ldr	r3, [pc, #28]	; (e90 <debounceCh_05_SwitchTimerHandler+0x70>)
     e74:	4798      	blx	r3
}
     e76:	bd70      	pop	{r4, r5, r6, pc}
     e78:	41004400 	.word	0x41004400
     e7c:	20000004 	.word	0x20000004
     e80:	00007484 	.word	0x00007484
     e84:	00001ff5 	.word	0x00001ff5
     e88:	000004a1 	.word	0x000004a1
     e8c:	000074a0 	.word	0x000074a0
     e90:	0000014d 	.word	0x0000014d

00000e94 <debounceCh_04_SwitchTimerHandler>:
{
     e94:	b570      	push	{r4, r5, r6, lr}
     e96:	4b15      	ldr	r3, [pc, #84]	; (eec <debounceCh_04_SwitchTimerHandler+0x58>)
     e98:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_4_PIN))
     e9a:	021b      	lsls	r3, r3, #8
     e9c:	d51a      	bpl.n	ed4 <debounceCh_04_SwitchTimerHandler+0x40>
        Channel[CH_04].portStat.cablePresent = CABLE_ABSENT;
     e9e:	4d14      	ldr	r5, [pc, #80]	; (ef0 <debounceCh_04_SwitchTimerHandler+0x5c>)
     ea0:	246c      	movs	r4, #108	; 0x6c
     ea2:	5b2b      	ldrh	r3, [r5, r4]
     ea4:	2201      	movs	r2, #1
     ea6:	4393      	bics	r3, r2
     ea8:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 4 SWITCH OPENED\n");
     eaa:	4812      	ldr	r0, [pc, #72]	; (ef4 <debounceCh_04_SwitchTimerHandler+0x60>)
     eac:	4b12      	ldr	r3, [pc, #72]	; (ef8 <debounceCh_04_SwitchTimerHandler+0x64>)
     eae:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_04].portStat.armed)  &&\
     eb0:	5b2b      	ldrh	r3, [r5, r4]
     eb2:	079b      	lsls	r3, r3, #30
     eb4:	d519      	bpl.n	eea <debounceCh_04_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_04].portStat.alarming) )
     eb6:	236c      	movs	r3, #108	; 0x6c
     eb8:	4a0d      	ldr	r2, [pc, #52]	; (ef0 <debounceCh_04_SwitchTimerHandler+0x5c>)
     eba:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_04].portStat.armed)  &&\
     ebc:	075b      	lsls	r3, r3, #29
     ebe:	d414      	bmi.n	eea <debounceCh_04_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_4_SWITCH_WAS_OPENED);
     ec0:	2004      	movs	r0, #4
     ec2:	4b0e      	ldr	r3, [pc, #56]	; (efc <debounceCh_04_SwitchTimerHandler+0x68>)
     ec4:	4798      	blx	r3
            Channel[CH_04].portStat.alarming = PORT_ALARMING; 
     ec6:	490a      	ldr	r1, [pc, #40]	; (ef0 <debounceCh_04_SwitchTimerHandler+0x5c>)
     ec8:	226c      	movs	r2, #108	; 0x6c
     eca:	5a8b      	ldrh	r3, [r1, r2]
     ecc:	2004      	movs	r0, #4
     ece:	4303      	orrs	r3, r0
     ed0:	528b      	strh	r3, [r1, r2]
     ed2:	e00a      	b.n	eea <debounceCh_04_SwitchTimerHandler+0x56>
        Channel[CH_04].portStat.cablePresent = CABLE_PRESENT;
     ed4:	4906      	ldr	r1, [pc, #24]	; (ef0 <debounceCh_04_SwitchTimerHandler+0x5c>)
     ed6:	226c      	movs	r2, #108	; 0x6c
     ed8:	5a8b      	ldrh	r3, [r1, r2]
     eda:	2001      	movs	r0, #1
     edc:	4303      	orrs	r3, r0
     ede:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 4 SWITCH CLOSED\n");
     ee0:	4807      	ldr	r0, [pc, #28]	; (f00 <debounceCh_04_SwitchTimerHandler+0x6c>)
     ee2:	4b05      	ldr	r3, [pc, #20]	; (ef8 <debounceCh_04_SwitchTimerHandler+0x64>)
     ee4:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     ee6:	4b07      	ldr	r3, [pc, #28]	; (f04 <debounceCh_04_SwitchTimerHandler+0x70>)
     ee8:	4798      	blx	r3
}
     eea:	bd70      	pop	{r4, r5, r6, pc}
     eec:	41004400 	.word	0x41004400
     ef0:	20000004 	.word	0x20000004
     ef4:	0000744c 	.word	0x0000744c
     ef8:	00001ff5 	.word	0x00001ff5
     efc:	000004a1 	.word	0x000004a1
     f00:	00007468 	.word	0x00007468
     f04:	0000014d 	.word	0x0000014d

00000f08 <debounceCh_03_SwitchTimerHandler>:
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	4b15      	ldr	r3, [pc, #84]	; (f60 <debounceCh_03_SwitchTimerHandler+0x58>)
     f0c:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_3_PIN))
     f0e:	01db      	lsls	r3, r3, #7
     f10:	d51a      	bpl.n	f48 <debounceCh_03_SwitchTimerHandler+0x40>
        Channel[CH_03].portStat.cablePresent = CABLE_ABSENT;
     f12:	4d14      	ldr	r5, [pc, #80]	; (f64 <debounceCh_03_SwitchTimerHandler+0x5c>)
     f14:	2456      	movs	r4, #86	; 0x56
     f16:	5b2b      	ldrh	r3, [r5, r4]
     f18:	2201      	movs	r2, #1
     f1a:	4393      	bics	r3, r2
     f1c:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 3 SWITCH OPENED\n");
     f1e:	4812      	ldr	r0, [pc, #72]	; (f68 <debounceCh_03_SwitchTimerHandler+0x60>)
     f20:	4b12      	ldr	r3, [pc, #72]	; (f6c <debounceCh_03_SwitchTimerHandler+0x64>)
     f22:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_03].portStat.armed)  &&\
     f24:	5b2b      	ldrh	r3, [r5, r4]
     f26:	079b      	lsls	r3, r3, #30
     f28:	d519      	bpl.n	f5e <debounceCh_03_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_03].portStat.alarming) )
     f2a:	2356      	movs	r3, #86	; 0x56
     f2c:	4a0d      	ldr	r2, [pc, #52]	; (f64 <debounceCh_03_SwitchTimerHandler+0x5c>)
     f2e:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_03].portStat.armed)  &&\
     f30:	075b      	lsls	r3, r3, #29
     f32:	d414      	bmi.n	f5e <debounceCh_03_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_3_SWITCH_WAS_OPENED);
     f34:	2003      	movs	r0, #3
     f36:	4b0e      	ldr	r3, [pc, #56]	; (f70 <debounceCh_03_SwitchTimerHandler+0x68>)
     f38:	4798      	blx	r3
            Channel[CH_03].portStat.alarming = PORT_ALARMING; 
     f3a:	490a      	ldr	r1, [pc, #40]	; (f64 <debounceCh_03_SwitchTimerHandler+0x5c>)
     f3c:	2256      	movs	r2, #86	; 0x56
     f3e:	5a8b      	ldrh	r3, [r1, r2]
     f40:	2004      	movs	r0, #4
     f42:	4303      	orrs	r3, r0
     f44:	528b      	strh	r3, [r1, r2]
     f46:	e00a      	b.n	f5e <debounceCh_03_SwitchTimerHandler+0x56>
        Channel[CH_03].portStat.cablePresent = CABLE_PRESENT;
     f48:	4906      	ldr	r1, [pc, #24]	; (f64 <debounceCh_03_SwitchTimerHandler+0x5c>)
     f4a:	2256      	movs	r2, #86	; 0x56
     f4c:	5a8b      	ldrh	r3, [r1, r2]
     f4e:	2001      	movs	r0, #1
     f50:	4303      	orrs	r3, r0
     f52:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 3 SWITCH CLOSED\n");
     f54:	4807      	ldr	r0, [pc, #28]	; (f74 <debounceCh_03_SwitchTimerHandler+0x6c>)
     f56:	4b05      	ldr	r3, [pc, #20]	; (f6c <debounceCh_03_SwitchTimerHandler+0x64>)
     f58:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     f5a:	4b07      	ldr	r3, [pc, #28]	; (f78 <debounceCh_03_SwitchTimerHandler+0x70>)
     f5c:	4798      	blx	r3
}
     f5e:	bd70      	pop	{r4, r5, r6, pc}
     f60:	41004400 	.word	0x41004400
     f64:	20000004 	.word	0x20000004
     f68:	00007414 	.word	0x00007414
     f6c:	00001ff5 	.word	0x00001ff5
     f70:	000004a1 	.word	0x000004a1
     f74:	00007430 	.word	0x00007430
     f78:	0000014d 	.word	0x0000014d

00000f7c <debounceCh_02_SwitchTimerHandler>:
{
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	4b15      	ldr	r3, [pc, #84]	; (fd4 <debounceCh_02_SwitchTimerHandler+0x58>)
     f80:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_2_PIN))
     f82:	019b      	lsls	r3, r3, #6
     f84:	d51a      	bpl.n	fbc <debounceCh_02_SwitchTimerHandler+0x40>
        Channel[CH_02].portStat.cablePresent = CABLE_ABSENT;
     f86:	4d14      	ldr	r5, [pc, #80]	; (fd8 <debounceCh_02_SwitchTimerHandler+0x5c>)
     f88:	2440      	movs	r4, #64	; 0x40
     f8a:	5b2b      	ldrh	r3, [r5, r4]
     f8c:	2201      	movs	r2, #1
     f8e:	4393      	bics	r3, r2
     f90:	532b      	strh	r3, [r5, r4]
        UART_DBG_TX("\n CHANNEL 2 SWITCH OPENED\n");
     f92:	4812      	ldr	r0, [pc, #72]	; (fdc <debounceCh_02_SwitchTimerHandler+0x60>)
     f94:	4b12      	ldr	r3, [pc, #72]	; (fe0 <debounceCh_02_SwitchTimerHandler+0x64>)
     f96:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_02].portStat.armed) &&\
     f98:	5b2b      	ldrh	r3, [r5, r4]
     f9a:	079b      	lsls	r3, r3, #30
     f9c:	d519      	bpl.n	fd2 <debounceCh_02_SwitchTimerHandler+0x56>
             (PORT_NOT_ALARMING == Channel[CH_02].portStat.alarming) )
     f9e:	2340      	movs	r3, #64	; 0x40
     fa0:	4a0d      	ldr	r2, [pc, #52]	; (fd8 <debounceCh_02_SwitchTimerHandler+0x5c>)
     fa2:	5ad3      	ldrh	r3, [r2, r3]
        if ( (PORT_ARMED == Channel[CH_02].portStat.armed) &&\
     fa4:	075b      	lsls	r3, r3, #29
     fa6:	d414      	bmi.n	fd2 <debounceCh_02_SwitchTimerHandler+0x56>
            app_arm_alarmEvent(CHANNEL_2_SWITCH_WAS_OPENED);
     fa8:	2002      	movs	r0, #2
     faa:	4b0e      	ldr	r3, [pc, #56]	; (fe4 <debounceCh_02_SwitchTimerHandler+0x68>)
     fac:	4798      	blx	r3
            Channel[CH_02].portStat.alarming = PORT_ALARMING;
     fae:	490a      	ldr	r1, [pc, #40]	; (fd8 <debounceCh_02_SwitchTimerHandler+0x5c>)
     fb0:	2240      	movs	r2, #64	; 0x40
     fb2:	5a8b      	ldrh	r3, [r1, r2]
     fb4:	2004      	movs	r0, #4
     fb6:	4303      	orrs	r3, r0
     fb8:	528b      	strh	r3, [r1, r2]
     fba:	e00a      	b.n	fd2 <debounceCh_02_SwitchTimerHandler+0x56>
        Channel[CH_02].portStat.cablePresent = CABLE_PRESENT;
     fbc:	4906      	ldr	r1, [pc, #24]	; (fd8 <debounceCh_02_SwitchTimerHandler+0x5c>)
     fbe:	2240      	movs	r2, #64	; 0x40
     fc0:	5a8b      	ldrh	r3, [r1, r2]
     fc2:	2001      	movs	r0, #1
     fc4:	4303      	orrs	r3, r0
     fc6:	528b      	strh	r3, [r1, r2]
        UART_DBG_TX("\n CHANNEL 2 SWITCH CLOSED\n");
     fc8:	4807      	ldr	r0, [pc, #28]	; (fe8 <debounceCh_02_SwitchTimerHandler+0x6c>)
     fca:	4b05      	ldr	r3, [pc, #20]	; (fe0 <debounceCh_02_SwitchTimerHandler+0x64>)
     fcc:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
     fce:	4b07      	ldr	r3, [pc, #28]	; (fec <debounceCh_02_SwitchTimerHandler+0x70>)
     fd0:	4798      	blx	r3
}
     fd2:	bd70      	pop	{r4, r5, r6, pc}
     fd4:	41004400 	.word	0x41004400
     fd8:	20000004 	.word	0x20000004
     fdc:	000073dc 	.word	0x000073dc
     fe0:	00001ff5 	.word	0x00001ff5
     fe4:	000004a1 	.word	0x000004a1
     fe8:	000073f8 	.word	0x000073f8
     fec:	0000014d 	.word	0x0000014d

00000ff0 <debounceCh_01_SwitchTimerHandler>:
{
     ff0:	b510      	push	{r4, lr}
     ff2:	4b13      	ldr	r3, [pc, #76]	; (1040 <STACK_SIZE+0x40>)
     ff4:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_1_PIN))
     ff6:	011b      	lsls	r3, r3, #4
     ff8:	d517      	bpl.n	102a <STACK_SIZE+0x2a>
        Channel[CH_01].portStat.cablePresent = CABLE_ABSENT;
     ffa:	4c12      	ldr	r4, [pc, #72]	; (1044 <STACK_SIZE+0x44>)
     ffc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
     ffe:	2201      	movs	r2, #1
    1000:	4393      	bics	r3, r2
    1002:	8563      	strh	r3, [r4, #42]	; 0x2a
        UART_DBG_TX("\n CHANNEL 1 SWITCH OPENED\n");
    1004:	4810      	ldr	r0, [pc, #64]	; (1048 <STACK_SIZE+0x48>)
    1006:	4b11      	ldr	r3, [pc, #68]	; (104c <STACK_SIZE+0x4c>)
    1008:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_01].portStat.armed) &&\
    100a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    100c:	079b      	lsls	r3, r3, #30
    100e:	d516      	bpl.n	103e <STACK_SIZE+0x3e>
             (PORT_NOT_ALARMING == Channel[CH_01].portStat.alarming) )
    1010:	4b0c      	ldr	r3, [pc, #48]	; (1044 <STACK_SIZE+0x44>)
    1012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
        if ( (PORT_ARMED == Channel[CH_01].portStat.armed) &&\
    1014:	075b      	lsls	r3, r3, #29
    1016:	d412      	bmi.n	103e <STACK_SIZE+0x3e>
            app_arm_alarmEvent(CHANNEL_1_SWITCH_WAS_OPENED);
    1018:	2001      	movs	r0, #1
    101a:	4b0d      	ldr	r3, [pc, #52]	; (1050 <STACK_SIZE+0x50>)
    101c:	4798      	blx	r3
            Channel[CH_01].portStat.alarming = PORT_ALARMING; 
    101e:	4a09      	ldr	r2, [pc, #36]	; (1044 <STACK_SIZE+0x44>)
    1020:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    1022:	2104      	movs	r1, #4
    1024:	430b      	orrs	r3, r1
    1026:	8553      	strh	r3, [r2, #42]	; 0x2a
    1028:	e009      	b.n	103e <STACK_SIZE+0x3e>
        Channel[CH_01].portStat.cablePresent = CABLE_PRESENT;
    102a:	4a06      	ldr	r2, [pc, #24]	; (1044 <STACK_SIZE+0x44>)
    102c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    102e:	2101      	movs	r1, #1
    1030:	430b      	orrs	r3, r1
    1032:	8553      	strh	r3, [r2, #42]	; 0x2a
        UART_DBG_TX("\n CHANNEL 1 SWITCH CLOSED\n");
    1034:	4807      	ldr	r0, [pc, #28]	; (1054 <STACK_SIZE+0x54>)
    1036:	4b05      	ldr	r3, [pc, #20]	; (104c <STACK_SIZE+0x4c>)
    1038:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <STACK_SIZE+0x58>)
    103c:	4798      	blx	r3
}
    103e:	bd10      	pop	{r4, pc}
    1040:	41004400 	.word	0x41004400
    1044:	20000004 	.word	0x20000004
    1048:	000073a4 	.word	0x000073a4
    104c:	00001ff5 	.word	0x00001ff5
    1050:	000004a1 	.word	0x000004a1
    1054:	000073c0 	.word	0x000073c0
    1058:	0000014d 	.word	0x0000014d

0000105c <debounceCh_00_SwitchTimerHandler>:
{
    105c:	b510      	push	{r4, lr}
    105e:	4b13      	ldr	r3, [pc, #76]	; (10ac <debounceCh_00_SwitchTimerHandler+0x50>)
    1060:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(CHANNEL_0_PIN))
    1062:	00db      	lsls	r3, r3, #3
    1064:	d517      	bpl.n	1096 <debounceCh_00_SwitchTimerHandler+0x3a>
        Channel[CH_00].portStat.cablePresent = CABLE_ABSENT;
    1066:	4c12      	ldr	r4, [pc, #72]	; (10b0 <debounceCh_00_SwitchTimerHandler+0x54>)
    1068:	8aa3      	ldrh	r3, [r4, #20]
    106a:	2201      	movs	r2, #1
    106c:	4393      	bics	r3, r2
    106e:	82a3      	strh	r3, [r4, #20]
        UART_DBG_TX("\n CHANNEL 0 SWITCH OPENED\n");
    1070:	4810      	ldr	r0, [pc, #64]	; (10b4 <debounceCh_00_SwitchTimerHandler+0x58>)
    1072:	4b11      	ldr	r3, [pc, #68]	; (10b8 <debounceCh_00_SwitchTimerHandler+0x5c>)
    1074:	4798      	blx	r3
        if ( (PORT_ARMED == Channel[CH_00].portStat.armed) &&\
    1076:	8aa3      	ldrh	r3, [r4, #20]
    1078:	079b      	lsls	r3, r3, #30
    107a:	d516      	bpl.n	10aa <debounceCh_00_SwitchTimerHandler+0x4e>
             (PORT_NOT_ALARMING == Channel[CH_00].portStat.alarming))
    107c:	4b0c      	ldr	r3, [pc, #48]	; (10b0 <debounceCh_00_SwitchTimerHandler+0x54>)
    107e:	8a9b      	ldrh	r3, [r3, #20]
        if ( (PORT_ARMED == Channel[CH_00].portStat.armed) &&\
    1080:	075b      	lsls	r3, r3, #29
    1082:	d412      	bmi.n	10aa <debounceCh_00_SwitchTimerHandler+0x4e>
            app_arm_alarmEvent(CHANNEL_0_SWITCH_WAS_OPENED);
    1084:	2000      	movs	r0, #0
    1086:	4b0d      	ldr	r3, [pc, #52]	; (10bc <debounceCh_00_SwitchTimerHandler+0x60>)
    1088:	4798      	blx	r3
            Channel[CH_00].portStat.alarming = PORT_ALARMING;
    108a:	4a09      	ldr	r2, [pc, #36]	; (10b0 <debounceCh_00_SwitchTimerHandler+0x54>)
    108c:	8a93      	ldrh	r3, [r2, #20]
    108e:	2104      	movs	r1, #4
    1090:	430b      	orrs	r3, r1
    1092:	8293      	strh	r3, [r2, #20]
    1094:	e009      	b.n	10aa <debounceCh_00_SwitchTimerHandler+0x4e>
        Channel[CH_00].portStat.cablePresent = CABLE_PRESENT;
    1096:	4a06      	ldr	r2, [pc, #24]	; (10b0 <debounceCh_00_SwitchTimerHandler+0x54>)
    1098:	8a93      	ldrh	r3, [r2, #20]
    109a:	2101      	movs	r1, #1
    109c:	430b      	orrs	r3, r1
    109e:	8293      	strh	r3, [r2, #20]
        UART_DBG_TX("\n CHANNEL 0 SWITCH CLOSED\n");
    10a0:	4807      	ldr	r0, [pc, #28]	; (10c0 <debounceCh_00_SwitchTimerHandler+0x64>)
    10a2:	4b05      	ldr	r3, [pc, #20]	; (10b8 <debounceCh_00_SwitchTimerHandler+0x5c>)
    10a4:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();     
    10a6:	4b07      	ldr	r3, [pc, #28]	; (10c4 <debounceCh_00_SwitchTimerHandler+0x68>)
    10a8:	4798      	blx	r3
}
    10aa:	bd10      	pop	{r4, pc}
    10ac:	41004400 	.word	0x41004400
    10b0:	20000004 	.word	0x20000004
    10b4:	0000736c 	.word	0x0000736c
    10b8:	00001ff5 	.word	0x00001ff5
    10bc:	000004a1 	.word	0x000004a1
    10c0:	00007388 	.word	0x00007388
    10c4:	0000014d 	.word	0x0000014d

000010c8 <extint_callback_debounceCh_11>:
{
    10c8:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    10ca:	2000      	movs	r0, #0
    10cc:	4b02      	ldr	r3, [pc, #8]	; (10d8 <extint_callback_debounceCh_11+0x10>)
    10ce:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_11_SwitchTimer);
    10d0:	4802      	ldr	r0, [pc, #8]	; (10dc <extint_callback_debounceCh_11+0x14>)
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <extint_callback_debounceCh_11+0x18>)
    10d4:	4798      	blx	r3
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	00000599 	.word	0x00000599
    10dc:	2000066c 	.word	0x2000066c
    10e0:	00003189 	.word	0x00003189

000010e4 <extint_callback_debounceCh_10>:
{
    10e4:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    10e6:	2000      	movs	r0, #0
    10e8:	4b02      	ldr	r3, [pc, #8]	; (10f4 <extint_callback_debounceCh_10+0x10>)
    10ea:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_10_SwitchTimer);
    10ec:	4802      	ldr	r0, [pc, #8]	; (10f8 <extint_callback_debounceCh_10+0x14>)
    10ee:	4b03      	ldr	r3, [pc, #12]	; (10fc <extint_callback_debounceCh_10+0x18>)
    10f0:	4798      	blx	r3
}
    10f2:	bd10      	pop	{r4, pc}
    10f4:	00000599 	.word	0x00000599
    10f8:	20000658 	.word	0x20000658
    10fc:	00003189 	.word	0x00003189

00001100 <extint_callback_debounceCh_09>:
{
    1100:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    1102:	2000      	movs	r0, #0
    1104:	4b02      	ldr	r3, [pc, #8]	; (1110 <extint_callback_debounceCh_09+0x10>)
    1106:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_09_SwitchTimer);
    1108:	4802      	ldr	r0, [pc, #8]	; (1114 <extint_callback_debounceCh_09+0x14>)
    110a:	4b03      	ldr	r3, [pc, #12]	; (1118 <extint_callback_debounceCh_09+0x18>)
    110c:	4798      	blx	r3
}
    110e:	bd10      	pop	{r4, pc}
    1110:	00000599 	.word	0x00000599
    1114:	20000644 	.word	0x20000644
    1118:	00003189 	.word	0x00003189

0000111c <extint_callback_debounceCh_08>:
{
    111c:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    111e:	2000      	movs	r0, #0
    1120:	4b02      	ldr	r3, [pc, #8]	; (112c <extint_callback_debounceCh_08+0x10>)
    1122:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_08_SwitchTimer);
    1124:	4802      	ldr	r0, [pc, #8]	; (1130 <extint_callback_debounceCh_08+0x14>)
    1126:	4b03      	ldr	r3, [pc, #12]	; (1134 <extint_callback_debounceCh_08+0x18>)
    1128:	4798      	blx	r3
}
    112a:	bd10      	pop	{r4, pc}
    112c:	00000599 	.word	0x00000599
    1130:	20000630 	.word	0x20000630
    1134:	00003189 	.word	0x00003189

00001138 <extint_callback_debounceCh_07>:
{
    1138:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    113a:	2000      	movs	r0, #0
    113c:	4b02      	ldr	r3, [pc, #8]	; (1148 <extint_callback_debounceCh_07+0x10>)
    113e:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_07_SwitchTimer);
    1140:	4802      	ldr	r0, [pc, #8]	; (114c <extint_callback_debounceCh_07+0x14>)
    1142:	4b03      	ldr	r3, [pc, #12]	; (1150 <extint_callback_debounceCh_07+0x18>)
    1144:	4798      	blx	r3
}
    1146:	bd10      	pop	{r4, pc}
    1148:	00000599 	.word	0x00000599
    114c:	2000061c 	.word	0x2000061c
    1150:	00003189 	.word	0x00003189

00001154 <extint_callback_debounceCh_06>:
{
    1154:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    1156:	2000      	movs	r0, #0
    1158:	4b02      	ldr	r3, [pc, #8]	; (1164 <extint_callback_debounceCh_06+0x10>)
    115a:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_06_SwitchTimer);
    115c:	4802      	ldr	r0, [pc, #8]	; (1168 <extint_callback_debounceCh_06+0x14>)
    115e:	4b03      	ldr	r3, [pc, #12]	; (116c <extint_callback_debounceCh_06+0x18>)
    1160:	4798      	blx	r3
}
    1162:	bd10      	pop	{r4, pc}
    1164:	00000599 	.word	0x00000599
    1168:	20000608 	.word	0x20000608
    116c:	00003189 	.word	0x00003189

00001170 <extint_callback_debounceCh_05>:
{
    1170:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    1172:	2000      	movs	r0, #0
    1174:	4b02      	ldr	r3, [pc, #8]	; (1180 <extint_callback_debounceCh_05+0x10>)
    1176:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_05_SwitchTimer);
    1178:	4802      	ldr	r0, [pc, #8]	; (1184 <extint_callback_debounceCh_05+0x14>)
    117a:	4b03      	ldr	r3, [pc, #12]	; (1188 <extint_callback_debounceCh_05+0x18>)
    117c:	4798      	blx	r3
}
    117e:	bd10      	pop	{r4, pc}
    1180:	00000599 	.word	0x00000599
    1184:	200005f4 	.word	0x200005f4
    1188:	00003189 	.word	0x00003189

0000118c <extint_callback_debounceCh_04>:
{
    118c:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    118e:	2000      	movs	r0, #0
    1190:	4b02      	ldr	r3, [pc, #8]	; (119c <extint_callback_debounceCh_04+0x10>)
    1192:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_04_SwitchTimer);
    1194:	4802      	ldr	r0, [pc, #8]	; (11a0 <extint_callback_debounceCh_04+0x14>)
    1196:	4b03      	ldr	r3, [pc, #12]	; (11a4 <extint_callback_debounceCh_04+0x18>)
    1198:	4798      	blx	r3
}
    119a:	bd10      	pop	{r4, pc}
    119c:	00000599 	.word	0x00000599
    11a0:	200005e0 	.word	0x200005e0
    11a4:	00003189 	.word	0x00003189

000011a8 <extint_callback_debounceCh_03>:
{
    11a8:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    11aa:	2000      	movs	r0, #0
    11ac:	4b02      	ldr	r3, [pc, #8]	; (11b8 <extint_callback_debounceCh_03+0x10>)
    11ae:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_03_SwitchTimer);
    11b0:	4802      	ldr	r0, [pc, #8]	; (11bc <extint_callback_debounceCh_03+0x14>)
    11b2:	4b03      	ldr	r3, [pc, #12]	; (11c0 <extint_callback_debounceCh_03+0x18>)
    11b4:	4798      	blx	r3
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	00000599 	.word	0x00000599
    11bc:	200005cc 	.word	0x200005cc
    11c0:	00003189 	.word	0x00003189

000011c4 <extint_callback_debounceCh_02>:
{
    11c4:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    11c6:	2000      	movs	r0, #0
    11c8:	4b02      	ldr	r3, [pc, #8]	; (11d4 <extint_callback_debounceCh_02+0x10>)
    11ca:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_02_SwitchTimer);
    11cc:	4802      	ldr	r0, [pc, #8]	; (11d8 <extint_callback_debounceCh_02+0x14>)
    11ce:	4b03      	ldr	r3, [pc, #12]	; (11dc <extint_callback_debounceCh_02+0x18>)
    11d0:	4798      	blx	r3
}
    11d2:	bd10      	pop	{r4, pc}
    11d4:	00000599 	.word	0x00000599
    11d8:	200005b8 	.word	0x200005b8
    11dc:	00003189 	.word	0x00003189

000011e0 <extint_callback_debounceCh_01>:
{
    11e0:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    11e2:	2000      	movs	r0, #0
    11e4:	4b02      	ldr	r3, [pc, #8]	; (11f0 <extint_callback_debounceCh_01+0x10>)
    11e6:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_01_SwitchTimer);
    11e8:	4802      	ldr	r0, [pc, #8]	; (11f4 <extint_callback_debounceCh_01+0x14>)
    11ea:	4b03      	ldr	r3, [pc, #12]	; (11f8 <extint_callback_debounceCh_01+0x18>)
    11ec:	4798      	blx	r3
}
    11ee:	bd10      	pop	{r4, pc}
    11f0:	00000599 	.word	0x00000599
    11f4:	200005a4 	.word	0x200005a4
    11f8:	00003189 	.word	0x00003189

000011fc <extint_callback_debounceCh_00>:
{
    11fc:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    11fe:	2000      	movs	r0, #0
    1200:	4b02      	ldr	r3, [pc, #8]	; (120c <extint_callback_debounceCh_00+0x10>)
    1202:	4798      	blx	r3
    SYS_TimerRestart(&debounceCh_00_SwitchTimer);
    1204:	4802      	ldr	r0, [pc, #8]	; (1210 <extint_callback_debounceCh_00+0x14>)
    1206:	4b03      	ldr	r3, [pc, #12]	; (1214 <extint_callback_debounceCh_00+0x18>)
    1208:	4798      	blx	r3
}
    120a:	bd10      	pop	{r4, pc}
    120c:	00000599 	.word	0x00000599
    1210:	20000590 	.word	0x20000590
    1214:	00003189 	.word	0x00003189

00001218 <extint_callback_debounce_nDISARM>:
{
    1218:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    121a:	2000      	movs	r0, #0
    121c:	4b02      	ldr	r3, [pc, #8]	; (1228 <extint_callback_debounce_nDISARM+0x10>)
    121e:	4798      	blx	r3
    SYS_TimerRestart(&debounce_nDISARM_Timer);
    1220:	4802      	ldr	r0, [pc, #8]	; (122c <extint_callback_debounce_nDISARM+0x14>)
    1222:	4b03      	ldr	r3, [pc, #12]	; (1230 <extint_callback_debounce_nDISARM+0x18>)
    1224:	4798      	blx	r3
}
    1226:	bd10      	pop	{r4, pc}
    1228:	00000599 	.word	0x00000599
    122c:	20000694 	.word	0x20000694
    1230:	00003189 	.word	0x00003189

00001234 <extint_callback_power_good>:
{
    1234:	b510      	push	{r4, lr}
    app_bbu_sleep_on_exit(false);
    1236:	2000      	movs	r0, #0
    1238:	4b05      	ldr	r3, [pc, #20]	; (1250 <extint_callback_power_good+0x1c>)
    123a:	4798      	blx	r3
    SYS_TimerRestart(&debouncePowerGoodTimer);
    123c:	4805      	ldr	r0, [pc, #20]	; (1254 <extint_callback_power_good+0x20>)
    123e:	4b06      	ldr	r3, [pc, #24]	; (1258 <extint_callback_power_good+0x24>)
    1240:	4798      	blx	r3
    amStatus.Powered = POWER_NOT_GOOD;
    1242:	4a06      	ldr	r2, [pc, #24]	; (125c <extint_callback_power_good+0x28>)
    1244:	7813      	ldrb	r3, [r2, #0]
    1246:	2102      	movs	r1, #2
    1248:	438b      	bics	r3, r1
    124a:	7013      	strb	r3, [r2, #0]
}
    124c:	bd10      	pop	{r4, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00000599 	.word	0x00000599
    1254:	20000680 	.word	0x20000680
    1258:	00003189 	.word	0x00003189
    125c:	20000ad8 	.word	0x20000ad8

00001260 <debounce_nDISARM_TimerHandler>:


static void debounce_nDISARM_TimerHandler(SYS_Timer_t *timer)
{
    1260:	b510      	push	{r4, lr}
    1262:	4b09      	ldr	r3, [pc, #36]	; (1288 <debounce_nDISARM_TimerHandler+0x28>)
    1264:	6a1b      	ldr	r3, [r3, #32]
    UNUSED(timer);
    
    // Driving this signal low disarms the unit.  
    if( port_pin_get_input_level(nDISARM_PIN) == ARM_CMD )
    1266:	059b      	lsls	r3, r3, #22
    1268:	d406      	bmi.n	1278 <debounce_nDISARM_TimerHandler+0x18>
        UART_DBG_TX("nDISARM: Arm Requested");
    }
    else
    {
        // intelli-key inserted - remain disarmed
        app_arm_disarm(0);
    126a:	2000      	movs	r0, #0
    126c:	4b07      	ldr	r3, [pc, #28]	; (128c <debounce_nDISARM_TimerHandler+0x2c>)
    126e:	4798      	blx	r3
        UART_DBG_TX("nDISARM: DISARM!");
    1270:	4807      	ldr	r0, [pc, #28]	; (1290 <debounce_nDISARM_TimerHandler+0x30>)
    1272:	4b08      	ldr	r3, [pc, #32]	; (1294 <debounce_nDISARM_TimerHandler+0x34>)
    1274:	4798      	blx	r3
    }
    
}
    1276:	bd10      	pop	{r4, pc}
        app_arm_request(false, ARM_IGNORE_NONE);
    1278:	2100      	movs	r1, #0
    127a:	2000      	movs	r0, #0
    127c:	4b06      	ldr	r3, [pc, #24]	; (1298 <debounce_nDISARM_TimerHandler+0x38>)
    127e:	4798      	blx	r3
        UART_DBG_TX("nDISARM: Arm Requested");
    1280:	4806      	ldr	r0, [pc, #24]	; (129c <debounce_nDISARM_TimerHandler+0x3c>)
    1282:	4b04      	ldr	r3, [pc, #16]	; (1294 <debounce_nDISARM_TimerHandler+0x34>)
    1284:	4798      	blx	r3
    1286:	e7f6      	b.n	1276 <debounce_nDISARM_TimerHandler+0x16>
    1288:	41004400 	.word	0x41004400
    128c:	000002f9 	.word	0x000002f9
    1290:	00007624 	.word	0x00007624
    1294:	00001ff5 	.word	0x00001ff5
    1298:	000002e1 	.word	0x000002e1
    129c:	0000760c 	.word	0x0000760c

000012a0 <debouncePowerGoodTimerHandler>:
{
    12a0:	b510      	push	{r4, lr}
    12a2:	4b1c      	ldr	r3, [pc, #112]	; (1314 <debouncePowerGoodTimerHandler+0x74>)
    12a4:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(POWER_GOOD_PIN))  // Low = No Power, High = Power Good
    12a6:	051b      	lsls	r3, r3, #20
    12a8:	d408      	bmi.n	12bc <debouncePowerGoodTimerHandler+0x1c>
        amStatus.Powered = POWER_NOT_GOOD;
    12aa:	4b1b      	ldr	r3, [pc, #108]	; (1318 <debouncePowerGoodTimerHandler+0x78>)
    12ac:	781a      	ldrb	r2, [r3, #0]
    12ae:	2102      	movs	r1, #2
    12b0:	438a      	bics	r2, r1
    12b2:	701a      	strb	r2, [r3, #0]
        if( (AM_IS_MASTER == amStatus.isMaster) && (SYSTEM_ARMED == app_arm_get_system_armed() ) )
    12b4:	781b      	ldrb	r3, [r3, #0]
    12b6:	07db      	lsls	r3, r3, #31
    12b8:	d423      	bmi.n	1302 <debouncePowerGoodTimerHandler+0x62>
}
    12ba:	bd10      	pop	{r4, pc}
        amStatus.Powered = POWER_GOOD;
    12bc:	4b16      	ldr	r3, [pc, #88]	; (1318 <debouncePowerGoodTimerHandler+0x78>)
    12be:	781a      	ldrb	r2, [r3, #0]
    12c0:	2102      	movs	r1, #2
    12c2:	430a      	orrs	r2, r1
    12c4:	701a      	strb	r2, [r3, #0]
        amStatus.shutDown   = false;
    12c6:	781a      	ldrb	r2, [r3, #0]
    12c8:	2110      	movs	r1, #16
    12ca:	438a      	bics	r2, r1
    12cc:	701a      	strb	r2, [r3, #0]
        SLP_TimerStop(&shelfStorageConditionTimer);  // Don't issue kill command
    12ce:	4813      	ldr	r0, [pc, #76]	; (131c <debouncePowerGoodTimerHandler+0x7c>)
    12d0:	4b13      	ldr	r3, [pc, #76]	; (1320 <debouncePowerGoodTimerHandler+0x80>)
    12d2:	4798      	blx	r3
        app_arm_reset_auto_arm_timer();
    12d4:	4b13      	ldr	r3, [pc, #76]	; (1324 <debouncePowerGoodTimerHandler+0x84>)
    12d6:	4798      	blx	r3
        app_buzzer_stop_pattern(BUZ_PAT_PUCK_DEEP_SLEEP);
    12d8:	200f      	movs	r0, #15
    12da:	4b13      	ldr	r3, [pc, #76]	; (1328 <debouncePowerGoodTimerHandler+0x88>)
    12dc:	4798      	blx	r3
        if( app_arm_only_powerTamper_alarming() )
    12de:	4b13      	ldr	r3, [pc, #76]	; (132c <debouncePowerGoodTimerHandler+0x8c>)
    12e0:	4798      	blx	r3
    12e2:	2800      	cmp	r0, #0
    12e4:	d107      	bne.n	12f6 <debouncePowerGoodTimerHandler+0x56>
        app_arm_clear_PowerTamper_alarm();
    12e6:	4b12      	ldr	r3, [pc, #72]	; (1330 <debouncePowerGoodTimerHandler+0x90>)
    12e8:	4798      	blx	r3
        ShelfStorageMessageSent = false;
    12ea:	2200      	movs	r2, #0
    12ec:	4b11      	ldr	r3, [pc, #68]	; (1334 <debouncePowerGoodTimerHandler+0x94>)
    12ee:	701a      	strb	r2, [r3, #0]
        app_bbu_request_active();
    12f0:	4b11      	ldr	r3, [pc, #68]	; (1338 <debouncePowerGoodTimerHandler+0x98>)
    12f2:	4798      	blx	r3
    12f4:	e7e1      	b.n	12ba <debouncePowerGoodTimerHandler+0x1a>
            app_arm_set_PowerTamper_armed(SYSTEM_ARMED);
    12f6:	2001      	movs	r0, #1
    12f8:	4b10      	ldr	r3, [pc, #64]	; (133c <debouncePowerGoodTimerHandler+0x9c>)
    12fa:	4798      	blx	r3
            app_buzzer_alarm_stop();
    12fc:	4b10      	ldr	r3, [pc, #64]	; (1340 <debouncePowerGoodTimerHandler+0xa0>)
    12fe:	4798      	blx	r3
    1300:	e7f1      	b.n	12e6 <debouncePowerGoodTimerHandler+0x46>
        if( (AM_IS_MASTER == amStatus.isMaster) && (SYSTEM_ARMED == app_arm_get_system_armed() ) )
    1302:	4b10      	ldr	r3, [pc, #64]	; (1344 <debouncePowerGoodTimerHandler+0xa4>)
    1304:	4798      	blx	r3
    1306:	2800      	cmp	r0, #0
    1308:	d0d7      	beq.n	12ba <debouncePowerGoodTimerHandler+0x1a>
            SYS_TimerStart(&debounce_nMASTERTimer);   
    130a:	480f      	ldr	r0, [pc, #60]	; (1348 <debouncePowerGoodTimerHandler+0xa8>)
    130c:	4b0f      	ldr	r3, [pc, #60]	; (134c <debouncePowerGoodTimerHandler+0xac>)
    130e:	4798      	blx	r3
}
    1310:	e7d3      	b.n	12ba <debouncePowerGoodTimerHandler+0x1a>
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	41004400 	.word	0x41004400
    1318:	20000ad8 	.word	0x20000ad8
    131c:	200006bc 	.word	0x200006bc
    1320:	00002f95 	.word	0x00002f95
    1324:	0000014d 	.word	0x0000014d
    1328:	00000981 	.word	0x00000981
    132c:	00000549 	.word	0x00000549
    1330:	0000029d 	.word	0x0000029d
    1334:	20000ad4 	.word	0x20000ad4
    1338:	00000561 	.word	0x00000561
    133c:	0000027d 	.word	0x0000027d
    1340:	00000931 	.word	0x00000931
    1344:	00000539 	.word	0x00000539
    1348:	200006a8 	.word	0x200006a8
    134c:	00003159 	.word	0x00003159

00001350 <app_gen_io_init_cables>:
{
    1350:	b5f0      	push	{r4, r5, r6, r7, lr}
    1352:	46d6      	mov	lr, sl
    1354:	464f      	mov	r7, r9
    1356:	4646      	mov	r6, r8
    1358:	b5c0      	push	{r6, r7, lr}
    135a:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    135c:	ab01      	add	r3, sp, #4
    135e:	2200      	movs	r2, #0
    1360:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    1362:	709a      	strb	r2, [r3, #2]
    pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1364:	705a      	strb	r2, [r3, #1]
    for(int num; num < CH_COUNT; num++)
    1366:	2400      	movs	r4, #0
        port_pin_set_config(Channel[num].gpio_pin, &pin_conf);  // Inputs with no pull
    1368:	4e27      	ldr	r6, [pc, #156]	; (1408 <app_gen_io_init_cables+0xb8>)
    136a:	4d28      	ldr	r5, [pc, #160]	; (140c <app_gen_io_init_cables+0xbc>)
    136c:	2316      	movs	r3, #22
    136e:	4363      	muls	r3, r4
    1370:	5cf0      	ldrb	r0, [r6, r3]
    1372:	a901      	add	r1, sp, #4
    1374:	47a8      	blx	r5
    for(int num; num < CH_COUNT; num++)
    1376:	3401      	adds	r4, #1
    1378:	2c0c      	cmp	r4, #12
    137a:	d1f7      	bne.n	136c <app_gen_io_init_cables+0x1c>
    delay_cycles_ms(100);                                       // Allow pins to stabilize
    137c:	2064      	movs	r0, #100	; 0x64
    137e:	4b24      	ldr	r3, [pc, #144]	; (1410 <app_gen_io_init_cables+0xc0>)
    1380:	4798      	blx	r3
    for(int num; num < CH_COUNT; num++)
    1382:	2200      	movs	r2, #0
        if(port_pin_get_input_level(Channel[num].gpio_pin) == LOW)
    1384:	4b20      	ldr	r3, [pc, #128]	; (1408 <app_gen_io_init_cables+0xb8>)
    1386:	4698      	mov	r8, r3
    1388:	2016      	movs	r0, #22
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    138a:	271f      	movs	r7, #31
    138c:	3c0b      	subs	r4, #11
            Channel[num].portStat.cablePresent = CABLE_ABSENT; 
    138e:	4699      	mov	r9, r3
            Channel[num].portStat.cablePresent = CABLE_PRESENT;
    1390:	469c      	mov	ip, r3
        Channel[num].portStat.armed = PORT_DISARMED;
    1392:	001e      	movs	r6, r3
    1394:	e013      	b.n	13be <app_gen_io_init_cables+0x6e>
            Channel[num].portStat.cablePresent = CABLE_ABSENT; 
    1396:	0003      	movs	r3, r0
    1398:	4353      	muls	r3, r2
    139a:	444b      	add	r3, r9
    139c:	8a99      	ldrh	r1, [r3, #20]
    139e:	43a1      	bics	r1, r4
    13a0:	8299      	strh	r1, [r3, #20]
        Channel[num].portStat.armed = PORT_DISARMED;
    13a2:	0003      	movs	r3, r0
    13a4:	4353      	muls	r3, r2
    13a6:	18f3      	adds	r3, r6, r3
    13a8:	8a99      	ldrh	r1, [r3, #20]
    13aa:	2502      	movs	r5, #2
    13ac:	43a9      	bics	r1, r5
    13ae:	8299      	strh	r1, [r3, #20]
        Channel[num].portStat.alarming = PORT_NOT_ALARMING;
    13b0:	8a99      	ldrh	r1, [r3, #20]
    13b2:	3502      	adds	r5, #2
    13b4:	43a9      	bics	r1, r5
    13b6:	8299      	strh	r1, [r3, #20]
    for(int num; num < CH_COUNT; num++)
    13b8:	3201      	adds	r2, #1
    13ba:	2a0c      	cmp	r2, #12
    13bc:	d01e      	beq.n	13fc <app_gen_io_init_cables+0xac>
        if(port_pin_get_input_level(Channel[num].gpio_pin) == LOW)
    13be:	0003      	movs	r3, r0
    13c0:	4353      	muls	r3, r2
    13c2:	4641      	mov	r1, r8
    13c4:	5ccb      	ldrb	r3, [r1, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13c6:	09d9      	lsrs	r1, r3, #7
    13c8:	468a      	mov	sl, r1
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13ca:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    13cc:	4655      	mov	r5, sl
    13ce:	2d00      	cmp	r5, #0
    13d0:	d104      	bne.n	13dc <app_gen_io_init_cables+0x8c>
		return &(ports[port_index]->Group[group_index]);
    13d2:	0959      	lsrs	r1, r3, #5
    13d4:	01c9      	lsls	r1, r1, #7
    13d6:	4d0f      	ldr	r5, [pc, #60]	; (1414 <app_gen_io_init_cables+0xc4>)
    13d8:	46aa      	mov	sl, r5
    13da:	4451      	add	r1, sl
	return (port_base->IN.reg & pin_mask);
    13dc:	6a09      	ldr	r1, [r1, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13de:	403b      	ands	r3, r7
    13e0:	0025      	movs	r5, r4
    13e2:	409d      	lsls	r5, r3
    13e4:	4229      	tst	r1, r5
    13e6:	d1d6      	bne.n	1396 <app_gen_io_init_cables+0x46>
            Channel[num].portStat.cablePresent = CABLE_PRESENT;
    13e8:	0003      	movs	r3, r0
    13ea:	4353      	muls	r3, r2
    13ec:	4463      	add	r3, ip
    13ee:	8a99      	ldrh	r1, [r3, #20]
    13f0:	2501      	movs	r5, #1
    13f2:	46aa      	mov	sl, r5
    13f4:	4655      	mov	r5, sl
    13f6:	4329      	orrs	r1, r5
    13f8:	8299      	strh	r1, [r3, #20]
    13fa:	e7d2      	b.n	13a2 <app_gen_io_init_cables+0x52>
}
    13fc:	b002      	add	sp, #8
    13fe:	bc1c      	pop	{r2, r3, r4}
    1400:	4690      	mov	r8, r2
    1402:	4699      	mov	r9, r3
    1404:	46a2      	mov	sl, r4
    1406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1408:	20000004 	.word	0x20000004
    140c:	00004bc5 	.word	0x00004bc5
    1410:	00004b2d 	.word	0x00004b2d
    1414:	41004400 	.word	0x41004400

00001418 <app_gen_io_init>:
{
    1418:	b5f0      	push	{r4, r5, r6, r7, lr}
    141a:	46c6      	mov	lr, r8
    141c:	b500      	push	{lr}
    141e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    1420:	ad03      	add	r5, sp, #12
    1422:	2601      	movs	r6, #1
    1424:	706e      	strb	r6, [r5, #1]
	config->powersave  = false;
    1426:	2400      	movs	r4, #0
    1428:	70ac      	strb	r4, [r5, #2]
    pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    142a:	702e      	strb	r6, [r5, #0]
    port_pin_set_config(BATT_DEADMAN_SW_PIN, &pin_conf);
    142c:	0029      	movs	r1, r5
    142e:	2001      	movs	r0, #1
    1430:	4b91      	ldr	r3, [pc, #580]	; (1678 <app_gen_io_init+0x260>)
    1432:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1434:	2202      	movs	r2, #2
    1436:	4b91      	ldr	r3, [pc, #580]	; (167c <app_gen_io_init+0x264>)
    1438:	619a      	str	r2, [r3, #24]
	config->direction  = PORT_PIN_DIR_INPUT;
    143a:	702c      	strb	r4, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    143c:	706e      	strb	r6, [r5, #1]
	config->powersave  = false;
    143e:	70ac      	strb	r4, [r5, #2]
    app_gen_io_init_cables(); // Configure cables as Input Pull-None and read logic level to determine cable status
    1440:	4b8f      	ldr	r3, [pc, #572]	; (1680 <app_gen_io_init+0x268>)
    1442:	4798      	blx	r3
    extint_chan_get_config_defaults(&config_extint_chan);
    1444:	4668      	mov	r0, sp
    1446:	4b8f      	ldr	r3, [pc, #572]	; (1684 <app_gen_io_init+0x26c>)
    1448:	4798      	blx	r3
    debouncePowerGoodTimer.interval = STANDARD_DEBOUNCE_INTERVAL_MS;  // delay
    144a:	4b8f      	ldr	r3, [pc, #572]	; (1688 <app_gen_io_init+0x270>)
    144c:	22fa      	movs	r2, #250	; 0xfa
    144e:	609a      	str	r2, [r3, #8]
    debouncePowerGoodTimer.mode     = SYS_TIMER_INTERVAL_MODE;
    1450:	731c      	strb	r4, [r3, #12]
    debouncePowerGoodTimer.handler  = debouncePowerGoodTimerHandler;
    1452:	498e      	ldr	r1, [pc, #568]	; (168c <app_gen_io_init+0x274>)
    1454:	6119      	str	r1, [r3, #16]
    debounce_nMASTERTimer.interval = STANDARD_DEBOUNCE_INTERVAL_MS;  // delay
    1456:	4b8e      	ldr	r3, [pc, #568]	; (1690 <app_gen_io_init+0x278>)
    1458:	609a      	str	r2, [r3, #8]
    debounce_nMASTERTimer.mode     = SYS_TIMER_INTERVAL_MODE;
    145a:	731c      	strb	r4, [r3, #12]
    debounce_nMASTERTimer.handler  = debounce_nMASTERTimerHandler;
    145c:	498d      	ldr	r1, [pc, #564]	; (1694 <app_gen_io_init+0x27c>)
    145e:	6119      	str	r1, [r3, #16]
    shelfStorageConditionTimer.interval = SHELF_STORAGE_MESSAGE_INTERVAL_MS;  // delay
    1460:	4b8d      	ldr	r3, [pc, #564]	; (1698 <app_gen_io_init+0x280>)
    1462:	21fa      	movs	r1, #250	; 0xfa
    1464:	00c9      	lsls	r1, r1, #3
    1466:	6099      	str	r1, [r3, #8]
    shelfStorageConditionTimer.mode     = SYS_TIMER_INTERVAL_MODE;
    1468:	731c      	strb	r4, [r3, #12]
    shelfStorageConditionTimer.handler  = shelfStorageConditionTimerHandler;
    146a:	498c      	ldr	r1, [pc, #560]	; (169c <app_gen_io_init+0x284>)
    146c:	6119      	str	r1, [r3, #16]
    debounce_nDISARM_Timer.interval = STANDARD_DEBOUNCE_INTERVAL_MS;  // delay
    146e:	4b8c      	ldr	r3, [pc, #560]	; (16a0 <app_gen_io_init+0x288>)
    1470:	609a      	str	r2, [r3, #8]
    debounce_nDISARM_Timer.mode     = SYS_TIMER_INTERVAL_MODE;
    1472:	731c      	strb	r4, [r3, #12]
    debounce_nDISARM_Timer.handler  = debounce_nDISARM_TimerHandler;
    1474:	4a8b      	ldr	r2, [pc, #556]	; (16a4 <app_gen_io_init+0x28c>)
    1476:	611a      	str	r2, [r3, #16]
    for(int num; num < CH_COUNT; num++)
    1478:	2100      	movs	r1, #0
        Channel[num].timer->interval = STANDARD_DEBOUNCE_INTERVAL_MS;  // delay
    147a:	4e8b      	ldr	r6, [pc, #556]	; (16a8 <app_gen_io_init+0x290>)
    147c:	2516      	movs	r5, #22
    147e:	34fa      	adds	r4, #250	; 0xfa
        Channel[num].timer->mode     = SYS_TIMER_INTERVAL_MODE;
    1480:	2300      	movs	r3, #0
    1482:	4698      	mov	r8, r3
        Channel[num].timer->interval = STANDARD_DEBOUNCE_INTERVAL_MS;  // delay
    1484:	002b      	movs	r3, r5
    1486:	434b      	muls	r3, r1
    1488:	18f3      	adds	r3, r6, r3
    148a:	899a      	ldrh	r2, [r3, #12]
    148c:	4694      	mov	ip, r2
    148e:	89da      	ldrh	r2, [r3, #14]
    1490:	0412      	lsls	r2, r2, #16
    1492:	4660      	mov	r0, ip
    1494:	4302      	orrs	r2, r0
    1496:	6094      	str	r4, [r2, #8]
        Channel[num].timer->mode     = SYS_TIMER_INTERVAL_MODE;
    1498:	899a      	ldrh	r2, [r3, #12]
    149a:	4694      	mov	ip, r2
    149c:	89da      	ldrh	r2, [r3, #14]
    149e:	0412      	lsls	r2, r2, #16
    14a0:	4660      	mov	r0, ip
    14a2:	4302      	orrs	r2, r0
    14a4:	4640      	mov	r0, r8
    14a6:	7310      	strb	r0, [r2, #12]
        Channel[num].timer->handler  = Channel[num].timerHandler;
    14a8:	899a      	ldrh	r2, [r3, #12]
    14aa:	4694      	mov	ip, r2
    14ac:	89da      	ldrh	r2, [r3, #14]
    14ae:	0412      	lsls	r2, r2, #16
    14b0:	4660      	mov	r0, ip
    14b2:	4302      	orrs	r2, r0
    14b4:	8a1f      	ldrh	r7, [r3, #16]
    14b6:	8a5b      	ldrh	r3, [r3, #18]
    14b8:	041b      	lsls	r3, r3, #16
    14ba:	433b      	orrs	r3, r7
    14bc:	6113      	str	r3, [r2, #16]
    for(int num; num < CH_COUNT; num++)
    14be:	3101      	adds	r1, #1
    14c0:	290c      	cmp	r1, #12
    14c2:	d1df      	bne.n	1484 <app_gen_io_init+0x6c>
    config_extint_chan.gpio_pin           = POWER_GOOD_EIC_PIN;
    14c4:	230b      	movs	r3, #11
    14c6:	9300      	str	r3, [sp, #0]
    config_extint_chan.gpio_pin_mux       = POWER_GOOD_EIC_MUX;
    14c8:	2400      	movs	r4, #0
    14ca:	9401      	str	r4, [sp, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;  // <<<===
    14cc:	466b      	mov	r3, sp
    14ce:	721c      	strb	r4, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    14d0:	2603      	movs	r6, #3
    14d2:	72de      	strb	r6, [r3, #11]
    extint_chan_set_config(POWER_GOOD_EIC_LINE, &config_extint_chan);
    14d4:	4669      	mov	r1, sp
    14d6:	200b      	movs	r0, #11
    14d8:	4d74      	ldr	r5, [pc, #464]	; (16ac <app_gen_io_init+0x294>)
    14da:	47a8      	blx	r5
    config_extint_chan.gpio_pin           = nDISARM_PIN;
    14dc:	2309      	movs	r3, #9
    14de:	9300      	str	r3, [sp, #0]
    config_extint_chan.gpio_pin_mux       = nDISARM_EIC_MUX;
    14e0:	9401      	str	r4, [sp, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;  // <<<===
    14e2:	466b      	mov	r3, sp
    14e4:	721c      	strb	r4, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    14e6:	72de      	strb	r6, [r3, #11]
    extint_chan_set_config(nDISARM_EIC_LINE, &config_extint_chan);
    14e8:	4669      	mov	r1, sp
    14ea:	2009      	movs	r0, #9
    14ec:	47a8      	blx	r5
        config_extint_chan.gpio_pin           = Channel[num].gpio_pin;
    14ee:	4d6e      	ldr	r5, [pc, #440]	; (16a8 <app_gen_io_init+0x290>)
        config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    14f0:	2601      	movs	r6, #1
        config_extint_chan.gpio_pin           = Channel[num].gpio_pin;
    14f2:	2316      	movs	r3, #22
    14f4:	4363      	muls	r3, r4
    14f6:	5b59      	ldrh	r1, [r3, r5]
    14f8:	18eb      	adds	r3, r5, r3
    14fa:	885a      	ldrh	r2, [r3, #2]
    14fc:	0412      	lsls	r2, r2, #16
    14fe:	430a      	orrs	r2, r1
    1500:	9200      	str	r2, [sp, #0]
        config_extint_chan.gpio_pin_mux       = Channel[num].gpio_eic_mux;
    1502:	8899      	ldrh	r1, [r3, #4]
    1504:	88da      	ldrh	r2, [r3, #6]
    1506:	0412      	lsls	r2, r2, #16
    1508:	430a      	orrs	r2, r1
    150a:	9201      	str	r2, [sp, #4]
        config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    150c:	466a      	mov	r2, sp
    150e:	7216      	strb	r6, [r2, #8]
        config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    1510:	2203      	movs	r2, #3
    1512:	4669      	mov	r1, sp
    1514:	72ca      	strb	r2, [r1, #11]
        extint_chan_set_config(Channel[num].gpio_eic_line, &config_extint_chan);
    1516:	7a18      	ldrb	r0, [r3, #8]
    1518:	4b64      	ldr	r3, [pc, #400]	; (16ac <app_gen_io_init+0x294>)
    151a:	4798      	blx	r3
    for(int num = 0; num < CH_COUNT; num++)
    151c:	3401      	adds	r4, #1
    151e:	2c0c      	cmp	r4, #12
    1520:	d1e7      	bne.n	14f2 <app_gen_io_init+0xda>
    pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1522:	ac03      	add	r4, sp, #12
    1524:	2600      	movs	r6, #0
    1526:	7026      	strb	r6, [r4, #0]
    pin_conf.input_pull = PORT_PIN_PULL_UP;
    1528:	2301      	movs	r3, #1
    152a:	7063      	strb	r3, [r4, #1]
    port_pin_set_config(POWER_GOOD_PIN, &pin_conf);     // Input Pull UP
    152c:	0021      	movs	r1, r4
    152e:	200b      	movs	r0, #11
    1530:	4d51      	ldr	r5, [pc, #324]	; (1678 <app_gen_io_init+0x260>)
    1532:	47a8      	blx	r5
    port_pin_set_config(nMASTER_PIN, &pin_conf);        // Input Pull-UP
    1534:	0021      	movs	r1, r4
    1536:	2008      	movs	r0, #8
    1538:	47a8      	blx	r5
    pin_conf.input_pull = PORT_PIN_PULL_NONE;
    153a:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(BAT_MON_PIN, &pin_conf);        // Input Pull-None
    153c:	0021      	movs	r1, r4
    153e:	2007      	movs	r0, #7
    1540:	47a8      	blx	r5
    delay_cycles_ms(100);
    1542:	2064      	movs	r0, #100	; 0x64
    1544:	4b5a      	ldr	r3, [pc, #360]	; (16b0 <app_gen_io_init+0x298>)
    1546:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    1548:	4b4c      	ldr	r3, [pc, #304]	; (167c <app_gen_io_init+0x264>)
    154a:	6a1b      	ldr	r3, [r3, #32]
    if (port_pin_get_input_level(POWER_GOOD_PIN))  // High = Power Good, Low = No Power
    154c:	051b      	lsls	r3, r3, #20
    154e:	d400      	bmi.n	1552 <app_gen_io_init+0x13a>
    1550:	e07c      	b.n	164c <app_gen_io_init+0x234>
        amStatus.notCharging = false;
    1552:	4b58      	ldr	r3, [pc, #352]	; (16b4 <app_gen_io_init+0x29c>)
    1554:	781a      	ldrb	r2, [r3, #0]
    1556:	2104      	movs	r1, #4
    1558:	438a      	bics	r2, r1
    155a:	701a      	strb	r2, [r3, #0]
        amStatus.Powered  = POWER_GOOD;
    155c:	781a      	ldrb	r2, [r3, #0]
    155e:	2102      	movs	r1, #2
    1560:	430a      	orrs	r2, r1
    1562:	701a      	strb	r2, [r3, #0]
    amStatus.deepSleep = false;
    1564:	4b53      	ldr	r3, [pc, #332]	; (16b4 <app_gen_io_init+0x29c>)
    1566:	781a      	ldrb	r2, [r3, #0]
    1568:	2108      	movs	r1, #8
    156a:	438a      	bics	r2, r1
    156c:	701a      	strb	r2, [r3, #0]
    amStatus.shutDown  = false;
    156e:	781a      	ldrb	r2, [r3, #0]
    1570:	3108      	adds	r1, #8
    1572:	438a      	bics	r2, r1
    1574:	701a      	strb	r2, [r3, #0]
    amStatus.switchLifted    = false;
    1576:	781a      	ldrb	r2, [r3, #0]
    1578:	3110      	adds	r1, #16
    157a:	438a      	bics	r2, r1
    157c:	701a      	strb	r2, [r3, #0]
    157e:	4b3f      	ldr	r3, [pc, #252]	; (167c <app_gen_io_init+0x264>)
    1580:	6a1b      	ldr	r3, [r3, #32]
    if( port_pin_get_input_level(nMASTER_PIN) )
    1582:	05db      	lsls	r3, r3, #23
    1584:	d56c      	bpl.n	1660 <app_gen_io_init+0x248>
        amStatus.isMaster = AM_NOT_MASTER;
    1586:	4a4b      	ldr	r2, [pc, #300]	; (16b4 <app_gen_io_init+0x29c>)
    1588:	7813      	ldrb	r3, [r2, #0]
    158a:	391f      	subs	r1, #31
    158c:	438b      	bics	r3, r1
    158e:	7013      	strb	r3, [r2, #0]
        app_arm_set_PowerTamper_armed(SYSTEM_DISARMED);
    1590:	2000      	movs	r0, #0
    1592:	4b49      	ldr	r3, [pc, #292]	; (16b8 <app_gen_io_init+0x2a0>)
    1594:	4798      	blx	r3
        app_arm_clear_PowerTamper_alarm();
    1596:	4b49      	ldr	r3, [pc, #292]	; (16bc <app_gen_io_init+0x2a4>)
    1598:	4798      	blx	r3
    extint_register_callback(extint_callback_power_good, POWER_GOOD_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    159a:	2200      	movs	r2, #0
    159c:	210b      	movs	r1, #11
    159e:	4848      	ldr	r0, [pc, #288]	; (16c0 <app_gen_io_init+0x2a8>)
    15a0:	4c48      	ldr	r4, [pc, #288]	; (16c4 <app_gen_io_init+0x2ac>)
    15a2:	47a0      	blx	r4
    extint_chan_enable_callback(POWER_GOOD_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15a4:	2100      	movs	r1, #0
    15a6:	200b      	movs	r0, #11
    15a8:	4d47      	ldr	r5, [pc, #284]	; (16c8 <app_gen_io_init+0x2b0>)
    15aa:	47a8      	blx	r5
    extint_register_callback(extint_callback_debounce_nDISARM, nDISARM_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15ac:	2200      	movs	r2, #0
    15ae:	2109      	movs	r1, #9
    15b0:	4846      	ldr	r0, [pc, #280]	; (16cc <app_gen_io_init+0x2b4>)
    15b2:	47a0      	blx	r4
    extint_chan_enable_callback(nDISARM_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15b4:	2100      	movs	r1, #0
    15b6:	2009      	movs	r0, #9
    15b8:	47a8      	blx	r5
    extint_register_callback(extint_callback_debounceCh_00, CHANNEL_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15ba:	2200      	movs	r2, #0
    15bc:	2108      	movs	r1, #8
    15be:	4844      	ldr	r0, [pc, #272]	; (16d0 <app_gen_io_init+0x2b8>)
    15c0:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_01, CHANNEL_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15c2:	2200      	movs	r2, #0
    15c4:	210f      	movs	r1, #15
    15c6:	4843      	ldr	r0, [pc, #268]	; (16d4 <app_gen_io_init+0x2bc>)
    15c8:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_02, CHANNEL_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15ca:	2200      	movs	r2, #0
    15cc:	210d      	movs	r1, #13
    15ce:	4842      	ldr	r0, [pc, #264]	; (16d8 <app_gen_io_init+0x2c0>)
    15d0:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_03, CHANNEL_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15d2:	2200      	movs	r2, #0
    15d4:	210c      	movs	r1, #12
    15d6:	4841      	ldr	r0, [pc, #260]	; (16dc <app_gen_io_init+0x2c4>)
    15d8:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_04, CHANNEL_4_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15da:	2200      	movs	r2, #0
    15dc:	2107      	movs	r1, #7
    15de:	4840      	ldr	r0, [pc, #256]	; (16e0 <app_gen_io_init+0x2c8>)
    15e0:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_05, CHANNEL_5_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15e2:	2200      	movs	r2, #0
    15e4:	2106      	movs	r1, #6
    15e6:	483f      	ldr	r0, [pc, #252]	; (16e4 <app_gen_io_init+0x2cc>)
    15e8:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_06, CHANNEL_6_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15ea:	2200      	movs	r2, #0
    15ec:	2101      	movs	r1, #1
    15ee:	483e      	ldr	r0, [pc, #248]	; (16e8 <app_gen_io_init+0x2d0>)
    15f0:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_07, CHANNEL_7_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15f2:	2200      	movs	r2, #0
    15f4:	2100      	movs	r1, #0
    15f6:	483d      	ldr	r0, [pc, #244]	; (16ec <app_gen_io_init+0x2d4>)
    15f8:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_08, CHANNEL_8_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15fa:	2200      	movs	r2, #0
    15fc:	210e      	movs	r1, #14
    15fe:	483c      	ldr	r0, [pc, #240]	; (16f0 <app_gen_io_init+0x2d8>)
    1600:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_09, CHANNEL_9_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    1602:	2200      	movs	r2, #0
    1604:	2104      	movs	r1, #4
    1606:	483b      	ldr	r0, [pc, #236]	; (16f4 <app_gen_io_init+0x2dc>)
    1608:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_10, CHANNEL_10_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    160a:	2200      	movs	r2, #0
    160c:	2103      	movs	r1, #3
    160e:	483a      	ldr	r0, [pc, #232]	; (16f8 <app_gen_io_init+0x2e0>)
    1610:	47a0      	blx	r4
    extint_register_callback(extint_callback_debounceCh_11, CHANNEL_11_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    1612:	2200      	movs	r2, #0
    1614:	2102      	movs	r1, #2
    1616:	4839      	ldr	r0, [pc, #228]	; (16fc <app_gen_io_init+0x2e4>)
    1618:	47a0      	blx	r4
    for (int num; num < CH_COUNT; num++)
    161a:	2400      	movs	r4, #0
        extint_chan_enable_callback(Channel[num].gpio_eic_line, EXTINT_CALLBACK_TYPE_DETECT);  
    161c:	4f22      	ldr	r7, [pc, #136]	; (16a8 <app_gen_io_init+0x290>)
    161e:	2616      	movs	r6, #22
    1620:	4d29      	ldr	r5, [pc, #164]	; (16c8 <app_gen_io_init+0x2b0>)
    1622:	0033      	movs	r3, r6
    1624:	4363      	muls	r3, r4
    1626:	18fb      	adds	r3, r7, r3
    1628:	7a18      	ldrb	r0, [r3, #8]
    162a:	2100      	movs	r1, #0
    162c:	47a8      	blx	r5
    for (int num; num < CH_COUNT; num++)
    162e:	3401      	adds	r4, #1
    1630:	2c0c      	cmp	r4, #12
    1632:	d1f6      	bne.n	1622 <app_gen_io_init+0x20a>
    pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1634:	a903      	add	r1, sp, #12
    1636:	2400      	movs	r4, #0
    1638:	704c      	strb	r4, [r1, #1]
    port_pin_set_config(BAT_MON_PIN, &pin_conf);
    163a:	2007      	movs	r0, #7
    163c:	4b0e      	ldr	r3, [pc, #56]	; (1678 <app_gen_io_init+0x260>)
    163e:	4798      	blx	r3
    ShelfStorageMessageSent = false;
    1640:	4b2f      	ldr	r3, [pc, #188]	; (1700 <app_gen_io_init+0x2e8>)
    1642:	701c      	strb	r4, [r3, #0]
}
    1644:	b004      	add	sp, #16
    1646:	bc04      	pop	{r2}
    1648:	4690      	mov	r8, r2
    164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        amStatus.notCharging = true;  // Charging refers to MTI product internal battery, not device being secured.
    164c:	4b19      	ldr	r3, [pc, #100]	; (16b4 <app_gen_io_init+0x29c>)
    164e:	781a      	ldrb	r2, [r3, #0]
    1650:	2104      	movs	r1, #4
    1652:	430a      	orrs	r2, r1
    1654:	701a      	strb	r2, [r3, #0]
        amStatus.Powered  = POWER_NOT_GOOD;
    1656:	781a      	ldrb	r2, [r3, #0]
    1658:	2102      	movs	r1, #2
    165a:	438a      	bics	r2, r1
    165c:	701a      	strb	r2, [r3, #0]
    165e:	e781      	b.n	1564 <app_gen_io_init+0x14c>
        amStatus.isMaster = AM_IS_MASTER;
    1660:	4a14      	ldr	r2, [pc, #80]	; (16b4 <app_gen_io_init+0x29c>)
    1662:	7813      	ldrb	r3, [r2, #0]
    1664:	2101      	movs	r1, #1
    1666:	430b      	orrs	r3, r1
    1668:	7013      	strb	r3, [r2, #0]
        app_arm_set_PowerTamper_armed(SYSTEM_ARMED);
    166a:	2001      	movs	r0, #1
    166c:	4b12      	ldr	r3, [pc, #72]	; (16b8 <app_gen_io_init+0x2a0>)
    166e:	4798      	blx	r3
        app_arm_clear_PowerTamper_alarm();
    1670:	4b12      	ldr	r3, [pc, #72]	; (16bc <app_gen_io_init+0x2a4>)
    1672:	4798      	blx	r3
    1674:	e791      	b.n	159a <app_gen_io_init+0x182>
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	00004bc5 	.word	0x00004bc5
    167c:	41004400 	.word	0x41004400
    1680:	00001351 	.word	0x00001351
    1684:	000024b5 	.word	0x000024b5
    1688:	20000680 	.word	0x20000680
    168c:	000012a1 	.word	0x000012a1
    1690:	200006a8 	.word	0x200006a8
    1694:	00000b4d 	.word	0x00000b4d
    1698:	200006bc 	.word	0x200006bc
    169c:	00000b41 	.word	0x00000b41
    16a0:	20000694 	.word	0x20000694
    16a4:	00001261 	.word	0x00001261
    16a8:	20000004 	.word	0x20000004
    16ac:	000024c9 	.word	0x000024c9
    16b0:	00004b2d 	.word	0x00004b2d
    16b4:	20000ad8 	.word	0x20000ad8
    16b8:	0000027d 	.word	0x0000027d
    16bc:	0000029d 	.word	0x0000029d
    16c0:	00001235 	.word	0x00001235
    16c4:	00002541 	.word	0x00002541
    16c8:	0000256d 	.word	0x0000256d
    16cc:	00001219 	.word	0x00001219
    16d0:	000011fd 	.word	0x000011fd
    16d4:	000011e1 	.word	0x000011e1
    16d8:	000011c5 	.word	0x000011c5
    16dc:	000011a9 	.word	0x000011a9
    16e0:	0000118d 	.word	0x0000118d
    16e4:	00001171 	.word	0x00001171
    16e8:	00001155 	.word	0x00001155
    16ec:	00001139 	.word	0x00001139
    16f0:	0000111d 	.word	0x0000111d
    16f4:	00001101 	.word	0x00001101
    16f8:	000010e5 	.word	0x000010e5
    16fc:	000010c9 	.word	0x000010c9
    1700:	20000ad4 	.word	0x20000ad4

00001704 <app_gen_io_set_status_deepSleep>:
}
    1704:	4770      	bx	lr
	...

00001708 <app_gen_io_get_nDISARM>:
    1708:	4b02      	ldr	r3, [pc, #8]	; (1714 <app_gen_io_get_nDISARM+0xc>)
    170a:	6a18      	ldr	r0, [r3, #32]
    170c:	0580      	lsls	r0, r0, #22

// LOW = REMAIN DISARMED
// HIGH = CAN ARM
bool app_gen_io_get_nDISARM(void)
{
    return port_pin_get_input_level(nDISARM_PIN);
    170e:	0fc0      	lsrs	r0, r0, #31
}
    1710:	4770      	bx	lr
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	41004400 	.word	0x41004400

00001718 <app_gen_io_get_AM_status>:

////////////////////////////////////////////////////////////////
// This function returns the UNIT status bits
uint16_t app_gen_io_get_AM_status(void)
{
    return amStatus.sAlarmModule;
    1718:	4b02      	ldr	r3, [pc, #8]	; (1724 <app_gen_io_get_AM_status+0xc>)
    171a:	7818      	ldrb	r0, [r3, #0]
    171c:	785b      	ldrb	r3, [r3, #1]
    171e:	021b      	lsls	r3, r3, #8
    1720:	4318      	orrs	r0, r3
}
    1722:	4770      	bx	lr
    1724:	20000ad8 	.word	0x20000ad8

00001728 <app_gen_io_get_Channel_Status>:


////////////////////////////////////////////////////////////////
uint16_t app_gen_io_get_Channel_Status(uint16_t num)
{
    return Channel[num].portStat.sPort;
    1728:	2316      	movs	r3, #22
    172a:	4343      	muls	r3, r0
    172c:	4802      	ldr	r0, [pc, #8]	; (1738 <app_gen_io_get_Channel_Status+0x10>)
    172e:	18c0      	adds	r0, r0, r3
    1730:	8a80      	ldrh	r0, [r0, #20]
    1732:	b280      	uxth	r0, r0
}
    1734:	4770      	bx	lr
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	20000004 	.word	0x20000004

0000173c <app_gen_io_is_power_good>:


////////////////////////////////////////////////////////////////
bool app_gen_io_is_power_good(void)
{
    173c:	b510      	push	{r4, lr}
    if( !SYS_TimerStarted(&debouncePowerGoodTimer) )
    173e:	480f      	ldr	r0, [pc, #60]	; (177c <app_gen_io_is_power_good+0x40>)
    1740:	4b0f      	ldr	r3, [pc, #60]	; (1780 <app_gen_io_is_power_good+0x44>)
    1742:	4798      	blx	r3
    1744:	2800      	cmp	r0, #0
    1746:	d107      	bne.n	1758 <app_gen_io_is_power_good+0x1c>
    1748:	4b0e      	ldr	r3, [pc, #56]	; (1784 <app_gen_io_is_power_good+0x48>)
    174a:	6a1b      	ldr	r3, [r3, #32]
    {
        // The de-bounce timer is not running. Check to see if we need to start it.
        if(port_pin_get_input_level(POWER_GOOD_PIN)) // Low = No Power, High = Power Good
    174c:	051b      	lsls	r3, r3, #20
    174e:	d50c      	bpl.n	176a <app_gen_io_is_power_good+0x2e>
        {
            if( POWER_NOT_GOOD == amStatus.Powered )
    1750:	4b0d      	ldr	r3, [pc, #52]	; (1788 <app_gen_io_is_power_good+0x4c>)
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	079b      	lsls	r3, r3, #30
    1756:	d504      	bpl.n	1762 <app_gen_io_is_power_good+0x26>
            }
        }
    }
    
    // Regardless of whether we (re)start the timer, we use the de-bounced value.
    return (amStatus.Powered);
    1758:	4b0b      	ldr	r3, [pc, #44]	; (1788 <app_gen_io_is_power_good+0x4c>)
    175a:	7818      	ldrb	r0, [r3, #0]
    175c:	0780      	lsls	r0, r0, #30
    175e:	0fc0      	lsrs	r0, r0, #31
}
    1760:	bd10      	pop	{r4, pc}
                SYS_TimerStart(&debouncePowerGoodTimer);
    1762:	4806      	ldr	r0, [pc, #24]	; (177c <app_gen_io_is_power_good+0x40>)
    1764:	4b09      	ldr	r3, [pc, #36]	; (178c <app_gen_io_is_power_good+0x50>)
    1766:	4798      	blx	r3
    1768:	e7f6      	b.n	1758 <app_gen_io_is_power_good+0x1c>
            if( POWER_NOT_GOOD == amStatus.Powered )
    176a:	4b07      	ldr	r3, [pc, #28]	; (1788 <app_gen_io_is_power_good+0x4c>)
    176c:	781b      	ldrb	r3, [r3, #0]
    176e:	079b      	lsls	r3, r3, #30
    1770:	d4f2      	bmi.n	1758 <app_gen_io_is_power_good+0x1c>
                SYS_TimerStart(&debouncePowerGoodTimer);
    1772:	4802      	ldr	r0, [pc, #8]	; (177c <app_gen_io_is_power_good+0x40>)
    1774:	4b05      	ldr	r3, [pc, #20]	; (178c <app_gen_io_is_power_good+0x50>)
    1776:	4798      	blx	r3
    1778:	e7ee      	b.n	1758 <app_gen_io_is_power_good+0x1c>
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	20000680 	.word	0x20000680
    1780:	0000311d 	.word	0x0000311d
    1784:	41004400 	.word	0x41004400
    1788:	20000ad8 	.word	0x20000ad8
    178c:	00003159 	.word	0x00003159

00001790 <app_gen_io_is_cable_present>:
bool app_gen_io_is_cable_present(uint8_t portNum)
{
    if(portNum >= CH_COUNT)
    {
        // Invalid Channel
        return false;
    1790:	2300      	movs	r3, #0
    if(portNum >= CH_COUNT)
    1792:	280b      	cmp	r0, #11
    1794:	d806      	bhi.n	17a4 <app_gen_io_is_cable_present+0x14>
    }
    
    return (Channel[portNum].portStat.cablePresent);
    1796:	3316      	adds	r3, #22
    1798:	4343      	muls	r3, r0
    179a:	4803      	ldr	r0, [pc, #12]	; (17a8 <app_gen_io_is_cable_present+0x18>)
    179c:	18c0      	adds	r0, r0, r3
    179e:	8a83      	ldrh	r3, [r0, #20]
    17a0:	07db      	lsls	r3, r3, #31
    17a2:	0fdb      	lsrs	r3, r3, #31
}
    17a4:	0018      	movs	r0, r3
    17a6:	4770      	bx	lr
    17a8:	20000004 	.word	0x20000004

000017ac <app_gen_io_is_port_armed>:
bool app_gen_io_is_port_armed(uint8_t portNum)
{
    if(portNum >= CH_COUNT)
    {
        // Invalid Channel
        return false;
    17ac:	2300      	movs	r3, #0
    if(portNum >= CH_COUNT)
    17ae:	280b      	cmp	r0, #11
    17b0:	d806      	bhi.n	17c0 <app_gen_io_is_port_armed+0x14>
    }
    
    return (Channel[portNum].portStat.armed);
    17b2:	3316      	adds	r3, #22
    17b4:	4343      	muls	r3, r0
    17b6:	4803      	ldr	r0, [pc, #12]	; (17c4 <app_gen_io_is_port_armed+0x18>)
    17b8:	18c0      	adds	r0, r0, r3
    17ba:	8a83      	ldrh	r3, [r0, #20]
    17bc:	079b      	lsls	r3, r3, #30
    17be:	0fdb      	lsrs	r3, r3, #31
}
    17c0:	0018      	movs	r0, r3
    17c2:	4770      	bx	lr
    17c4:	20000004 	.word	0x20000004

000017c8 <app_gen_io_set_port_armed>:


////////////////////////////////////////////////////////////////
void app_gen_io_set_port_armed(uint8_t portNum, bool desiredArmState)
{
    17c8:	b510      	push	{r4, lr}
    if(portNum >= CH_COUNT)
    17ca:	280b      	cmp	r0, #11
    17cc:	d811      	bhi.n	17f2 <app_gen_io_set_port_armed+0x2a>
    {
        return;
    }
    
    Channel[portNum].portStat.alarming = DIDNT_ALARM;               // Only true when actually alarming or silent alarming 
    17ce:	2216      	movs	r2, #22
    17d0:	4342      	muls	r2, r0
    17d2:	4b0f      	ldr	r3, [pc, #60]	; (1810 <app_gen_io_set_port_armed+0x48>)
    17d4:	189b      	adds	r3, r3, r2
    17d6:	8a9a      	ldrh	r2, [r3, #20]
    17d8:	2404      	movs	r4, #4
    17da:	43a2      	bics	r2, r4
    17dc:	829a      	strh	r2, [r3, #20]
    
    if( desiredArmState )
    17de:	2900      	cmp	r1, #0
    17e0:	d108      	bne.n	17f4 <app_gen_io_set_port_armed+0x2c>
        Channel[portNum].portStat.armed = SENSOR_ARMED; 
        Channel[portNum].portStat.cablePresent = CABLE_PRESENT; 
    }
    else
    {
        Channel[portNum].portStat.armed = SENSOR_DISARMED;
    17e2:	2316      	movs	r3, #22
    17e4:	4343      	muls	r3, r0
    17e6:	480a      	ldr	r0, [pc, #40]	; (1810 <app_gen_io_set_port_armed+0x48>)
    17e8:	18c0      	adds	r0, r0, r3
    17ea:	8a83      	ldrh	r3, [r0, #20]
    17ec:	2202      	movs	r2, #2
    17ee:	4393      	bics	r3, r2
    17f0:	8283      	strh	r3, [r0, #20]
    }
}
    17f2:	bd10      	pop	{r4, pc}
        Channel[portNum].portStat.armed = SENSOR_ARMED; 
    17f4:	2316      	movs	r3, #22
    17f6:	4343      	muls	r3, r0
    17f8:	4805      	ldr	r0, [pc, #20]	; (1810 <app_gen_io_set_port_armed+0x48>)
    17fa:	18c0      	adds	r0, r0, r3
    17fc:	8a83      	ldrh	r3, [r0, #20]
    17fe:	2202      	movs	r2, #2
    1800:	4313      	orrs	r3, r2
    1802:	8283      	strh	r3, [r0, #20]
        Channel[portNum].portStat.cablePresent = CABLE_PRESENT; 
    1804:	8a83      	ldrh	r3, [r0, #20]
    1806:	2201      	movs	r2, #1
    1808:	4313      	orrs	r3, r2
    180a:	8283      	strh	r3, [r0, #20]
    180c:	e7f1      	b.n	17f2 <app_gen_io_set_port_armed+0x2a>
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	20000004 	.word	0x20000004

00001814 <app_gen_io_is_any_port_armed>:

////////////////////////////////////////////////////////////////
bool app_gen_io_is_any_port_armed(void)
{
    1814:	b530      	push	{r4, r5, lr}
    bool portArmed = PORT_DISARMED; 
    
    for (int num = 0 ; num < CH_COUNT ; num++ )
    1816:	2200      	movs	r2, #0
    bool portArmed = PORT_DISARMED; 
    1818:	2000      	movs	r0, #0
    {
        if(PORT_ARMED == Channel[num].portStat.armed)
    181a:	4d08      	ldr	r5, [pc, #32]	; (183c <app_gen_io_is_any_port_armed+0x28>)
    181c:	2116      	movs	r1, #22
        {
           portArmed = PORT_ARMED;
    181e:	2401      	movs	r4, #1
    1820:	e002      	b.n	1828 <app_gen_io_is_any_port_armed+0x14>
    for (int num = 0 ; num < CH_COUNT ; num++ )
    1822:	3201      	adds	r2, #1
    1824:	2a0c      	cmp	r2, #12
    1826:	d008      	beq.n	183a <app_gen_io_is_any_port_armed+0x26>
        if(PORT_ARMED == Channel[num].portStat.armed)
    1828:	000b      	movs	r3, r1
    182a:	4353      	muls	r3, r2
    182c:	18eb      	adds	r3, r5, r3
    182e:	3310      	adds	r3, #16
    1830:	889b      	ldrh	r3, [r3, #4]
    1832:	079b      	lsls	r3, r3, #30
    1834:	d5f5      	bpl.n	1822 <app_gen_io_is_any_port_armed+0xe>
           portArmed = PORT_ARMED;
    1836:	0020      	movs	r0, r4
    1838:	e7f3      	b.n	1822 <app_gen_io_is_any_port_armed+0xe>
           continue;
        }
    }

    return portArmed;
}
    183a:	bd30      	pop	{r4, r5, pc}
    183c:	20000004 	.word	0x20000004

00001840 <app_led_update>:
// 
//         // And start the special timer for the disarmed flash.
//         SYS_TimerRestart(&appLedDisarmedFlashTimer);
//     }
//     app_ext_gpio_update();
}
    1840:	4770      	bx	lr

00001842 <handleBV>:
//     UART_TX("\n\nBattery Voltage: %d \n", app_bbu_get_battery_level());
//     if (STATUS_BUSY == app_adc_configure(BAT_MON_AIN, app_bbu_battery_check_ADC_complete_callback))
//     {
//         UART_TX("\tADC Busy\n\n");
//     }
}
    1842:	4770      	bx	lr

00001844 <handleSU>:
//     memset(tempStr, '\0', sizeof(tempStr));
//     strncpy(tempStr, &msg[6], 4);
//     uint16_t cs = strtoul(tempStr, 0, 16) & 0xFFFF;
// 
//     app_bootloader_data_handler(UPDATE_COMMAND_START, len, cs, NULL);
}
    1844:	4770      	bx	lr

00001846 <handleSW>:

static void handleSW(char* msg)
{
 //   app_bootloader_data_handler(UPDATE_COMMAND_SWITCH, 0, 0, NULL);
}
    1846:	4770      	bx	lr

00001848 <usart_read_callback>:
{
    1848:	b510      	push	{r4, lr}
    usart_instance.hw->USART.INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    184a:	4b04      	ldr	r3, [pc, #16]	; (185c <usart_read_callback+0x14>)
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	2208      	movs	r2, #8
    1850:	759a      	strb	r2, [r3, #22]
    SYS_TimerRestart(&dmaTimer);
    1852:	4803      	ldr	r0, [pc, #12]	; (1860 <usart_read_callback+0x18>)
    1854:	4b03      	ldr	r3, [pc, #12]	; (1864 <usart_read_callback+0x1c>)
    1856:	4798      	blx	r3
}
    1858:	bd10      	pop	{r4, pc}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	20000900 	.word	0x20000900
    1860:	20000754 	.word	0x20000754
    1864:	00003189 	.word	0x00003189

00001868 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1868:	b570      	push	{r4, r5, r6, lr}
    186a:	b082      	sub	sp, #8
    186c:	0005      	movs	r5, r0
    186e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1870:	2200      	movs	r2, #0
    1872:	466b      	mov	r3, sp
    1874:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1876:	4c06      	ldr	r4, [pc, #24]	; (1890 <usart_serial_getchar+0x28>)
    1878:	466b      	mov	r3, sp
    187a:	1d99      	adds	r1, r3, #6
    187c:	0028      	movs	r0, r5
    187e:	47a0      	blx	r4
    1880:	2800      	cmp	r0, #0
    1882:	d1f9      	bne.n	1878 <usart_serial_getchar+0x10>

	*c = temp;
    1884:	466b      	mov	r3, sp
    1886:	3306      	adds	r3, #6
    1888:	881b      	ldrh	r3, [r3, #0]
    188a:	7033      	strb	r3, [r6, #0]
}
    188c:	b002      	add	sp, #8
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	000046b3 	.word	0x000046b3

00001894 <usart_serial_putchar>:
{
    1894:	b570      	push	{r4, r5, r6, lr}
    1896:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1898:	b28c      	uxth	r4, r1
    189a:	4e03      	ldr	r6, [pc, #12]	; (18a8 <usart_serial_putchar+0x14>)
    189c:	0021      	movs	r1, r4
    189e:	0028      	movs	r0, r5
    18a0:	47b0      	blx	r6
    18a2:	2800      	cmp	r0, #0
    18a4:	d1fa      	bne.n	189c <usart_serial_putchar+0x8>
}
    18a6:	bd70      	pop	{r4, r5, r6, pc}
    18a8:	0000468d 	.word	0x0000468d

000018ac <UART_TX>:
{
    usart_write_buffer_wait(&usart_instance, (uint8_t*)tx_buffer, strnlen(tx_buffer, TX_BUFFER_LENGTH));
}

bool UART_TX(const char* transmitString, ...)
{
    18ac:	b40f      	push	{r0, r1, r2, r3}
    18ae:	b530      	push	{r4, r5, lr}
    18b0:	b0c3      	sub	sp, #268	; 0x10c
    if ((usart_instance.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE))
    18b2:	4b0f      	ldr	r3, [pc, #60]	; (18f0 <UART_TX+0x44>)
    18b4:	681b      	ldr	r3, [r3, #0]
    18b6:	681b      	ldr	r3, [r3, #0]
        va_end(args);

        return true;
    }

    return false;
    18b8:	2000      	movs	r0, #0
    if ((usart_instance.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE))
    18ba:	079b      	lsls	r3, r3, #30
    18bc:	d404      	bmi.n	18c8 <UART_TX+0x1c>
}
    18be:	b043      	add	sp, #268	; 0x10c
    18c0:	bc30      	pop	{r4, r5}
    18c2:	bc08      	pop	{r3}
    18c4:	b004      	add	sp, #16
    18c6:	4718      	bx	r3
        va_start(args, transmitString);
    18c8:	ab47      	add	r3, sp, #284	; 0x11c
    18ca:	9301      	str	r3, [sp, #4]
        vsnprintf(UART_TX_tx_buffer, TX_BUFFER_LENGTH, transmitString, args);
    18cc:	2480      	movs	r4, #128	; 0x80
    18ce:	0064      	lsls	r4, r4, #1
    18d0:	9a46      	ldr	r2, [sp, #280]	; 0x118
    18d2:	0021      	movs	r1, r4
    18d4:	a802      	add	r0, sp, #8
    18d6:	4d07      	ldr	r5, [pc, #28]	; (18f4 <UART_TX+0x48>)
    18d8:	47a8      	blx	r5
                                strnlen(UART_TX_tx_buffer, TX_BUFFER_LENGTH));  // Transmit the buffer
    18da:	0021      	movs	r1, r4
    18dc:	a802      	add	r0, sp, #8
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <UART_TX+0x4c>)
    18e0:	4798      	blx	r3
        usart_write_buffer_wait(&usart_instance, (uint8_t*)UART_TX_tx_buffer,
    18e2:	b282      	uxth	r2, r0
    18e4:	a902      	add	r1, sp, #8
    18e6:	4802      	ldr	r0, [pc, #8]	; (18f0 <UART_TX+0x44>)
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <UART_TX+0x50>)
    18ea:	4798      	blx	r3
        return true;
    18ec:	2001      	movs	r0, #1
    18ee:	e7e6      	b.n	18be <UART_TX+0x12>
    18f0:	20000900 	.word	0x20000900
    18f4:	00006009 	.word	0x00006009
    18f8:	00005e65 	.word	0x00005e65
    18fc:	0000471d 	.word	0x0000471d

00001900 <app_uart_enable>:
{
    1900:	b5f0      	push	{r4, r5, r6, r7, lr}
    1902:	46c6      	mov	lr, r8
    1904:	b500      	push	{lr}
    1906:	b098      	sub	sp, #96	; 0x60
    printDebugData            = false;
    1908:	2400      	movs	r4, #0
    190a:	2500      	movs	r5, #0
    190c:	4b66      	ldr	r3, [pc, #408]	; (1aa8 <app_uart_enable+0x1a8>)
    190e:	701c      	strb	r4, [r3, #0]
    vpCircBuf_init(&rxCircBuff, rxBuff, CIRC_BUFFER_SIZE);
    1910:	2280      	movs	r2, #128	; 0x80
    1912:	0052      	lsls	r2, r2, #1
    1914:	4965      	ldr	r1, [pc, #404]	; (1aac <app_uart_enable+0x1ac>)
    1916:	4866      	ldr	r0, [pc, #408]	; (1ab0 <app_uart_enable+0x1b0>)
    1918:	4b66      	ldr	r3, [pc, #408]	; (1ab4 <app_uart_enable+0x1b4>)
    191a:	4798      	blx	r3
    dmaTimer.interval = 25;
    191c:	4b66      	ldr	r3, [pc, #408]	; (1ab8 <app_uart_enable+0x1b8>)
    191e:	2219      	movs	r2, #25
    1920:	609a      	str	r2, [r3, #8]
    dmaTimer.mode     = SYS_TIMER_INTERVAL_MODE;
    1922:	731c      	strb	r4, [r3, #12]
    dmaTimer.handler  = dmaTimerHandler;
    1924:	4a65      	ldr	r2, [pc, #404]	; (1abc <app_uart_enable+0x1bc>)
    1926:	611a      	str	r2, [r3, #16]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1928:	ab08      	add	r3, sp, #32
    192a:	2280      	movs	r2, #128	; 0x80
    192c:	05d2      	lsls	r2, r2, #23
    192e:	9208      	str	r2, [sp, #32]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1930:	605c      	str	r4, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1932:	22ff      	movs	r2, #255	; 0xff
    1934:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1936:	729c      	strb	r4, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1938:	72dc      	strb	r4, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    193a:	3afe      	subs	r2, #254	; 0xfe
    193c:	2124      	movs	r1, #36	; 0x24
    193e:	545a      	strb	r2, [r3, r1]
	config->transmitter_enable = true;
    1940:	3101      	adds	r1, #1
    1942:	545a      	strb	r2, [r3, r1]
	config->clock_polarity_inverted = false;
    1944:	3101      	adds	r1, #1
    1946:	545c      	strb	r4, [r3, r1]
	config->use_external_clock = false;
    1948:	3101      	adds	r1, #1
    194a:	545c      	strb	r4, [r3, r1]
	config->ext_clock_freq   = 0;
    194c:	629c      	str	r4, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    194e:	3105      	adds	r1, #5
    1950:	545c      	strb	r4, [r3, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1952:	615c      	str	r4, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1954:	821c      	strh	r4, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1956:	2100      	movs	r1, #0
    1958:	76d9      	strb	r1, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    195a:	761d      	strb	r5, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    195c:	765d      	strb	r5, [r3, #25]
	config->receive_pulse_length                    = 19;
    195e:	2113      	movs	r1, #19
    1960:	7699      	strb	r1, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1962:	775d      	strb	r5, [r3, #29]
    config_usart.generator_source             = GCLK_GENERATOR_5;
    1964:	2005      	movs	r0, #5
    1966:	311a      	adds	r1, #26
    1968:	5458      	strb	r0, [r3, r1]
    config_usart.start_frame_detection_enable = true;
    196a:	771a      	strb	r2, [r3, #28]
    config_usart.baudrate                     = DEBUG_UART_BAUDRATE;
    196c:	22e1      	movs	r2, #225	; 0xe1
    196e:	0252      	lsls	r2, r2, #9
    1970:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting                  = DEBUG_UART_SERCOM_MUX_SETTING;
    1972:	22c4      	movs	r2, #196	; 0xc4
    1974:	0392      	lsls	r2, r2, #14
    1976:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0                  = DEBUG_UART_SERCOM_PINMUX_PAD0;
    1978:	2201      	movs	r2, #1
    197a:	4252      	negs	r2, r2
    197c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1                  = DEBUG_UART_SERCOM_PINMUX_PAD1;
    197e:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2                  = DEBUG_UART_SERCOM_PINMUX_PAD2;
    1980:	4a4f      	ldr	r2, [pc, #316]	; (1ac0 <app_uart_enable+0x1c0>)
    1982:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3                  = DEBUG_UART_SERCOM_PINMUX_PAD3;
    1984:	4a4f      	ldr	r2, [pc, #316]	; (1ac4 <app_uart_enable+0x1c4>)
    1986:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, DEBUG_UART_MODULE, &config_usart) != STATUS_OK)
    1988:	4d4f      	ldr	r5, [pc, #316]	; (1ac8 <app_uart_enable+0x1c8>)
    198a:	4c50      	ldr	r4, [pc, #320]	; (1acc <app_uart_enable+0x1cc>)
    198c:	aa08      	add	r2, sp, #32
    198e:	4950      	ldr	r1, [pc, #320]	; (1ad0 <app_uart_enable+0x1d0>)
    1990:	0028      	movs	r0, r5
    1992:	47a0      	blx	r4
    1994:	2800      	cmp	r0, #0
    1996:	d1f9      	bne.n	198c <app_uart_enable+0x8c>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1998:	4c4b      	ldr	r4, [pc, #300]	; (1ac8 <app_uart_enable+0x1c8>)
    199a:	4b4e      	ldr	r3, [pc, #312]	; (1ad4 <app_uart_enable+0x1d4>)
    199c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    199e:	4a4e      	ldr	r2, [pc, #312]	; (1ad8 <app_uart_enable+0x1d8>)
    19a0:	4b4e      	ldr	r3, [pc, #312]	; (1adc <app_uart_enable+0x1dc>)
    19a2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    19a4:	4a4e      	ldr	r2, [pc, #312]	; (1ae0 <app_uart_enable+0x1e0>)
    19a6:	4b4f      	ldr	r3, [pc, #316]	; (1ae4 <app_uart_enable+0x1e4>)
    19a8:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    19aa:	aa08      	add	r2, sp, #32
    19ac:	4948      	ldr	r1, [pc, #288]	; (1ad0 <app_uart_enable+0x1d0>)
    19ae:	0020      	movs	r0, r4
    19b0:	4b46      	ldr	r3, [pc, #280]	; (1acc <app_uart_enable+0x1cc>)
    19b2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    19b4:	4e4c      	ldr	r6, [pc, #304]	; (1ae8 <app_uart_enable+0x1e8>)
    19b6:	6833      	ldr	r3, [r6, #0]
    19b8:	6898      	ldr	r0, [r3, #8]
    19ba:	2100      	movs	r1, #0
    19bc:	4d4b      	ldr	r5, [pc, #300]	; (1aec <app_uart_enable+0x1ec>)
    19be:	47a8      	blx	r5
	setbuf(stdin, NULL);
    19c0:	6833      	ldr	r3, [r6, #0]
    19c2:	6858      	ldr	r0, [r3, #4]
    19c4:	2100      	movs	r1, #0
    19c6:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19c8:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    19ca:	0028      	movs	r0, r5
    19cc:	4b48      	ldr	r3, [pc, #288]	; (1af0 <app_uart_enable+0x1f0>)
    19ce:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19d0:	231f      	movs	r3, #31
    19d2:	4018      	ands	r0, r3
    19d4:	3b1e      	subs	r3, #30
    19d6:	4083      	lsls	r3, r0
    19d8:	4a46      	ldr	r2, [pc, #280]	; (1af4 <app_uart_enable+0x1f4>)
    19da:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    19dc:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    19de:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    19e0:	2b00      	cmp	r3, #0
    19e2:	d1fc      	bne.n	19de <app_uart_enable+0xde>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19e4:	682b      	ldr	r3, [r5, #0]
    19e6:	2202      	movs	r2, #2
    19e8:	4690      	mov	r8, r2
    19ea:	4313      	orrs	r3, r2
    19ec:	602b      	str	r3, [r5, #0]
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_START_RECEIVED);
    19ee:	4c36      	ldr	r4, [pc, #216]	; (1ac8 <app_uart_enable+0x1c8>)
    19f0:	3203      	adds	r2, #3
    19f2:	4941      	ldr	r1, [pc, #260]	; (1af8 <app_uart_enable+0x1f8>)
    19f4:	0020      	movs	r0, r4
    19f6:	4e41      	ldr	r6, [pc, #260]	; (1afc <app_uart_enable+0x1fc>)
    19f8:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    19fa:	2531      	movs	r5, #49	; 0x31
    19fc:	5d63      	ldrb	r3, [r4, r5]
    19fe:	2220      	movs	r2, #32
    1a00:	4313      	orrs	r3, r2
    1a02:	5563      	strb	r3, [r4, r5]
    usart_register_callback(&usart_instance, usart_error_callback, USART_CALLBACK_ERROR);
    1a04:	2202      	movs	r2, #2
    1a06:	493e      	ldr	r1, [pc, #248]	; (1b00 <app_uart_enable+0x200>)
    1a08:	0020      	movs	r0, r4
    1a0a:	47b0      	blx	r6
    1a0c:	5d63      	ldrb	r3, [r4, r5]
    1a0e:	2204      	movs	r2, #4
    1a10:	4313      	orrs	r3, r2
    1a12:	5563      	strb	r3, [r4, r5]
    usart_instance.hw->USART.INTFLAG.reg  = SERCOM_USART_INTFLAG_RXS;
    1a14:	6823      	ldr	r3, [r4, #0]
    1a16:	2208      	movs	r2, #8
    1a18:	761a      	strb	r2, [r3, #24]
    usart_instance.hw->USART.INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1a1a:	759a      	strb	r2, [r3, #22]
    dma_get_config_defaults(&config_dma_resource_rx);
    1a1c:	ae06      	add	r6, sp, #24
    1a1e:	0030      	movs	r0, r6
    1a20:	4b38      	ldr	r3, [pc, #224]	; (1b04 <app_uart_enable+0x204>)
    1a22:	4798      	blx	r3
    config_dma_resource_rx.peripheral_trigger = DEBUG_UART_SERCOM_DMAC_ID_RX;
    1a24:	2303      	movs	r3, #3
    1a26:	7073      	strb	r3, [r6, #1]
    config_dma_resource_rx.trigger_action     = DMA_TRIGGER_ACTION_BEAT;  // DMA_TRIGGER_ACTION_BEAT;
    1a28:	2702      	movs	r7, #2
    1a2a:	4643      	mov	r3, r8
    1a2c:	70b3      	strb	r3, [r6, #2]
    dma_allocate(&usart_dma_resource_rx, &config_dma_resource_rx);
    1a2e:	4d36      	ldr	r5, [pc, #216]	; (1b08 <app_uart_enable+0x208>)
    1a30:	0031      	movs	r1, r6
    1a32:	0028      	movs	r0, r5
    1a34:	4b35      	ldr	r3, [pc, #212]	; (1b0c <app_uart_enable+0x20c>)
    1a36:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    1a38:	2201      	movs	r2, #1
    1a3a:	466b      	mov	r3, sp
    1a3c:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1a3e:	2300      	movs	r3, #0
    1a40:	4669      	mov	r1, sp
    1a42:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1a44:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1a46:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
	/* Enable destination increment */
	config->dst_increment_enable = true;
    1a48:	714a      	strb	r2, [r1, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    1a4a:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1a4c:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    1a4e:	9305      	str	r3, [sp, #20]
    config_dma_descriptor.src_increment_enable = false;
    1a50:	710b      	strb	r3, [r1, #4]
    config_dma_descriptor.block_transfer_count = DMA_BUFFER_SIZE;
    1a52:	3380      	adds	r3, #128	; 0x80
    1a54:	810b      	strh	r3, [r1, #8]
    config_dma_descriptor.destination_address  = (uint32_t)dmaBuff + sizeof(dmaBuff);
    1a56:	4b2e      	ldr	r3, [pc, #184]	; (1b10 <app_uart_enable+0x210>)
    1a58:	3380      	adds	r3, #128	; 0x80
    1a5a:	9304      	str	r3, [sp, #16]
    config_dma_descriptor.source_address       = (uint32_t)(&usart_instance.hw->USART.DATA.reg);
    1a5c:	6823      	ldr	r3, [r4, #0]
    1a5e:	3328      	adds	r3, #40	; 0x28
    1a60:	9303      	str	r3, [sp, #12]
    dma_descriptor_create(&usart_dma_descriptor_rx, &config_dma_descriptor);
    1a62:	4c2c      	ldr	r4, [pc, #176]	; (1b14 <app_uart_enable+0x214>)
    1a64:	0020      	movs	r0, r4
    1a66:	4b2c      	ldr	r3, [pc, #176]	; (1b18 <app_uart_enable+0x218>)
    1a68:	4798      	blx	r3
    dma_add_descriptor(&usart_dma_resource_rx, &usart_dma_descriptor_rx);
    1a6a:	0021      	movs	r1, r4
    1a6c:	0028      	movs	r0, r5
    1a6e:	4b2b      	ldr	r3, [pc, #172]	; (1b1c <app_uart_enable+0x21c>)
    1a70:	4798      	blx	r3
	resource->callback[type] = callback;
    1a72:	4b2b      	ldr	r3, [pc, #172]	; (1b20 <app_uart_enable+0x220>)
    1a74:	60ab      	str	r3, [r5, #8]
	resource->callback_enable |= 1 << type;
    1a76:	7c2b      	ldrb	r3, [r5, #16]
    1a78:	433b      	orrs	r3, r7
    1a7a:	742b      	strb	r3, [r5, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1a7c:	782a      	ldrb	r2, [r5, #0]
    1a7e:	4929      	ldr	r1, [pc, #164]	; (1b24 <app_uart_enable+0x224>)
    1a80:	5c8b      	ldrb	r3, [r1, r2]
    1a82:	433b      	orrs	r3, r7
    1a84:	548b      	strb	r3, [r1, r2]
    uint8_t dmaStartStatus = dma_start_transfer_job(&usart_dma_resource_rx);
    1a86:	0028      	movs	r0, r5
    1a88:	4b27      	ldr	r3, [pc, #156]	; (1b28 <app_uart_enable+0x228>)
    1a8a:	4798      	blx	r3
    if (dmaStartStatus != STATUS_OK)
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d106      	bne.n	1a9e <app_uart_enable+0x19e>
    UART_TX("NG Debug Port Enabled\n");
    1a90:	4826      	ldr	r0, [pc, #152]	; (1b2c <app_uart_enable+0x22c>)
    1a92:	4b27      	ldr	r3, [pc, #156]	; (1b30 <app_uart_enable+0x230>)
    1a94:	4798      	blx	r3
}
    1a96:	b018      	add	sp, #96	; 0x60
    1a98:	bc04      	pop	{r2}
    1a9a:	4690      	mov	r8, r2
    1a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        UART_TX("UART DMA Start Transfer Status in app_uart_enable: %02X \n", dmaStartStatus);  // printf could cause a reboot
    1a9e:	0001      	movs	r1, r0
    1aa0:	4824      	ldr	r0, [pc, #144]	; (1b34 <app_uart_enable+0x234>)
    1aa2:	4b23      	ldr	r3, [pc, #140]	; (1b30 <app_uart_enable+0x230>)
    1aa4:	4798      	blx	r3
    1aa6:	e7f3      	b.n	1a90 <app_uart_enable+0x190>
    1aa8:	20000768 	.word	0x20000768
    1aac:	2000076c 	.word	0x2000076c
    1ab0:	2000086c 	.word	0x2000086c
    1ab4:	0000326d 	.word	0x0000326d
    1ab8:	20000754 	.word	0x20000754
    1abc:	00001ba5 	.word	0x00001ba5
    1ac0:	00120002 	.word	0x00120002
    1ac4:	00130002 	.word	0x00130002
    1ac8:	20000900 	.word	0x20000900
    1acc:	00004351 	.word	0x00004351
    1ad0:	42000c00 	.word	0x42000c00
    1ad4:	20000cb8 	.word	0x20000cb8
    1ad8:	00001895 	.word	0x00001895
    1adc:	20000cb4 	.word	0x20000cb4
    1ae0:	00001869 	.word	0x00001869
    1ae4:	20000cb0 	.word	0x20000cb0
    1ae8:	20000208 	.word	0x20000208
    1aec:	00005cc1 	.word	0x00005cc1
    1af0:	000049c9 	.word	0x000049c9
    1af4:	e000e100 	.word	0xe000e100
    1af8:	00001849 	.word	0x00001849
    1afc:	000047d9 	.word	0x000047d9
    1b00:	000023ad 	.word	0x000023ad
    1b04:	00002759 	.word	0x00002759
    1b08:	20000bf0 	.word	0x20000bf0
    1b0c:	00002769 	.word	0x00002769
    1b10:	200006d4 	.word	0x200006d4
    1b14:	20000ae0 	.word	0x20000ae0
    1b18:	000029e1 	.word	0x000029e1
    1b1c:	00002a89 	.word	0x00002a89
    1b20:	00001b39 	.word	0x00001b39
    1b24:	200009a0 	.word	0x200009a0
    1b28:	0000290d 	.word	0x0000290d
    1b2c:	00007674 	.word	0x00007674
    1b30:	000018ad 	.word	0x000018ad
    1b34:	00007638 	.word	0x00007638

00001b38 <transfer_done_rx>:
{
    1b38:	b510      	push	{r4, lr}
    if (SYS_TimerStarted(&dmaTimer))
    1b3a:	480f      	ldr	r0, [pc, #60]	; (1b78 <transfer_done_rx+0x40>)
    1b3c:	4b0f      	ldr	r3, [pc, #60]	; (1b7c <transfer_done_rx+0x44>)
    1b3e:	4798      	blx	r3
    1b40:	2800      	cmp	r0, #0
    1b42:	d105      	bne.n	1b50 <transfer_done_rx+0x18>
    if ((usart_instance.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE))  // Only do this if I have a UART setup
    1b44:	4b0e      	ldr	r3, [pc, #56]	; (1b80 <transfer_done_rx+0x48>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	079b      	lsls	r3, r3, #30
    1b4c:	d404      	bmi.n	1b58 <transfer_done_rx+0x20>
}
    1b4e:	bd10      	pop	{r4, pc}
        SYS_TimerStop(&dmaTimer);
    1b50:	4809      	ldr	r0, [pc, #36]	; (1b78 <transfer_done_rx+0x40>)
    1b52:	4b0c      	ldr	r3, [pc, #48]	; (1b84 <transfer_done_rx+0x4c>)
    1b54:	4798      	blx	r3
    1b56:	e7f5      	b.n	1b44 <transfer_done_rx+0xc>
        vpCircBuf_putAll(&rxCircBuff, (const VPCircBuf_Element*)dmaBuff, DMA_BUFFER_SIZE);
    1b58:	2280      	movs	r2, #128	; 0x80
    1b5a:	490b      	ldr	r1, [pc, #44]	; (1b88 <transfer_done_rx+0x50>)
    1b5c:	480b      	ldr	r0, [pc, #44]	; (1b8c <transfer_done_rx+0x54>)
    1b5e:	4b0c      	ldr	r3, [pc, #48]	; (1b90 <transfer_done_rx+0x58>)
    1b60:	4798      	blx	r3
        uint8_t dmaStartStatus = dma_start_transfer_job(&usart_dma_resource_rx);
    1b62:	480c      	ldr	r0, [pc, #48]	; (1b94 <transfer_done_rx+0x5c>)
    1b64:	4b0c      	ldr	r3, [pc, #48]	; (1b98 <transfer_done_rx+0x60>)
    1b66:	4798      	blx	r3
        if (dmaStartStatus != 0x00)  // if status is not returned as "Okay"
    1b68:	2800      	cmp	r0, #0
    1b6a:	d0f0      	beq.n	1b4e <transfer_done_rx+0x16>
            UART_TX("UART DMA Start Transfer Status in transfer_done_rx: %02X \n",
    1b6c:	0001      	movs	r1, r0
    1b6e:	480b      	ldr	r0, [pc, #44]	; (1b9c <transfer_done_rx+0x64>)
    1b70:	4b0b      	ldr	r3, [pc, #44]	; (1ba0 <transfer_done_rx+0x68>)
    1b72:	4798      	blx	r3
}
    1b74:	e7eb      	b.n	1b4e <transfer_done_rx+0x16>
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	20000754 	.word	0x20000754
    1b7c:	0000311d 	.word	0x0000311d
    1b80:	20000900 	.word	0x20000900
    1b84:	000030c9 	.word	0x000030c9
    1b88:	200006d4 	.word	0x200006d4
    1b8c:	2000086c 	.word	0x2000086c
    1b90:	00003519 	.word	0x00003519
    1b94:	20000bf0 	.word	0x20000bf0
    1b98:	0000290d 	.word	0x0000290d
    1b9c:	00007d74 	.word	0x00007d74
    1ba0:	000018ad 	.word	0x000018ad

00001ba4 <dmaTimerHandler>:
{
    1ba4:	b570      	push	{r4, r5, r6, lr}
    if ((usart_instance.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE))  // Only do this if I have a UART setup
    1ba6:	4b10      	ldr	r3, [pc, #64]	; (1be8 <dmaTimerHandler+0x44>)
    1ba8:	681b      	ldr	r3, [r3, #0]
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	079b      	lsls	r3, r3, #30
    1bae:	d400      	bmi.n	1bb2 <dmaTimerHandler+0xe>
}
    1bb0:	bd70      	pop	{r4, r5, r6, pc}
        cpu_irq_enter_critical();
    1bb2:	4b0e      	ldr	r3, [pc, #56]	; (1bec <dmaTimerHandler+0x48>)
    1bb4:	4798      	blx	r3
        dma_abort_job(&usart_dma_resource_rx);
    1bb6:	4c0e      	ldr	r4, [pc, #56]	; (1bf0 <dmaTimerHandler+0x4c>)
    1bb8:	0020      	movs	r0, r4
    1bba:	4b0e      	ldr	r3, [pc, #56]	; (1bf4 <dmaTimerHandler+0x50>)
    1bbc:	4798      	blx	r3
        if (usart_dma_resource_rx.transfered_size != 0)
    1bbe:	6962      	ldr	r2, [r4, #20]
    1bc0:	2a00      	cmp	r2, #0
    1bc2:	d10c      	bne.n	1bde <dmaTimerHandler+0x3a>
        uint8_t dmaStartStatus = dma_start_transfer_job(&usart_dma_resource_rx);
    1bc4:	480a      	ldr	r0, [pc, #40]	; (1bf0 <dmaTimerHandler+0x4c>)
    1bc6:	4b0c      	ldr	r3, [pc, #48]	; (1bf8 <dmaTimerHandler+0x54>)
    1bc8:	4798      	blx	r3
    1bca:	0004      	movs	r4, r0
        cpu_irq_leave_critical();
    1bcc:	4b0b      	ldr	r3, [pc, #44]	; (1bfc <dmaTimerHandler+0x58>)
    1bce:	4798      	blx	r3
        if (dmaStartStatus != 0x00)  // if status is not returned as "Okay"
    1bd0:	2c00      	cmp	r4, #0
    1bd2:	d0ed      	beq.n	1bb0 <dmaTimerHandler+0xc>
            UART_TX("UART DMA Start Transfer Status in dmaTimerHandler: %02X \n",
    1bd4:	0021      	movs	r1, r4
    1bd6:	480a      	ldr	r0, [pc, #40]	; (1c00 <dmaTimerHandler+0x5c>)
    1bd8:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <dmaTimerHandler+0x60>)
    1bda:	4798      	blx	r3
}
    1bdc:	e7e8      	b.n	1bb0 <dmaTimerHandler+0xc>
            vpCircBuf_putAll(&rxCircBuff, (const VPCircBuf_Element*)dmaBuff, usart_dma_resource_rx.transfered_size);
    1bde:	490a      	ldr	r1, [pc, #40]	; (1c08 <dmaTimerHandler+0x64>)
    1be0:	480a      	ldr	r0, [pc, #40]	; (1c0c <dmaTimerHandler+0x68>)
    1be2:	4b0b      	ldr	r3, [pc, #44]	; (1c10 <dmaTimerHandler+0x6c>)
    1be4:	4798      	blx	r3
    1be6:	e7ed      	b.n	1bc4 <dmaTimerHandler+0x20>
    1be8:	20000900 	.word	0x20000900
    1bec:	00004c79 	.word	0x00004c79
    1bf0:	20000bf0 	.word	0x20000bf0
    1bf4:	00002995 	.word	0x00002995
    1bf8:	0000290d 	.word	0x0000290d
    1bfc:	00004cb9 	.word	0x00004cb9
    1c00:	000076c0 	.word	0x000076c0
    1c04:	000018ad 	.word	0x000018ad
    1c08:	200006d4 	.word	0x200006d4
    1c0c:	2000086c 	.word	0x2000086c
    1c10:	00003519 	.word	0x00003519

00001c14 <app_uart_task>:
{
    1c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c16:	b083      	sub	sp, #12
    if ((usart_instance.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE))
    1c18:	4b5d      	ldr	r3, [pc, #372]	; (1d90 <app_uart_task+0x17c>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	681b      	ldr	r3, [r3, #0]
    1c1e:	079b      	lsls	r3, r3, #30
    1c20:	d401      	bmi.n	1c26 <app_uart_task+0x12>
}
    1c22:	b003      	add	sp, #12
    1c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint16_t rx_data_counter = vpCircBuf_count(&rxCircBuff);
    1c26:	485b      	ldr	r0, [pc, #364]	; (1d94 <app_uart_task+0x180>)
    1c28:	4b5b      	ldr	r3, [pc, #364]	; (1d98 <app_uart_task+0x184>)
    1c2a:	4798      	blx	r3
    1c2c:	b284      	uxth	r4, r0
        while (rx_data_counter > 0)
    1c2e:	2c00      	cmp	r4, #0
    1c30:	d0f7      	beq.n	1c22 <app_uart_task+0xe>
            vpCircBuf_getElement(&rxCircBuff, &rx_data[rx_data_index]);
    1c32:	4f5a      	ldr	r7, [pc, #360]	; (1d9c <app_uart_task+0x188>)
    1c34:	4e5a      	ldr	r6, [pc, #360]	; (1da0 <app_uart_task+0x18c>)
    1c36:	4d57      	ldr	r5, [pc, #348]	; (1d94 <app_uart_task+0x180>)
    1c38:	e038      	b.n	1cac <app_uart_task+0x98>
                    rx_data_index   = 0;
    1c3a:	2300      	movs	r3, #0
    1c3c:	4a58      	ldr	r2, [pc, #352]	; (1da0 <app_uart_task+0x18c>)
    1c3e:	7013      	strb	r3, [r2, #0]
                    update_packet = false;
    1c40:	4a58      	ldr	r2, [pc, #352]	; (1da4 <app_uart_task+0x190>)
    1c42:	7013      	strb	r3, [r2, #0]
                    memset(rx_data, 0, RX_BUFFER_SIZE);  // Clear buffer
    1c44:	2280      	movs	r2, #128	; 0x80
    1c46:	2100      	movs	r1, #0
    1c48:	4854      	ldr	r0, [pc, #336]	; (1d9c <app_uart_task+0x188>)
    1c4a:	4b57      	ldr	r3, [pc, #348]	; (1da8 <app_uart_task+0x194>)
    1c4c:	4798      	blx	r3
    1c4e:	e7e8      	b.n	1c22 <app_uart_task+0xe>
            else if (alt_update_packet && (rx_data_index < UPDATE_PACKET_LENGTH))
    1c50:	4b56      	ldr	r3, [pc, #344]	; (1dac <app_uart_task+0x198>)
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d015      	beq.n	1c84 <app_uart_task+0x70>
    1c58:	4b51      	ldr	r3, [pc, #324]	; (1da0 <app_uart_task+0x18c>)
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	2b43      	cmp	r3, #67	; 0x43
    1c5e:	d811      	bhi.n	1c84 <app_uart_task+0x70>
                rx_data_index++;
    1c60:	3301      	adds	r3, #1
    1c62:	b2db      	uxtb	r3, r3
                if (rx_data_index >= UPDATE_PACKET_LENGTH)
    1c64:	2b43      	cmp	r3, #67	; 0x43
    1c66:	d802      	bhi.n	1c6e <app_uart_task+0x5a>
                rx_data_index++;
    1c68:	4a4d      	ldr	r2, [pc, #308]	; (1da0 <app_uart_task+0x18c>)
    1c6a:	7013      	strb	r3, [r2, #0]
    1c6c:	e01c      	b.n	1ca8 <app_uart_task+0x94>
                    rx_data_index   = 0;
    1c6e:	2300      	movs	r3, #0
    1c70:	4a4b      	ldr	r2, [pc, #300]	; (1da0 <app_uart_task+0x18c>)
    1c72:	7013      	strb	r3, [r2, #0]
                    alt_update_packet = false;
    1c74:	4a4d      	ldr	r2, [pc, #308]	; (1dac <app_uart_task+0x198>)
    1c76:	7013      	strb	r3, [r2, #0]
                    memset(rx_data, 0, RX_BUFFER_SIZE);  // Clear buffer
    1c78:	2280      	movs	r2, #128	; 0x80
    1c7a:	2100      	movs	r1, #0
    1c7c:	4847      	ldr	r0, [pc, #284]	; (1d9c <app_uart_task+0x188>)
    1c7e:	4b4a      	ldr	r3, [pc, #296]	; (1da8 <app_uart_task+0x194>)
    1c80:	4798      	blx	r3
    1c82:	e7ce      	b.n	1c22 <app_uart_task+0xe>
            else if (rx_data[rx_data_index] == 0xaa)
    1c84:	4b46      	ldr	r3, [pc, #280]	; (1da0 <app_uart_task+0x18c>)
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	0019      	movs	r1, r3
    1c8a:	4a44      	ldr	r2, [pc, #272]	; (1d9c <app_uart_task+0x188>)
    1c8c:	5cd2      	ldrb	r2, [r2, r3]
    1c8e:	2aaa      	cmp	r2, #170	; 0xaa
    1c90:	d022      	beq.n	1cd8 <app_uart_task+0xc4>
            else if (rx_data[rx_data_index] == 0xab)
    1c92:	2aab      	cmp	r2, #171	; 0xab
    1c94:	d02c      	beq.n	1cf0 <app_uart_task+0xdc>
            else if (rx_data[rx_data_index] == 0x0D)
    1c96:	2a0d      	cmp	r2, #13
    1c98:	d036      	beq.n	1d08 <app_uart_task+0xf4>
            else if (rx_data[rx_data_index] == 0x08)
    1c9a:	2a08      	cmp	r2, #8
    1c9c:	d066      	beq.n	1d6c <app_uart_task+0x158>
            else if (rx_data_index == (RX_BUFFER_SIZE - 1))
    1c9e:	2b7f      	cmp	r3, #127	; 0x7f
    1ca0:	d06a      	beq.n	1d78 <app_uart_task+0x164>
                rx_data_index++;
    1ca2:	3301      	adds	r3, #1
    1ca4:	4a3e      	ldr	r2, [pc, #248]	; (1da0 <app_uart_task+0x18c>)
    1ca6:	7013      	strb	r3, [r2, #0]
        while (rx_data_counter > 0)
    1ca8:	2c00      	cmp	r4, #0
    1caa:	d0ba      	beq.n	1c22 <app_uart_task+0xe>
            rx_data_counter--;
    1cac:	3c01      	subs	r4, #1
    1cae:	b2a4      	uxth	r4, r4
            vpCircBuf_getElement(&rxCircBuff, &rx_data[rx_data_index]);
    1cb0:	7831      	ldrb	r1, [r6, #0]
    1cb2:	1879      	adds	r1, r7, r1
    1cb4:	0028      	movs	r0, r5
    1cb6:	4b3e      	ldr	r3, [pc, #248]	; (1db0 <app_uart_task+0x19c>)
    1cb8:	4798      	blx	r3
            if (update_packet && (rx_data_index < UPDATE_PACKET_LENGTH))
    1cba:	4b3a      	ldr	r3, [pc, #232]	; (1da4 <app_uart_task+0x190>)
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d0c6      	beq.n	1c50 <app_uart_task+0x3c>
    1cc2:	4b37      	ldr	r3, [pc, #220]	; (1da0 <app_uart_task+0x18c>)
    1cc4:	781b      	ldrb	r3, [r3, #0]
    1cc6:	2b43      	cmp	r3, #67	; 0x43
    1cc8:	d8dc      	bhi.n	1c84 <app_uart_task+0x70>
                rx_data_index++;
    1cca:	3301      	adds	r3, #1
    1ccc:	b2db      	uxtb	r3, r3
                if (rx_data_index >= UPDATE_PACKET_LENGTH)
    1cce:	2b43      	cmp	r3, #67	; 0x43
    1cd0:	d8b3      	bhi.n	1c3a <app_uart_task+0x26>
                rx_data_index++;
    1cd2:	4a33      	ldr	r2, [pc, #204]	; (1da0 <app_uart_task+0x18c>)
    1cd4:	7013      	strb	r3, [r2, #0]
    1cd6:	e7e7      	b.n	1ca8 <app_uart_task+0x94>
                rx_data_index = 0;
    1cd8:	2200      	movs	r2, #0
    1cda:	4b31      	ldr	r3, [pc, #196]	; (1da0 <app_uart_task+0x18c>)
    1cdc:	701a      	strb	r2, [r3, #0]
                memset(rx_data, 0, RX_BUFFER_SIZE);  // Clear buffer
    1cde:	3280      	adds	r2, #128	; 0x80
    1ce0:	2100      	movs	r1, #0
    1ce2:	482e      	ldr	r0, [pc, #184]	; (1d9c <app_uart_task+0x188>)
    1ce4:	4b30      	ldr	r3, [pc, #192]	; (1da8 <app_uart_task+0x194>)
    1ce6:	4798      	blx	r3
                update_packet = true;
    1ce8:	2201      	movs	r2, #1
    1cea:	4b2e      	ldr	r3, [pc, #184]	; (1da4 <app_uart_task+0x190>)
    1cec:	701a      	strb	r2, [r3, #0]
    1cee:	e7db      	b.n	1ca8 <app_uart_task+0x94>
                rx_data_index = 0;
    1cf0:	2200      	movs	r2, #0
    1cf2:	4b2b      	ldr	r3, [pc, #172]	; (1da0 <app_uart_task+0x18c>)
    1cf4:	701a      	strb	r2, [r3, #0]
                memset(rx_data, 0, RX_BUFFER_SIZE);  // Clear buffer
    1cf6:	3280      	adds	r2, #128	; 0x80
    1cf8:	2100      	movs	r1, #0
    1cfa:	4828      	ldr	r0, [pc, #160]	; (1d9c <app_uart_task+0x188>)
    1cfc:	4b2a      	ldr	r3, [pc, #168]	; (1da8 <app_uart_task+0x194>)
    1cfe:	4798      	blx	r3
                alt_update_packet = true;
    1d00:	2201      	movs	r2, #1
    1d02:	4b2a      	ldr	r3, [pc, #168]	; (1dac <app_uart_task+0x198>)
    1d04:	701a      	strb	r2, [r3, #0]
    1d06:	e7cf      	b.n	1ca8 <app_uart_task+0x94>
                rx_data[rx_data_index] = 0;
    1d08:	2300      	movs	r3, #0
    1d0a:	4a24      	ldr	r2, [pc, #144]	; (1d9c <app_uart_task+0x188>)
    1d0c:	5453      	strb	r3, [r2, r1]
                rx_data_index          = 0;
    1d0e:	4a24      	ldr	r2, [pc, #144]	; (1da0 <app_uart_task+0x18c>)
    1d10:	7013      	strb	r3, [r2, #0]
    while (command->command != NULL)
    1d12:	4b28      	ldr	r3, [pc, #160]	; (1db4 <app_uart_task+0x1a0>)
    1d14:	6818      	ldr	r0, [r3, #0]
    1d16:	2800      	cmp	r0, #0
    1d18:	d00b      	beq.n	1d32 <app_uart_task+0x11e>
    1d1a:	001c      	movs	r4, r3
        if (memcmp_code2ram(command->command, data, COMMAND_LENGTH) == 0)
    1d1c:	4d1f      	ldr	r5, [pc, #124]	; (1d9c <app_uart_task+0x188>)
    1d1e:	4e26      	ldr	r6, [pc, #152]	; (1db8 <app_uart_task+0x1a4>)
    1d20:	2202      	movs	r2, #2
    1d22:	0029      	movs	r1, r5
    1d24:	47b0      	blx	r6
    1d26:	2800      	cmp	r0, #0
    1d28:	d00c      	beq.n	1d44 <app_uart_task+0x130>
        command++;
    1d2a:	3410      	adds	r4, #16
    while (command->command != NULL)
    1d2c:	6820      	ldr	r0, [r4, #0]
    1d2e:	2800      	cmp	r0, #0
    1d30:	d1f6      	bne.n	1d20 <app_uart_task+0x10c>
    UART_TX("NG Invalid command received\n");
    1d32:	4822      	ldr	r0, [pc, #136]	; (1dbc <app_uart_task+0x1a8>)
    1d34:	4b22      	ldr	r3, [pc, #136]	; (1dc0 <app_uart_task+0x1ac>)
    1d36:	4798      	blx	r3
                memset(rx_data, 0, RX_BUFFER_SIZE);  // Clear buffer
    1d38:	2280      	movs	r2, #128	; 0x80
    1d3a:	2100      	movs	r1, #0
    1d3c:	4817      	ldr	r0, [pc, #92]	; (1d9c <app_uart_task+0x188>)
    1d3e:	4b1a      	ldr	r3, [pc, #104]	; (1da8 <app_uart_task+0x194>)
    1d40:	4798      	blx	r3
                break;
    1d42:	e76e      	b.n	1c22 <app_uart_task+0xe>
            volatile uint8_t cmdLength = strlen(data);
    1d44:	4815      	ldr	r0, [pc, #84]	; (1d9c <app_uart_task+0x188>)
    1d46:	4b1f      	ldr	r3, [pc, #124]	; (1dc4 <app_uart_task+0x1b0>)
    1d48:	4798      	blx	r3
    1d4a:	b2c0      	uxtb	r0, r0
    1d4c:	466b      	mov	r3, sp
    1d4e:	71d8      	strb	r0, [r3, #7]
    1d50:	3307      	adds	r3, #7
            if (cmdLength == command->len)
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	b2db      	uxtb	r3, r3
    1d56:	7922      	ldrb	r2, [r4, #4]
    1d58:	429a      	cmp	r2, r3
    1d5a:	d003      	beq.n	1d64 <app_uart_task+0x150>
                UART_TX(command->commandError);
    1d5c:	68a0      	ldr	r0, [r4, #8]
    1d5e:	4b18      	ldr	r3, [pc, #96]	; (1dc0 <app_uart_task+0x1ac>)
    1d60:	4798      	blx	r3
    1d62:	e7e9      	b.n	1d38 <app_uart_task+0x124>
                command->handler(data);
    1d64:	68e3      	ldr	r3, [r4, #12]
    1d66:	480d      	ldr	r0, [pc, #52]	; (1d9c <app_uart_task+0x188>)
    1d68:	4798      	blx	r3
    1d6a:	e7e5      	b.n	1d38 <app_uart_task+0x124>
                if (rx_data_index > 0)
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d09b      	beq.n	1ca8 <app_uart_task+0x94>
                    rx_data_index--;
    1d70:	3b01      	subs	r3, #1
    1d72:	4a0b      	ldr	r2, [pc, #44]	; (1da0 <app_uart_task+0x18c>)
    1d74:	7013      	strb	r3, [r2, #0]
    1d76:	e797      	b.n	1ca8 <app_uart_task+0x94>
                rx_data_index = 0;
    1d78:	2200      	movs	r2, #0
    1d7a:	4b09      	ldr	r3, [pc, #36]	; (1da0 <app_uart_task+0x18c>)
    1d7c:	701a      	strb	r2, [r3, #0]
                memset(rx_data, 0, RX_BUFFER_SIZE);  // Clear buffer
    1d7e:	3280      	adds	r2, #128	; 0x80
    1d80:	2100      	movs	r1, #0
    1d82:	4806      	ldr	r0, [pc, #24]	; (1d9c <app_uart_task+0x188>)
    1d84:	4b08      	ldr	r3, [pc, #32]	; (1da8 <app_uart_task+0x194>)
    1d86:	4798      	blx	r3
                UART_TX("NG Buffer overflow\n");
    1d88:	480f      	ldr	r0, [pc, #60]	; (1dc8 <app_uart_task+0x1b4>)
    1d8a:	4b0d      	ldr	r3, [pc, #52]	; (1dc0 <app_uart_task+0x1ac>)
    1d8c:	4798      	blx	r3
    1d8e:	e78b      	b.n	1ca8 <app_uart_task+0x94>
    1d90:	20000900 	.word	0x20000900
    1d94:	2000086c 	.word	0x2000086c
    1d98:	000032d5 	.word	0x000032d5
    1d9c:	2000087c 	.word	0x2000087c
    1da0:	200008fc 	.word	0x200008fc
    1da4:	200008fd 	.word	0x200008fd
    1da8:	00005719 	.word	0x00005719
    1dac:	200006d1 	.word	0x200006d1
    1db0:	0000371d 	.word	0x0000371d
    1db4:	2000010c 	.word	0x2000010c
    1db8:	000056e9 	.word	0x000056e9
    1dbc:	0000768c 	.word	0x0000768c
    1dc0:	000018ad 	.word	0x000018ad
    1dc4:	00005e2d 	.word	0x00005e2d
    1dc8:	000076ac 	.word	0x000076ac

00001dcc <handleQM>:
{
    1dcc:	b570      	push	{r4, r5, r6, lr}
    UART_TX("\n");
    1dce:	4d0d      	ldr	r5, [pc, #52]	; (1e04 <handleQM+0x38>)
    1dd0:	0028      	movs	r0, r5
    1dd2:	4c0d      	ldr	r4, [pc, #52]	; (1e08 <handleQM+0x3c>)
    1dd4:	47a0      	blx	r4
    UART_TX("BV - Battery Voltage\n");
    1dd6:	480d      	ldr	r0, [pc, #52]	; (1e0c <handleQM+0x40>)
    1dd8:	47a0      	blx	r4
    UART_TX("CR - Print debug data to UART\n");
    1dda:	480d      	ldr	r0, [pc, #52]	; (1e10 <handleQM+0x44>)
    1ddc:	47a0      	blx	r4
    UART_TX("FF - Free Function (placeholder)\n");
    1dde:	480d      	ldr	r0, [pc, #52]	; (1e14 <handleQM+0x48>)
    1de0:	47a0      	blx	r4
    UART_TX("GS - Get Status\n");
    1de2:	480d      	ldr	r0, [pc, #52]	; (1e18 <handleQM+0x4c>)
    1de4:	47a0      	blx	r4
    UART_TX("GV - Get Version\n");
    1de6:	480d      	ldr	r0, [pc, #52]	; (1e1c <handleQM+0x50>)
    1de8:	47a0      	blx	r4
    UART_TX("PT <NN> - Play Tune\n");
    1dea:	480d      	ldr	r0, [pc, #52]	; (1e20 <handleQM+0x54>)
    1dec:	47a0      	blx	r4
    UART_TX("RB <N> - Reboot");
    1dee:	480d      	ldr	r0, [pc, #52]	; (1e24 <handleQM+0x58>)
    1df0:	47a0      	blx	r4
    UART_TX("SA <N> - Set Arm/Disarm\n");
    1df2:	480d      	ldr	r0, [pc, #52]	; (1e28 <handleQM+0x5c>)
    1df4:	47a0      	blx	r4
    UART_TX("SH <VV><AA><SS> - Set User Config\n");
    1df6:	480d      	ldr	r0, [pc, #52]	; (1e2c <handleQM+0x60>)
    1df8:	47a0      	blx	r4
    UART_TX("?? - Help\n");
    1dfa:	480d      	ldr	r0, [pc, #52]	; (1e30 <handleQM+0x64>)
    1dfc:	47a0      	blx	r4
    UART_TX("\n");
    1dfe:	0028      	movs	r0, r5
    1e00:	47a0      	blx	r4
}
    1e02:	bd70      	pop	{r4, r5, r6, pc}
    1e04:	00006d9c 	.word	0x00006d9c
    1e08:	000018ad 	.word	0x000018ad
    1e0c:	00007a50 	.word	0x00007a50
    1e10:	00007a68 	.word	0x00007a68
    1e14:	00007a88 	.word	0x00007a88
    1e18:	00007aac 	.word	0x00007aac
    1e1c:	00007ac0 	.word	0x00007ac0
    1e20:	00007ad4 	.word	0x00007ad4
    1e24:	00007aec 	.word	0x00007aec
    1e28:	00007afc 	.word	0x00007afc
    1e2c:	00007b18 	.word	0x00007b18
    1e30:	00007b3c 	.word	0x00007b3c

00001e34 <handleSH>:
{
    1e34:	b510      	push	{r4, lr}
    UART_TX("\n\nSET USER CONFIG:\n");
    1e36:	4802      	ldr	r0, [pc, #8]	; (1e40 <handleSH+0xc>)
    1e38:	4b02      	ldr	r3, [pc, #8]	; (1e44 <handleSH+0x10>)
    1e3a:	4798      	blx	r3
}
    1e3c:	bd10      	pop	{r4, pc}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	00007c4c 	.word	0x00007c4c
    1e44:	000018ad 	.word	0x000018ad

00001e48 <handleSA>:
{
    1e48:	b510      	push	{r4, lr}
    uint8_t ctrlByte = msg[3] - 48;  // Convert from ASCII
    1e4a:	78c4      	ldrb	r4, [r0, #3]
    1e4c:	3c30      	subs	r4, #48	; 0x30
    1e4e:	b2e4      	uxtb	r4, r4
    UART_TX("\n\nSET ARM/DISARM:\n");
    1e50:	481c      	ldr	r0, [pc, #112]	; (1ec4 <handleSA+0x7c>)
    1e52:	4b1d      	ldr	r3, [pc, #116]	; (1ec8 <handleSA+0x80>)
    1e54:	4798      	blx	r3
    if ((ctrlByte == arm))
    1e56:	2c01      	cmp	r4, #1
    1e58:	d00d      	beq.n	1e76 <handleSA+0x2e>
    else if ((ctrlByte == disarm))
    1e5a:	2c00      	cmp	r4, #0
    1e5c:	d01e      	beq.n	1e9c <handleSA+0x54>
    else if ((ctrlByte == silence))
    1e5e:	2c02      	cmp	r4, #2
    1e60:	d023      	beq.n	1eaa <handleSA+0x62>
        UART_TX("\n\tInvalid ARM/DISARM command\n");
    1e62:	481a      	ldr	r0, [pc, #104]	; (1ecc <handleSA+0x84>)
    1e64:	4c18      	ldr	r4, [pc, #96]	; (1ec8 <handleSA+0x80>)
    1e66:	47a0      	blx	r4
        UART_TX("\tSA 0 = DISARM\n");
    1e68:	4819      	ldr	r0, [pc, #100]	; (1ed0 <handleSA+0x88>)
    1e6a:	47a0      	blx	r4
        UART_TX("\tSA 1 = ARM\n");
    1e6c:	4819      	ldr	r0, [pc, #100]	; (1ed4 <handleSA+0x8c>)
    1e6e:	47a0      	blx	r4
        UART_TX("\tSA 2 = SILENCE\n");
    1e70:	4819      	ldr	r0, [pc, #100]	; (1ed8 <handleSA+0x90>)
    1e72:	47a0      	blx	r4
}
    1e74:	bd10      	pop	{r4, pc}
        UART_TX("\nRequesting product ARM...\n");
    1e76:	4819      	ldr	r0, [pc, #100]	; (1edc <handleSA+0x94>)
    1e78:	4b13      	ldr	r3, [pc, #76]	; (1ec8 <handleSA+0x80>)
    1e7a:	4798      	blx	r3
        if (app_arm_request(false, ARM_IGNORE_NONE))
    1e7c:	2100      	movs	r1, #0
    1e7e:	2000      	movs	r0, #0
    1e80:	4b17      	ldr	r3, [pc, #92]	; (1ee0 <handleSA+0x98>)
    1e82:	4798      	blx	r3
    1e84:	2800      	cmp	r0, #0
    1e86:	d003      	beq.n	1e90 <handleSA+0x48>
            UART_TX("SUCCESS, Armed!\n");
    1e88:	4816      	ldr	r0, [pc, #88]	; (1ee4 <handleSA+0x9c>)
    1e8a:	4b0f      	ldr	r3, [pc, #60]	; (1ec8 <handleSA+0x80>)
    1e8c:	4798      	blx	r3
    1e8e:	e7f1      	b.n	1e74 <handleSA+0x2c>
            UART_TX("Failure, still disarmed!\n");
    1e90:	4815      	ldr	r0, [pc, #84]	; (1ee8 <handleSA+0xa0>)
    1e92:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <handleSA+0x80>)
    1e94:	4798      	blx	r3
            app_arm_check_why_arm_failed();
    1e96:	4b15      	ldr	r3, [pc, #84]	; (1eec <handleSA+0xa4>)
    1e98:	4798      	blx	r3
    1e9a:	e7eb      	b.n	1e74 <handleSA+0x2c>
        app_arm_disarm(0);
    1e9c:	2000      	movs	r0, #0
    1e9e:	4b14      	ldr	r3, [pc, #80]	; (1ef0 <handleSA+0xa8>)
    1ea0:	4798      	blx	r3
        UART_TX("\nDISARMED!\n\n");
    1ea2:	4814      	ldr	r0, [pc, #80]	; (1ef4 <handleSA+0xac>)
    1ea4:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <handleSA+0x80>)
    1ea6:	4798      	blx	r3
    1ea8:	e7e4      	b.n	1e74 <handleSA+0x2c>
        if (app_arm_silence_alarm())
    1eaa:	4b13      	ldr	r3, [pc, #76]	; (1ef8 <handleSA+0xb0>)
    1eac:	4798      	blx	r3
    1eae:	2800      	cmp	r0, #0
    1eb0:	d003      	beq.n	1eba <handleSA+0x72>
            UART_TX("\nSilenced!\n\n");
    1eb2:	4812      	ldr	r0, [pc, #72]	; (1efc <handleSA+0xb4>)
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <handleSA+0x80>)
    1eb6:	4798      	blx	r3
    1eb8:	e7dc      	b.n	1e74 <handleSA+0x2c>
            UART_TX("\nDISARMED!\n\n");
    1eba:	480e      	ldr	r0, [pc, #56]	; (1ef4 <handleSA+0xac>)
    1ebc:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <handleSA+0x80>)
    1ebe:	4798      	blx	r3
    1ec0:	e7d8      	b.n	1e74 <handleSA+0x2c>
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	00007b78 	.word	0x00007b78
    1ec8:	000018ad 	.word	0x000018ad
    1ecc:	00007bf8 	.word	0x00007bf8
    1ed0:	00007c18 	.word	0x00007c18
    1ed4:	00007c28 	.word	0x00007c28
    1ed8:	00007c38 	.word	0x00007c38
    1edc:	00007b8c 	.word	0x00007b8c
    1ee0:	000002e1 	.word	0x000002e1
    1ee4:	00007ba8 	.word	0x00007ba8
    1ee8:	00007bbc 	.word	0x00007bbc
    1eec:	00000535 	.word	0x00000535
    1ef0:	000002f9 	.word	0x000002f9
    1ef4:	00007bd8 	.word	0x00007bd8
    1ef8:	00000439 	.word	0x00000439
    1efc:	00007be8 	.word	0x00007be8

00001f00 <handlePT>:
{
    1f00:	b510      	push	{r4, lr}
    1f02:	b082      	sub	sp, #8
    1f04:	0004      	movs	r4, r0
    memset(tempStr, '\0', sizeof(tempStr));
    1f06:	2203      	movs	r2, #3
    1f08:	2100      	movs	r1, #0
    1f0a:	a801      	add	r0, sp, #4
    1f0c:	4b0f      	ldr	r3, [pc, #60]	; (1f4c <handlePT+0x4c>)
    1f0e:	4798      	blx	r3
    strncpy(tempStr, &msg[3], 2);
    1f10:	1ce1      	adds	r1, r4, #3
    1f12:	2202      	movs	r2, #2
    1f14:	a801      	add	r0, sp, #4
    1f16:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <handlePT+0x50>)
    1f18:	4798      	blx	r3
    enum app_buzzer_pattern_t activeTune = (enum app_buzzer_pattern_t)(strtoul(tempStr, 0, 16) & 0xFF);
    1f1a:	2210      	movs	r2, #16
    1f1c:	2100      	movs	r1, #0
    1f1e:	a801      	add	r0, sp, #4
    1f20:	4b0c      	ldr	r3, [pc, #48]	; (1f54 <handlePT+0x54>)
    1f22:	4798      	blx	r3
    1f24:	0004      	movs	r4, r0
    UART_TX("\n\nPLAY TUNE: 0x%02X\n", activeTune);
    1f26:	21ff      	movs	r1, #255	; 0xff
    1f28:	4001      	ands	r1, r0
    1f2a:	480b      	ldr	r0, [pc, #44]	; (1f58 <handlePT+0x58>)
    1f2c:	4b0b      	ldr	r3, [pc, #44]	; (1f5c <handlePT+0x5c>)
    1f2e:	4798      	blx	r3
    if (!app_arm_is_any_alarm_active())
    1f30:	4b0b      	ldr	r3, [pc, #44]	; (1f60 <handlePT+0x60>)
    1f32:	4798      	blx	r3
    1f34:	2800      	cmp	r0, #0
    1f36:	d001      	beq.n	1f3c <handlePT+0x3c>
}
    1f38:	b002      	add	sp, #8
    1f3a:	bd10      	pop	{r4, pc}
        app_buzzer_stop_pattern(app_buzzer_pattern_playing());
    1f3c:	4b09      	ldr	r3, [pc, #36]	; (1f64 <handlePT+0x64>)
    1f3e:	4798      	blx	r3
    1f40:	4b09      	ldr	r3, [pc, #36]	; (1f68 <handlePT+0x68>)
    1f42:	4798      	blx	r3
        app_buzzer_start_pattern(activeTune);
    1f44:	b2e0      	uxtb	r0, r4
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <handlePT+0x6c>)
    1f48:	4798      	blx	r3
}
    1f4a:	e7f5      	b.n	1f38 <handlePT+0x38>
    1f4c:	00005719 	.word	0x00005719
    1f50:	00005e3b 	.word	0x00005e3b
    1f54:	00005f89 	.word	0x00005f89
    1f58:	00007a38 	.word	0x00007a38
    1f5c:	000018ad 	.word	0x000018ad
    1f60:	0000012d 	.word	0x0000012d
    1f64:	00000975 	.word	0x00000975
    1f68:	00000981 	.word	0x00000981
    1f6c:	000007e9 	.word	0x000007e9

00001f70 <handleGV>:
{
    1f70:	b510      	push	{r4, lr}
    1f72:	b090      	sub	sp, #64	; 0x40
    UART_TX("NN%s%s\t%s\t%s\r", (char*)strSN, modelNumber, modelVersion, APP_VERSION);
    1f74:	4b04      	ldr	r3, [pc, #16]	; (1f88 <handleGV+0x18>)
    1f76:	9300      	str	r3, [sp, #0]
    1f78:	ab0b      	add	r3, sp, #44	; 0x2c
    1f7a:	aa0d      	add	r2, sp, #52	; 0x34
    1f7c:	a902      	add	r1, sp, #8
    1f7e:	4803      	ldr	r0, [pc, #12]	; (1f8c <handleGV+0x1c>)
    1f80:	4c03      	ldr	r4, [pc, #12]	; (1f90 <handleGV+0x20>)
    1f82:	47a0      	blx	r4
}
    1f84:	b010      	add	sp, #64	; 0x40
    1f86:	bd10      	pop	{r4, pc}
    1f88:	00007a30 	.word	0x00007a30
    1f8c:	00007a20 	.word	0x00007a20
    1f90:	000018ad 	.word	0x000018ad

00001f94 <handleFF>:
{
    1f94:	b510      	push	{r4, lr}
	port_base->OUTTGL.reg = pin_mask;
    1f96:	4a07      	ldr	r2, [pc, #28]	; (1fb4 <handleFF+0x20>)
    1f98:	2340      	movs	r3, #64	; 0x40
    1f9a:	61d3      	str	r3, [r2, #28]
	return (port_base->IN.reg & pin_mask);
    1f9c:	6a12      	ldr	r2, [r2, #32]
    if(port_pin_get_input_level(DISARMED_FLASH_PIN))
    1f9e:	4213      	tst	r3, r2
    1fa0:	d103      	bne.n	1faa <handleFF+0x16>
        UART_TX("\nDisarmed_Flash_Pin: Low\n");
    1fa2:	4805      	ldr	r0, [pc, #20]	; (1fb8 <handleFF+0x24>)
    1fa4:	4b05      	ldr	r3, [pc, #20]	; (1fbc <handleFF+0x28>)
    1fa6:	4798      	blx	r3
}
    1fa8:	bd10      	pop	{r4, pc}
        UART_TX("\nDisarmed_Flash_Pin: HIGH\n");  
    1faa:	4805      	ldr	r0, [pc, #20]	; (1fc0 <handleFF+0x2c>)
    1fac:	4b03      	ldr	r3, [pc, #12]	; (1fbc <handleFF+0x28>)
    1fae:	4798      	blx	r3
    1fb0:	e7fa      	b.n	1fa8 <handleFF+0x14>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	41004400 	.word	0x41004400
    1fb8:	00007720 	.word	0x00007720
    1fbc:	000018ad 	.word	0x000018ad
    1fc0:	00007704 	.word	0x00007704

00001fc4 <handleCR>:
{
    1fc4:	b510      	push	{r4, lr}
    if (printDebugData)
    1fc6:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <handleCR+0x24>)
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d108      	bne.n	1fe0 <handleCR+0x1c>
        printDebugData = true;
    1fce:	2201      	movs	r2, #1
    1fd0:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <handleCR+0x24>)
    1fd2:	701a      	strb	r2, [r3, #0]
    UART_TX("CR: %d\n", printDebugData);
    1fd4:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <handleCR+0x24>)
    1fd6:	7819      	ldrb	r1, [r3, #0]
    1fd8:	4804      	ldr	r0, [pc, #16]	; (1fec <handleCR+0x28>)
    1fda:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <handleCR+0x2c>)
    1fdc:	4798      	blx	r3
}
    1fde:	bd10      	pop	{r4, pc}
        printDebugData = false;
    1fe0:	2200      	movs	r2, #0
    1fe2:	4b01      	ldr	r3, [pc, #4]	; (1fe8 <handleCR+0x24>)
    1fe4:	701a      	strb	r2, [r3, #0]
    1fe6:	e7f5      	b.n	1fd4 <handleCR+0x10>
    1fe8:	20000768 	.word	0x20000768
    1fec:	000076fc 	.word	0x000076fc
    1ff0:	000018ad 	.word	0x000018ad

00001ff4 <UART_DBG_TX>:
// *********************************************************************************************************************************
//	 USE THIS FUNCTION FOR PERIODIC DATA REQUESTS OR BATTERY VOLTAGE PRINTS
// *********************************************************************************************************************************

void UART_DBG_TX(const char* transmitString, ...)
{
    1ff4:	b40f      	push	{r0, r1, r2, r3}
    1ff6:	b530      	push	{r4, r5, lr}
    1ff8:	b0c3      	sub	sp, #268	; 0x10c
    if (printDebugData || allowTempDebugData)
    1ffa:	4b14      	ldr	r3, [pc, #80]	; (204c <UART_DBG_TX+0x58>)
    1ffc:	781b      	ldrb	r3, [r3, #0]
    1ffe:	2b00      	cmp	r3, #0
    2000:	d103      	bne.n	200a <UART_DBG_TX+0x16>
    2002:	4b13      	ldr	r3, [pc, #76]	; (2050 <UART_DBG_TX+0x5c>)
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	2b00      	cmp	r3, #0
    2008:	d004      	beq.n	2014 <UART_DBG_TX+0x20>
    {
        if ((usart_instance.hw->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE))
    200a:	4b12      	ldr	r3, [pc, #72]	; (2054 <UART_DBG_TX+0x60>)
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	681b      	ldr	r3, [r3, #0]
    2010:	079b      	lsls	r3, r3, #30
    2012:	d404      	bmi.n	201e <UART_DBG_TX+0x2a>
                                    strnlen(UART_TX_tx_buffer, TX_BUFFER_LENGTH));  // Transmit the buffer
            va_end(args);
            allowTempDebugData = false;
        }
    }
}
    2014:	b043      	add	sp, #268	; 0x10c
    2016:	bc30      	pop	{r4, r5}
    2018:	bc08      	pop	{r3}
    201a:	b004      	add	sp, #16
    201c:	4718      	bx	r3
            va_start(args, transmitString);
    201e:	ab47      	add	r3, sp, #284	; 0x11c
    2020:	9301      	str	r3, [sp, #4]
            vsnprintf(UART_TX_tx_buffer, TX_BUFFER_LENGTH, transmitString, args);
    2022:	2480      	movs	r4, #128	; 0x80
    2024:	0064      	lsls	r4, r4, #1
    2026:	9a46      	ldr	r2, [sp, #280]	; 0x118
    2028:	0021      	movs	r1, r4
    202a:	a802      	add	r0, sp, #8
    202c:	4d0a      	ldr	r5, [pc, #40]	; (2058 <UART_DBG_TX+0x64>)
    202e:	47a8      	blx	r5
                                    strnlen(UART_TX_tx_buffer, TX_BUFFER_LENGTH));  // Transmit the buffer
    2030:	0021      	movs	r1, r4
    2032:	a802      	add	r0, sp, #8
    2034:	4b09      	ldr	r3, [pc, #36]	; (205c <UART_DBG_TX+0x68>)
    2036:	4798      	blx	r3
            usart_write_buffer_wait(&usart_instance, (uint8_t*)UART_TX_tx_buffer,
    2038:	b282      	uxth	r2, r0
    203a:	a902      	add	r1, sp, #8
    203c:	4805      	ldr	r0, [pc, #20]	; (2054 <UART_DBG_TX+0x60>)
    203e:	4b08      	ldr	r3, [pc, #32]	; (2060 <UART_DBG_TX+0x6c>)
    2040:	4798      	blx	r3
            allowTempDebugData = false;
    2042:	2200      	movs	r2, #0
    2044:	4b02      	ldr	r3, [pc, #8]	; (2050 <UART_DBG_TX+0x5c>)
    2046:	701a      	strb	r2, [r3, #0]
}
    2048:	e7e4      	b.n	2014 <UART_DBG_TX+0x20>
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	20000768 	.word	0x20000768
    2050:	200006d0 	.word	0x200006d0
    2054:	20000900 	.word	0x20000900
    2058:	00006009 	.word	0x00006009
    205c:	00005e65 	.word	0x00005e65
    2060:	0000471d 	.word	0x0000471d

00002064 <handleRB>:
{
    2064:	b510      	push	{r4, lr}
    2066:	b082      	sub	sp, #8
    memset(tempStr, '\0', sizeof(tempStr));
    2068:	ac01      	add	r4, sp, #4
    206a:	2300      	movs	r3, #0
    206c:	8023      	strh	r3, [r4, #0]
    strncpy(tempStr, &msg[3], 1);
    206e:	1cc1      	adds	r1, r0, #3
    2070:	2201      	movs	r2, #1
    2072:	0020      	movs	r0, r4
    2074:	4b0d      	ldr	r3, [pc, #52]	; (20ac <handleRB+0x48>)
    2076:	4798      	blx	r3
    uint8_t node = strtoul(tempStr, 0, 16) & 0x0F;
    2078:	2210      	movs	r2, #16
    207a:	2100      	movs	r1, #0
    207c:	0020      	movs	r0, r4
    207e:	4b0c      	ldr	r3, [pc, #48]	; (20b0 <handleRB+0x4c>)
    2080:	4798      	blx	r3
    2082:	0004      	movs	r4, r0
    UART_TX("\n\nREBOOT REQUEST:\t");
    2084:	480b      	ldr	r0, [pc, #44]	; (20b4 <handleRB+0x50>)
    2086:	4b0c      	ldr	r3, [pc, #48]	; (20b8 <handleRB+0x54>)
    2088:	4798      	blx	r3
    if (puck == node)
    208a:	0723      	lsls	r3, r4, #28
    208c:	d001      	beq.n	2092 <handleRB+0x2e>
}
    208e:	b002      	add	sp, #8
    2090:	bd10      	pop	{r4, pc}
        UART_DBG_TX("Software Resetting Puck\n");
    2092:	480a      	ldr	r0, [pc, #40]	; (20bc <handleRB+0x58>)
    2094:	4b0a      	ldr	r3, [pc, #40]	; (20c0 <handleRB+0x5c>)
    2096:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2098:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    209c:	4a09      	ldr	r2, [pc, #36]	; (20c4 <handleRB+0x60>)
    209e:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <handleRB+0x64>)
    20a0:	60da      	str	r2, [r3, #12]
    20a2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	e7fd      	b.n	20a6 <handleRB+0x42>
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	00005e3b 	.word	0x00005e3b
    20b0:	00005f89 	.word	0x00005f89
    20b4:	00007b48 	.word	0x00007b48
    20b8:	000018ad 	.word	0x000018ad
    20bc:	00007b5c 	.word	0x00007b5c
    20c0:	00001ff5 	.word	0x00001ff5
    20c4:	05fa0004 	.word	0x05fa0004
    20c8:	e000ed00 	.word	0xe000ed00

000020cc <handleGS>:
{
    20cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ce:	b089      	sub	sp, #36	; 0x24
    UART_TX("\n\nGET STATUS:\r\r");
    20d0:	4867      	ldr	r0, [pc, #412]	; (2270 <handleGS+0x1a4>)
    20d2:	4b68      	ldr	r3, [pc, #416]	; (2274 <handleGS+0x1a8>)
    20d4:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)PM->RCAUSE.reg;
    20d6:	2338      	movs	r3, #56	; 0x38
    20d8:	4a67      	ldr	r2, [pc, #412]	; (2278 <handleGS+0x1ac>)
    20da:	5cd3      	ldrb	r3, [r2, r3]
    20dc:	b2db      	uxtb	r3, r3
    if (resetCause == SYSTEM_RESET_CAUSE_SOFTWARE)
    20de:	2b40      	cmp	r3, #64	; 0x40
    20e0:	d100      	bne.n	20e4 <handleGS+0x18>
    20e2:	e0ac      	b.n	223e <handleGS+0x172>
    else if (resetCause == SYSTEM_RESET_CAUSE_WDT)
    20e4:	2b20      	cmp	r3, #32
    20e6:	d100      	bne.n	20ea <handleGS+0x1e>
    20e8:	e0ad      	b.n	2246 <handleGS+0x17a>
    else if (resetCause == SYSTEM_RESET_CAUSE_BOD33)
    20ea:	2b04      	cmp	r3, #4
    20ec:	d100      	bne.n	20f0 <handleGS+0x24>
    20ee:	e0ae      	b.n	224e <handleGS+0x182>
    else if (resetCause == SYSTEM_RESET_CAUSE_BOD12)
    20f0:	2b02      	cmp	r3, #2
    20f2:	d100      	bne.n	20f6 <handleGS+0x2a>
    20f4:	e0af      	b.n	2256 <handleGS+0x18a>
    else if (resetCause == SYSTEM_RESET_CAUSE_POR)
    20f6:	2b01      	cmp	r3, #1
    20f8:	d100      	bne.n	20fc <handleGS+0x30>
    20fa:	e0b0      	b.n	225e <handleGS+0x192>
        UART_TX("\tReset Cause: External Reset\n");
    20fc:	485f      	ldr	r0, [pc, #380]	; (227c <handleGS+0x1b0>)
    20fe:	4b5d      	ldr	r3, [pc, #372]	; (2274 <handleGS+0x1a8>)
    2100:	4798      	blx	r3
    AM_Stat.sAlarmModule = app_gen_io_get_AM_status();
    2102:	4b5f      	ldr	r3, [pc, #380]	; (2280 <handleGS+0x1b4>)
    2104:	4798      	blx	r3
    2106:	0004      	movs	r4, r0
    UART_TX("\r\rSYSTEM STATUS:\r");
    2108:	485e      	ldr	r0, [pc, #376]	; (2284 <handleGS+0x1b8>)
    210a:	4d5a      	ldr	r5, [pc, #360]	; (2274 <handleGS+0x1a8>)
    210c:	47a8      	blx	r5
    UART_TX("\tAM Status: 0x%02x\r", AM_Stat.sAlarmModule);
    210e:	0021      	movs	r1, r4
    2110:	485d      	ldr	r0, [pc, #372]	; (2288 <handleGS+0x1bc>)
    2112:	47a8      	blx	r5
    UART_TX("\tAM.isMaster: %c\r", (AM_Stat.isMaster ? '1' : '0') );
    2114:	ab07      	add	r3, sp, #28
    2116:	801c      	strh	r4, [r3, #0]
    2118:	b2e4      	uxtb	r4, r4
    211a:	2101      	movs	r1, #1
    211c:	4021      	ands	r1, r4
    211e:	3130      	adds	r1, #48	; 0x30
    2120:	485a      	ldr	r0, [pc, #360]	; (228c <handleGS+0x1c0>)
    2122:	4b54      	ldr	r3, [pc, #336]	; (2274 <handleGS+0x1a8>)
    2124:	4798      	blx	r3
    UART_TX("\tAM.Powered: %c\r", (AM_Stat.Powered ? '1' : '0') );
    2126:	07a1      	lsls	r1, r4, #30
    2128:	0fc9      	lsrs	r1, r1, #31
    212a:	3130      	adds	r1, #48	; 0x30
    212c:	4858      	ldr	r0, [pc, #352]	; (2290 <handleGS+0x1c4>)
    212e:	4b51      	ldr	r3, [pc, #324]	; (2274 <handleGS+0x1a8>)
    2130:	4798      	blx	r3
    UART_DBG_TX("\tAM.notCharging: %c\r", (AM_Stat.notCharging ? '1' : '0') );
    2132:	0761      	lsls	r1, r4, #29
    2134:	0fc9      	lsrs	r1, r1, #31
    2136:	3130      	adds	r1, #48	; 0x30
    2138:	4856      	ldr	r0, [pc, #344]	; (2294 <handleGS+0x1c8>)
    213a:	4b57      	ldr	r3, [pc, #348]	; (2298 <handleGS+0x1cc>)
    213c:	4798      	blx	r3
    UART_DBG_TX("\tAM.deepSleep: %c\r", (AM_Stat.deepSleep ? '1' : '0') );
    213e:	0721      	lsls	r1, r4, #28
    2140:	0fc9      	lsrs	r1, r1, #31
    2142:	3130      	adds	r1, #48	; 0x30
    2144:	4855      	ldr	r0, [pc, #340]	; (229c <handleGS+0x1d0>)
    2146:	4b54      	ldr	r3, [pc, #336]	; (2298 <handleGS+0x1cc>)
    2148:	4798      	blx	r3
    UART_DBG_TX("\tAM.shutDown: %c\r", (AM_Stat.shutDown ? '1' : '0') );
    214a:	06e1      	lsls	r1, r4, #27
    214c:	0fc9      	lsrs	r1, r1, #31
    214e:	3130      	adds	r1, #48	; 0x30
    2150:	4853      	ldr	r0, [pc, #332]	; (22a0 <handleGS+0x1d4>)
    2152:	4b51      	ldr	r3, [pc, #324]	; (2298 <handleGS+0x1cc>)
    2154:	4798      	blx	r3
    UART_TX("\tAM.switchLifted: %c\r", (AM_Stat.switchLifted ? '1' : '0') );
    2156:	06a4      	lsls	r4, r4, #26
    2158:	0fe4      	lsrs	r4, r4, #31
    215a:	0021      	movs	r1, r4
    215c:	3130      	adds	r1, #48	; 0x30
    215e:	4851      	ldr	r0, [pc, #324]	; (22a4 <handleGS+0x1d8>)
    2160:	4b44      	ldr	r3, [pc, #272]	; (2274 <handleGS+0x1a8>)
    2162:	4798      	blx	r3
    if(app_gen_io_get_nDISARM() == CAN_ARM)
    2164:	4b50      	ldr	r3, [pc, #320]	; (22a8 <handleGS+0x1dc>)
    2166:	4798      	blx	r3
    2168:	2800      	cmp	r0, #0
    216a:	d100      	bne.n	216e <handleGS+0xa2>
    216c:	e07b      	b.n	2266 <handleGS+0x19a>
        UART_TX("\tnDISARM 1: Can Arm\r");
    216e:	484f      	ldr	r0, [pc, #316]	; (22ac <handleGS+0x1e0>)
    2170:	4b40      	ldr	r3, [pc, #256]	; (2274 <handleGS+0x1a8>)
    2172:	4798      	blx	r3
    UART_TX("\rDAISY CHAIN STATUS:\r");
    2174:	484e      	ldr	r0, [pc, #312]	; (22b0 <handleGS+0x1e4>)
    2176:	4d3f      	ldr	r5, [pc, #252]	; (2274 <handleGS+0x1a8>)
    2178:	47a8      	blx	r5
    UART_TX("\rCR: %d\r", printDebugData);
    217a:	4b4e      	ldr	r3, [pc, #312]	; (22b4 <handleGS+0x1e8>)
    217c:	7819      	ldrb	r1, [r3, #0]
    217e:	484e      	ldr	r0, [pc, #312]	; (22b8 <handleGS+0x1ec>)
    2180:	47a8      	blx	r5
    alarmStat.sAlarm = app_arm_get_alarm_status();
    2182:	4b4e      	ldr	r3, [pc, #312]	; (22bc <handleGS+0x1f0>)
    2184:	4798      	blx	r3
    2186:	0004      	movs	r4, r0
    UART_TX("\rARM STATUS:\r");
    2188:	484d      	ldr	r0, [pc, #308]	; (22c0 <handleGS+0x1f4>)
    218a:	47a8      	blx	r5
    UART_TX("\r\tarmed: %c\r", (alarmStat.armed ? '1' : '0') );
    218c:	466b      	mov	r3, sp
    218e:	801c      	strh	r4, [r3, #0]
    2190:	b2e4      	uxtb	r4, r4
    2192:	2101      	movs	r1, #1
    2194:	4021      	ands	r1, r4
    2196:	3130      	adds	r1, #48	; 0x30
    2198:	484a      	ldr	r0, [pc, #296]	; (22c4 <handleGS+0x1f8>)
    219a:	4b36      	ldr	r3, [pc, #216]	; (2274 <handleGS+0x1a8>)
    219c:	4798      	blx	r3
    UART_TX("\tsilentAlarm: %c\r", (alarmStat.silentAlarm ? '1' : '0') );
    219e:	07a1      	lsls	r1, r4, #30
    21a0:	0fc9      	lsrs	r1, r1, #31
    21a2:	3130      	adds	r1, #48	; 0x30
    21a4:	4848      	ldr	r0, [pc, #288]	; (22c8 <handleGS+0x1fc>)
    21a6:	4b33      	ldr	r3, [pc, #204]	; (2274 <handleGS+0x1a8>)
    21a8:	4798      	blx	r3
    UART_TX("\tchannel_Alarm: %c\r", (alarmStat.channel_Alarm ? '1' : '0') );
    21aa:	0761      	lsls	r1, r4, #29
    21ac:	0fc9      	lsrs	r1, r1, #31
    21ae:	3130      	adds	r1, #48	; 0x30
    21b0:	4846      	ldr	r0, [pc, #280]	; (22cc <handleGS+0x200>)
    21b2:	4b30      	ldr	r3, [pc, #192]	; (2274 <handleGS+0x1a8>)
    21b4:	4798      	blx	r3
    UART_TX("\tpowerTamper_Armed: %c\r", (alarmStat.powerTamper_Armed ? '1' : '0') );
    21b6:	0721      	lsls	r1, r4, #28
    21b8:	0fc9      	lsrs	r1, r1, #31
    21ba:	3130      	adds	r1, #48	; 0x30
    21bc:	4844      	ldr	r0, [pc, #272]	; (22d0 <handleGS+0x204>)
    21be:	4b2d      	ldr	r3, [pc, #180]	; (2274 <handleGS+0x1a8>)
    21c0:	4798      	blx	r3
    UART_TX("\tpowerTamper_Alarm: %c\r", (alarmStat.powerTamper_Alarm ? '1' : '0') );
    21c2:	06e1      	lsls	r1, r4, #27
    21c4:	0fc9      	lsrs	r1, r1, #31
    21c6:	3130      	adds	r1, #48	; 0x30
    21c8:	4842      	ldr	r0, [pc, #264]	; (22d4 <handleGS+0x208>)
    21ca:	4b2a      	ldr	r3, [pc, #168]	; (2274 <handleGS+0x1a8>)
    21cc:	4798      	blx	r3
    UART_TX("\tdaisyChainTamper_Alarm: %c\r", (alarmStat.daisyChainTamper_Alarm ? '1' : '0') );
    21ce:	06a1      	lsls	r1, r4, #26
    21d0:	0fc9      	lsrs	r1, r1, #31
    21d2:	3130      	adds	r1, #48	; 0x30
    21d4:	4840      	ldr	r0, [pc, #256]	; (22d8 <handleGS+0x20c>)
    21d6:	4b27      	ldr	r3, [pc, #156]	; (2274 <handleGS+0x1a8>)
    21d8:	4798      	blx	r3
    UART_TX("\tdaisyChainTamper_Armed: %c\r", (alarmStat.daisyChainTamper_Armed ? '1' : '0') );
    21da:	0664      	lsls	r4, r4, #25
    21dc:	0fe4      	lsrs	r4, r4, #31
    21de:	0021      	movs	r1, r4
    21e0:	3130      	adds	r1, #48	; 0x30
    21e2:	483e      	ldr	r0, [pc, #248]	; (22dc <handleGS+0x210>)
    21e4:	4c23      	ldr	r4, [pc, #140]	; (2274 <handleGS+0x1a8>)
    21e6:	47a0      	blx	r4
    UART_TX("\rCHANNEL STATUS:\r");
    21e8:	483d      	ldr	r0, [pc, #244]	; (22e0 <handleGS+0x214>)
    21ea:	47a0      	blx	r4
    for(int num; num < CH_COUNT; num++)
    21ec:	2400      	movs	r4, #0
        chanStat[num].sPort  = app_gen_io_get_Channel_Status(num);
    21ee:	4f3d      	ldr	r7, [pc, #244]	; (22e4 <handleGS+0x218>)
    21f0:	ad01      	add	r5, sp, #4
    21f2:	b2a0      	uxth	r0, r4
    21f4:	47b8      	blx	r7
    21f6:	0002      	movs	r2, r0
    21f8:	0066      	lsls	r6, r4, #1
    21fa:	5370      	strh	r0, [r6, r5]
        UART_TX("\r\tChannel %d Status : 0x%02x\r", num, chanStat[num].sPort);  
    21fc:	0021      	movs	r1, r4
    21fe:	483a      	ldr	r0, [pc, #232]	; (22e8 <handleGS+0x21c>)
    2200:	4b1c      	ldr	r3, [pc, #112]	; (2274 <handleGS+0x1a8>)
    2202:	4798      	blx	r3
        UART_TX("\tcablePresent: %c\r", ( chanStat[num].cablePresent ? '1' : '0') );
    2204:	5d71      	ldrb	r1, [r6, r5]
    2206:	07c9      	lsls	r1, r1, #31
    2208:	0fc9      	lsrs	r1, r1, #31
    220a:	3130      	adds	r1, #48	; 0x30
    220c:	4837      	ldr	r0, [pc, #220]	; (22ec <handleGS+0x220>)
    220e:	4b19      	ldr	r3, [pc, #100]	; (2274 <handleGS+0x1a8>)
    2210:	4798      	blx	r3
        UART_TX("\tarmed: %c\r", (chanStat[num].armed ? '1' : '0') );
    2212:	5d71      	ldrb	r1, [r6, r5]
    2214:	0789      	lsls	r1, r1, #30
    2216:	0fc9      	lsrs	r1, r1, #31
    2218:	3130      	adds	r1, #48	; 0x30
    221a:	4835      	ldr	r0, [pc, #212]	; (22f0 <handleGS+0x224>)
    221c:	4b15      	ldr	r3, [pc, #84]	; (2274 <handleGS+0x1a8>)
    221e:	4798      	blx	r3
        UART_TX("\talarming: %c\r", (chanStat[num].alarming ? '1' : '0') );      
    2220:	5d71      	ldrb	r1, [r6, r5]
    2222:	0749      	lsls	r1, r1, #29
    2224:	0fc9      	lsrs	r1, r1, #31
    2226:	3130      	adds	r1, #48	; 0x30
    2228:	4832      	ldr	r0, [pc, #200]	; (22f4 <handleGS+0x228>)
    222a:	4b12      	ldr	r3, [pc, #72]	; (2274 <handleGS+0x1a8>)
    222c:	4798      	blx	r3
    for(int num; num < CH_COUNT; num++)
    222e:	3401      	adds	r4, #1
    2230:	2c0c      	cmp	r4, #12
    2232:	d1de      	bne.n	21f2 <handleGS+0x126>
    UART_TX("\rBATTERY STATUS:\r");
    2234:	4830      	ldr	r0, [pc, #192]	; (22f8 <handleGS+0x22c>)
    2236:	4b0f      	ldr	r3, [pc, #60]	; (2274 <handleGS+0x1a8>)
    2238:	4798      	blx	r3
}
    223a:	b009      	add	sp, #36	; 0x24
    223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        UART_TX("\tReset Cause: Software\n");
    223e:	482f      	ldr	r0, [pc, #188]	; (22fc <handleGS+0x230>)
    2240:	4b0c      	ldr	r3, [pc, #48]	; (2274 <handleGS+0x1a8>)
    2242:	4798      	blx	r3
    2244:	e75d      	b.n	2102 <handleGS+0x36>
        UART_TX("\tReset Cause: Watchdog Timer\n");
    2246:	482e      	ldr	r0, [pc, #184]	; (2300 <handleGS+0x234>)
    2248:	4b0a      	ldr	r3, [pc, #40]	; (2274 <handleGS+0x1a8>)
    224a:	4798      	blx	r3
    224c:	e759      	b.n	2102 <handleGS+0x36>
        UART_TX("\tReset Cause: BOD33\n");
    224e:	482d      	ldr	r0, [pc, #180]	; (2304 <handleGS+0x238>)
    2250:	4b08      	ldr	r3, [pc, #32]	; (2274 <handleGS+0x1a8>)
    2252:	4798      	blx	r3
    2254:	e755      	b.n	2102 <handleGS+0x36>
        UART_TX("\tReset Cause: BOD12\n");
    2256:	482c      	ldr	r0, [pc, #176]	; (2308 <handleGS+0x23c>)
    2258:	4b06      	ldr	r3, [pc, #24]	; (2274 <handleGS+0x1a8>)
    225a:	4798      	blx	r3
    225c:	e751      	b.n	2102 <handleGS+0x36>
        UART_TX("\tReset Cause: Power On Reset\n");
    225e:	482b      	ldr	r0, [pc, #172]	; (230c <handleGS+0x240>)
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <handleGS+0x1a8>)
    2262:	4798      	blx	r3
    2264:	e74d      	b.n	2102 <handleGS+0x36>
        UART_TX("\tnDISARM 0: Can't Arm\r");
    2266:	482a      	ldr	r0, [pc, #168]	; (2310 <handleGS+0x244>)
    2268:	4b02      	ldr	r3, [pc, #8]	; (2274 <handleGS+0x1a8>)
    226a:	4798      	blx	r3
    226c:	e782      	b.n	2174 <handleGS+0xa8>
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	0000773c 	.word	0x0000773c
    2274:	000018ad 	.word	0x000018ad
    2278:	40000400 	.word	0x40000400
    227c:	000077d4 	.word	0x000077d4
    2280:	00001719 	.word	0x00001719
    2284:	000077f4 	.word	0x000077f4
    2288:	00007808 	.word	0x00007808
    228c:	0000781c 	.word	0x0000781c
    2290:	00007830 	.word	0x00007830
    2294:	00007844 	.word	0x00007844
    2298:	00001ff5 	.word	0x00001ff5
    229c:	0000785c 	.word	0x0000785c
    22a0:	00007870 	.word	0x00007870
    22a4:	00007884 	.word	0x00007884
    22a8:	00001709 	.word	0x00001709
    22ac:	0000789c 	.word	0x0000789c
    22b0:	000078cc 	.word	0x000078cc
    22b4:	20000768 	.word	0x20000768
    22b8:	000078e4 	.word	0x000078e4
    22bc:	00000529 	.word	0x00000529
    22c0:	000078f0 	.word	0x000078f0
    22c4:	00007900 	.word	0x00007900
    22c8:	00007910 	.word	0x00007910
    22cc:	00007924 	.word	0x00007924
    22d0:	00007938 	.word	0x00007938
    22d4:	00007950 	.word	0x00007950
    22d8:	00007968 	.word	0x00007968
    22dc:	00007988 	.word	0x00007988
    22e0:	000079a8 	.word	0x000079a8
    22e4:	00001729 	.word	0x00001729
    22e8:	000079bc 	.word	0x000079bc
    22ec:	000079dc 	.word	0x000079dc
    22f0:	000079f0 	.word	0x000079f0
    22f4:	000079fc 	.word	0x000079fc
    22f8:	00007a0c 	.word	0x00007a0c
    22fc:	0000774c 	.word	0x0000774c
    2300:	00007764 	.word	0x00007764
    2304:	00007784 	.word	0x00007784
    2308:	0000779c 	.word	0x0000779c
    230c:	000077b4 	.word	0x000077b4
    2310:	000078b4 	.word	0x000078b4

00002314 <app_uart_disable>:

    return false;
}

void app_uart_disable(void)
{
    2314:	b570      	push	{r4, r5, r6, lr}
    printDebugData = false;
    2316:	2200      	movs	r2, #0
    2318:	4b19      	ldr	r3, [pc, #100]	; (2380 <app_uart_disable+0x6c>)
    231a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    231c:	4d19      	ldr	r5, [pc, #100]	; (2384 <app_uart_disable+0x70>)
    231e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2320:	0020      	movs	r0, r4
    2322:	4b19      	ldr	r3, [pc, #100]	; (2388 <app_uart_disable+0x74>)
    2324:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2326:	231f      	movs	r3, #31
    2328:	4018      	ands	r0, r3
    232a:	3b1e      	subs	r3, #30
    232c:	4083      	lsls	r3, r0
    232e:	2280      	movs	r2, #128	; 0x80
    2330:	4916      	ldr	r1, [pc, #88]	; (238c <app_uart_disable+0x78>)
    2332:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2334:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2336:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2338:	2b00      	cmp	r3, #0
    233a:	d1fc      	bne.n	2336 <app_uart_disable+0x22>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    233c:	6823      	ldr	r3, [r4, #0]
    233e:	2502      	movs	r5, #2
    2340:	43ab      	bics	r3, r5
    2342:	6023      	str	r3, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    2344:	490f      	ldr	r1, [pc, #60]	; (2384 <app_uart_disable+0x70>)
    2346:	2231      	movs	r2, #49	; 0x31
    2348:	5c8b      	ldrb	r3, [r1, r2]
    234a:	2006      	movs	r0, #6
    234c:	4383      	bics	r3, r0
    234e:	548b      	strb	r3, [r1, r2]

    usart_disable(&usart_instance);
    usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    usart_disable_callback(&usart_instance, USART_CALLBACK_ERROR);

    SYS_TimerStop(&dmaTimer);
    2350:	480f      	ldr	r0, [pc, #60]	; (2390 <app_uart_disable+0x7c>)
    2352:	4b10      	ldr	r3, [pc, #64]	; (2394 <app_uart_disable+0x80>)
    2354:	4798      	blx	r3
    dma_abort_job(&usart_dma_resource_rx);
    2356:	4c10      	ldr	r4, [pc, #64]	; (2398 <app_uart_disable+0x84>)
    2358:	0020      	movs	r0, r4
    235a:	4b10      	ldr	r3, [pc, #64]	; (239c <app_uart_disable+0x88>)
    235c:	4798      	blx	r3
	resource->callback_enable &= ~(1 << type);
    235e:	7c23      	ldrb	r3, [r4, #16]
    2360:	43ab      	bics	r3, r5
    2362:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] &= (~(1UL << type) & DMAC_CHINTENSET_MASK);
    2364:	7822      	ldrb	r2, [r4, #0]
    2366:	490e      	ldr	r1, [pc, #56]	; (23a0 <app_uart_disable+0x8c>)
    2368:	5c88      	ldrb	r0, [r1, r2]
    236a:	2305      	movs	r3, #5
    236c:	4003      	ands	r3, r0
    236e:	548b      	strb	r3, [r1, r2]
	DMAC->CHINTENCLR.reg = (1UL << type);
    2370:	234c      	movs	r3, #76	; 0x4c
    2372:	4a0c      	ldr	r2, [pc, #48]	; (23a4 <app_uart_disable+0x90>)
    2374:	54d5      	strb	r5, [r2, r3]
    dma_disable_callback(&usart_dma_resource_rx, DMA_CALLBACK_TRANSFER_DONE);
    dma_free(&usart_dma_resource_rx);
    2376:	0020      	movs	r0, r4
    2378:	4b0b      	ldr	r3, [pc, #44]	; (23a8 <app_uart_disable+0x94>)
    237a:	4798      	blx	r3
}
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	20000768 	.word	0x20000768
    2384:	20000900 	.word	0x20000900
    2388:	000049c9 	.word	0x000049c9
    238c:	e000e100 	.word	0xe000e100
    2390:	20000754 	.word	0x20000754
    2394:	000030c9 	.word	0x000030c9
    2398:	20000bf0 	.word	0x20000bf0
    239c:	00002995 	.word	0x00002995
    23a0:	200009a0 	.word	0x200009a0
    23a4:	41004800 	.word	0x41004800
    23a8:	000028b1 	.word	0x000028b1

000023ac <usart_error_callback>:

void usart_error_callback(struct usart_module* const usart_module)
{
    23ac:	b510      	push	{r4, lr}
    app_uart_disable();  //
    23ae:	4b02      	ldr	r3, [pc, #8]	; (23b8 <usart_error_callback+0xc>)
    23b0:	4798      	blx	r3
    app_uart_enable();   // preserve rx_buffer contents
    23b2:	4b02      	ldr	r3, [pc, #8]	; (23bc <usart_error_callback+0x10>)
    23b4:	4798      	blx	r3
}
    23b6:	bd10      	pop	{r4, pc}
    23b8:	00002315 	.word	0x00002315
    23bc:	00001901 	.word	0x00001901

000023c0 <app_wdt_early_warning_callback>:
void app_wdt_early_warning_callback(void)
{
    // String can be up to 60 characters
    #warning "TODO: Apple add in eeprom write"
    //app_eeprom_write_error((char *)"Early Warning WDT");
}
    23c0:	4770      	bx	lr
	...

000023c4 <app_wdt_kick>:
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    23c4:	4b04      	ldr	r3, [pc, #16]	; (23d8 <app_wdt_kick+0x14>)
    23c6:	79db      	ldrb	r3, [r3, #7]
    if (!wdt_is_syncing())
    23c8:	b25b      	sxtb	r3, r3
    23ca:	2b00      	cmp	r3, #0
    23cc:	db02      	blt.n	23d4 <app_wdt_kick+0x10>
        WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    23ce:	22a5      	movs	r2, #165	; 0xa5
    23d0:	4b01      	ldr	r3, [pc, #4]	; (23d8 <app_wdt_kick+0x14>)
    23d2:	721a      	strb	r2, [r3, #8]
}
    23d4:	4770      	bx	lr
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	40001000 	.word	0x40001000

000023dc <app_wdt_enable>:
{
    23dc:	b500      	push	{lr}
    23de:	b083      	sub	sp, #12
    23e0:	4a0e      	ldr	r2, [pc, #56]	; (241c <app_wdt_enable+0x40>)
    23e2:	79d3      	ldrb	r3, [r2, #7]
    while (wdt_is_syncing())
    23e4:	b25b      	sxtb	r3, r3
    23e6:	2b00      	cmp	r3, #0
    23e8:	dbfb      	blt.n	23e2 <app_wdt_enable+0x6>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    23ea:	2300      	movs	r3, #0
    23ec:	466a      	mov	r2, sp
    23ee:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
    23f0:	2201      	movs	r2, #1
    23f2:	4669      	mov	r1, sp
    23f4:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30) && !(SAMR34) && !(SAMR35) && !(WLR089)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    23f6:	320b      	adds	r2, #11
    23f8:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
    23fa:	710b      	strb	r3, [r1, #4]
    config_wdt.clock_source         = GCLK_GENERATOR_3;
    23fc:	3303      	adds	r3, #3
    23fe:	708b      	strb	r3, [r1, #2]
    config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
    2400:	3308      	adds	r3, #8
    2402:	714b      	strb	r3, [r1, #5]
    wdt_register_callback(app_wdt_early_warning_callback, WDT_CALLBACK_EARLY_WARNING);
    2404:	2100      	movs	r1, #0
    2406:	4806      	ldr	r0, [pc, #24]	; (2420 <app_wdt_enable+0x44>)
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <app_wdt_enable+0x48>)
    240a:	4798      	blx	r3
    wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
    240c:	2000      	movs	r0, #0
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <app_wdt_enable+0x4c>)
    2410:	4798      	blx	r3
    wdt_set_config(&config_wdt);
    2412:	4668      	mov	r0, sp
    2414:	4b05      	ldr	r3, [pc, #20]	; (242c <app_wdt_enable+0x50>)
    2416:	4798      	blx	r3
}
    2418:	b003      	add	sp, #12
    241a:	bd00      	pop	{pc}
    241c:	40001000 	.word	0x40001000
    2420:	000023c1 	.word	0x000023c1
    2424:	00003849 	.word	0x00003849
    2428:	0000385d 	.word	0x0000385d
    242c:	00003749 	.word	0x00003749

00002430 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2430:	4a04      	ldr	r2, [pc, #16]	; (2444 <_extint_enable+0x14>)
    2432:	7813      	ldrb	r3, [r2, #0]
    2434:	2102      	movs	r1, #2
    2436:	430b      	orrs	r3, r1
    2438:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    243a:	7853      	ldrb	r3, [r2, #1]
    243c:	b25b      	sxtb	r3, r3
    243e:	2b00      	cmp	r3, #0
    2440:	dbfb      	blt.n	243a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2442:	4770      	bx	lr
    2444:	40001800 	.word	0x40001800

00002448 <_system_extint_init>:
{
    2448:	b500      	push	{lr}
    244a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    244c:	4a12      	ldr	r2, [pc, #72]	; (2498 <_system_extint_init+0x50>)
    244e:	6993      	ldr	r3, [r2, #24]
    2450:	2140      	movs	r1, #64	; 0x40
    2452:	430b      	orrs	r3, r1
    2454:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    2456:	a901      	add	r1, sp, #4
    2458:	2304      	movs	r3, #4
    245a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    245c:	2005      	movs	r0, #5
    245e:	4b0f      	ldr	r3, [pc, #60]	; (249c <_system_extint_init+0x54>)
    2460:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2462:	2005      	movs	r0, #5
    2464:	4b0e      	ldr	r3, [pc, #56]	; (24a0 <_system_extint_init+0x58>)
    2466:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2468:	4a0e      	ldr	r2, [pc, #56]	; (24a4 <_system_extint_init+0x5c>)
    246a:	7813      	ldrb	r3, [r2, #0]
    246c:	2101      	movs	r1, #1
    246e:	430b      	orrs	r3, r1
    2470:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2472:	7853      	ldrb	r3, [r2, #1]
    2474:	b25b      	sxtb	r3, r3
    2476:	2b00      	cmp	r3, #0
    2478:	dbfb      	blt.n	2472 <_system_extint_init+0x2a>
    247a:	4b0b      	ldr	r3, [pc, #44]	; (24a8 <_system_extint_init+0x60>)
    247c:	0019      	movs	r1, r3
    247e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2480:	2200      	movs	r2, #0
    2482:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2484:	4299      	cmp	r1, r3
    2486:	d1fc      	bne.n	2482 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2488:	2210      	movs	r2, #16
    248a:	4b08      	ldr	r3, [pc, #32]	; (24ac <_system_extint_init+0x64>)
    248c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    248e:	4b08      	ldr	r3, [pc, #32]	; (24b0 <_system_extint_init+0x68>)
    2490:	4798      	blx	r3
}
    2492:	b003      	add	sp, #12
    2494:	bd00      	pop	{pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	40000400 	.word	0x40000400
    249c:	00005189 	.word	0x00005189
    24a0:	000050fd 	.word	0x000050fd
    24a4:	40001800 	.word	0x40001800
    24a8:	20000c14 	.word	0x20000c14
    24ac:	e000e100 	.word	0xe000e100
    24b0:	00002431 	.word	0x00002431

000024b4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    24b4:	2300      	movs	r3, #0
    24b6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    24b8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    24ba:	2201      	movs	r2, #1
    24bc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    24be:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    24c0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    24c2:	3302      	adds	r3, #2
    24c4:	72c3      	strb	r3, [r0, #11]
}
    24c6:	4770      	bx	lr

000024c8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    24c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ca:	b083      	sub	sp, #12
    24cc:	0005      	movs	r5, r0
    24ce:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    24d0:	a901      	add	r1, sp, #4
    24d2:	2300      	movs	r3, #0
    24d4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    24d6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    24d8:	7923      	ldrb	r3, [r4, #4]
    24da:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    24dc:	7a23      	ldrb	r3, [r4, #8]
    24de:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    24e0:	7820      	ldrb	r0, [r4, #0]
    24e2:	4b15      	ldr	r3, [pc, #84]	; (2538 <extint_chan_set_config+0x70>)
    24e4:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    24e6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    24e8:	2d1f      	cmp	r5, #31
    24ea:	d800      	bhi.n	24ee <extint_chan_set_config+0x26>
		return eics[eic_index];
    24ec:	4813      	ldr	r0, [pc, #76]	; (253c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    24ee:	2207      	movs	r2, #7
    24f0:	402a      	ands	r2, r5
    24f2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    24f4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    24f6:	7aa3      	ldrb	r3, [r4, #10]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d001      	beq.n	2500 <extint_chan_set_config+0x38>
    24fc:	2308      	movs	r3, #8
    24fe:	431f      	orrs	r7, r3
    2500:	08eb      	lsrs	r3, r5, #3
    2502:	009b      	lsls	r3, r3, #2
    2504:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2506:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2508:	260f      	movs	r6, #15
    250a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    250c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    250e:	4097      	lsls	r7, r2
    2510:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2512:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    2514:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    2516:	7a63      	ldrb	r3, [r4, #9]
    2518:	2b00      	cmp	r3, #0
    251a:	d106      	bne.n	252a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    251c:	6943      	ldr	r3, [r0, #20]
    251e:	2201      	movs	r2, #1
    2520:	40aa      	lsls	r2, r5
    2522:	4393      	bics	r3, r2
    2524:	6143      	str	r3, [r0, #20]
	}
}
    2526:	b003      	add	sp, #12
    2528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    252a:	6942      	ldr	r2, [r0, #20]
    252c:	2301      	movs	r3, #1
    252e:	40ab      	lsls	r3, r5
    2530:	4313      	orrs	r3, r2
    2532:	6143      	str	r3, [r0, #20]
    2534:	e7f7      	b.n	2526 <extint_chan_set_config+0x5e>
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	000052b1 	.word	0x000052b1
    253c:	40001800 	.word	0x40001800

00002540 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2540:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2542:	2a00      	cmp	r2, #0
    2544:	d001      	beq.n	254a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2546:	0018      	movs	r0, r3
    2548:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    254a:	008b      	lsls	r3, r1, #2
    254c:	4a06      	ldr	r2, [pc, #24]	; (2568 <extint_register_callback+0x28>)
    254e:	589b      	ldr	r3, [r3, r2]
    2550:	2b00      	cmp	r3, #0
    2552:	d003      	beq.n	255c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    2554:	4283      	cmp	r3, r0
    2556:	d005      	beq.n	2564 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    2558:	231d      	movs	r3, #29
    255a:	e7f4      	b.n	2546 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    255c:	0089      	lsls	r1, r1, #2
    255e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    2560:	2300      	movs	r3, #0
    2562:	e7f0      	b.n	2546 <extint_register_callback+0x6>
		return STATUS_OK;
    2564:	2300      	movs	r3, #0
    2566:	e7ee      	b.n	2546 <extint_register_callback+0x6>
    2568:	20000c14 	.word	0x20000c14

0000256c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    256c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    256e:	2900      	cmp	r1, #0
    2570:	d001      	beq.n	2576 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    2572:	0018      	movs	r0, r3
    2574:	4770      	bx	lr
		return NULL;
    2576:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    2578:	281f      	cmp	r0, #31
    257a:	d800      	bhi.n	257e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    257c:	4a02      	ldr	r2, [pc, #8]	; (2588 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    257e:	2301      	movs	r3, #1
    2580:	4083      	lsls	r3, r0
    2582:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    2584:	2300      	movs	r3, #0
    2586:	e7f4      	b.n	2572 <extint_chan_enable_callback+0x6>
    2588:	40001800 	.word	0x40001800

0000258c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    258c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    258e:	2200      	movs	r2, #0
    2590:	4b10      	ldr	r3, [pc, #64]	; (25d4 <EIC_Handler+0x48>)
    2592:	701a      	strb	r2, [r3, #0]
    2594:	2300      	movs	r3, #0
    2596:	4910      	ldr	r1, [pc, #64]	; (25d8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2598:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    259a:	4e10      	ldr	r6, [pc, #64]	; (25dc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    259c:	4c0d      	ldr	r4, [pc, #52]	; (25d4 <EIC_Handler+0x48>)
    259e:	e00a      	b.n	25b6 <EIC_Handler+0x2a>
		return eics[eic_index];
    25a0:	490d      	ldr	r1, [pc, #52]	; (25d8 <EIC_Handler+0x4c>)
    25a2:	e008      	b.n	25b6 <EIC_Handler+0x2a>
    25a4:	7823      	ldrb	r3, [r4, #0]
    25a6:	3301      	adds	r3, #1
    25a8:	b2db      	uxtb	r3, r3
    25aa:	7023      	strb	r3, [r4, #0]
    25ac:	2b0f      	cmp	r3, #15
    25ae:	d810      	bhi.n	25d2 <EIC_Handler+0x46>
		return NULL;
    25b0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    25b2:	2b1f      	cmp	r3, #31
    25b4:	d9f4      	bls.n	25a0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    25b6:	0028      	movs	r0, r5
    25b8:	4018      	ands	r0, r3
    25ba:	2201      	movs	r2, #1
    25bc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    25be:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    25c0:	4210      	tst	r0, r2
    25c2:	d0ef      	beq.n	25a4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    25c4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    25c6:	009b      	lsls	r3, r3, #2
    25c8:	599b      	ldr	r3, [r3, r6]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d0ea      	beq.n	25a4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    25ce:	4798      	blx	r3
    25d0:	e7e8      	b.n	25a4 <EIC_Handler+0x18>
			}
		}
	}
}
    25d2:	bd70      	pop	{r4, r5, r6, pc}
    25d4:	20000c54 	.word	0x20000c54
    25d8:	40001800 	.word	0x40001800
    25dc:	20000c14 	.word	0x20000c14

000025e0 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    25e0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    25e2:	4b2f      	ldr	r3, [pc, #188]	; (26a0 <ADC_Handler+0xc0>)
    25e4:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    25e6:	682b      	ldr	r3, [r5, #0]
    25e8:	7e1a      	ldrb	r2, [r3, #24]
    25ea:	7ddc      	ldrb	r4, [r3, #23]
    25ec:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    25ee:	07e2      	lsls	r2, r4, #31
    25f0:	d416      	bmi.n	2620 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    25f2:	0763      	lsls	r3, r4, #29
    25f4:	d508      	bpl.n	2608 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    25f6:	2304      	movs	r3, #4
    25f8:	682a      	ldr	r2, [r5, #0]
    25fa:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    25fc:	7eeb      	ldrb	r3, [r5, #27]
    25fe:	079b      	lsls	r3, r3, #30
    2600:	d502      	bpl.n	2608 <ADC_Handler+0x28>
    2602:	7eab      	ldrb	r3, [r5, #26]
    2604:	079b      	lsls	r3, r3, #30
    2606:	d442      	bmi.n	268e <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2608:	07a3      	lsls	r3, r4, #30
    260a:	d508      	bpl.n	261e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    260c:	2302      	movs	r3, #2
    260e:	682a      	ldr	r2, [r5, #0]
    2610:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2612:	7eeb      	ldrb	r3, [r5, #27]
    2614:	075b      	lsls	r3, r3, #29
    2616:	d502      	bpl.n	261e <ADC_Handler+0x3e>
    2618:	7eab      	ldrb	r3, [r5, #26]
    261a:	075b      	lsls	r3, r3, #29
    261c:	d43b      	bmi.n	2696 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    261e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2620:	2201      	movs	r2, #1
    2622:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2624:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2626:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    2628:	b25b      	sxtb	r3, r3
    262a:	2b00      	cmp	r3, #0
    262c:	dbfb      	blt.n	2626 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    262e:	6969      	ldr	r1, [r5, #20]
    2630:	1c8b      	adds	r3, r1, #2
    2632:	616b      	str	r3, [r5, #20]
    2634:	8b53      	ldrh	r3, [r2, #26]
    2636:	b29b      	uxth	r3, r3
    2638:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    263a:	8b2b      	ldrh	r3, [r5, #24]
    263c:	3b01      	subs	r3, #1
    263e:	b29b      	uxth	r3, r3
    2640:	832b      	strh	r3, [r5, #24]
    2642:	2b00      	cmp	r3, #0
    2644:	d011      	beq.n	266a <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    2646:	7f6b      	ldrb	r3, [r5, #29]
    2648:	2b00      	cmp	r3, #0
    264a:	d0d2      	beq.n	25f2 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    264c:	682a      	ldr	r2, [r5, #0]
    264e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2650:	b25b      	sxtb	r3, r3
    2652:	2b00      	cmp	r3, #0
    2654:	dbfb      	blt.n	264e <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2656:	7b13      	ldrb	r3, [r2, #12]
    2658:	2102      	movs	r1, #2
    265a:	430b      	orrs	r3, r1
    265c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    265e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2660:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2662:	b25b      	sxtb	r3, r3
    2664:	2b00      	cmp	r3, #0
    2666:	dbfb      	blt.n	2660 <ADC_Handler+0x80>
    2668:	e7c3      	b.n	25f2 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    266a:	2301      	movs	r3, #1
    266c:	682a      	ldr	r2, [r5, #0]
    266e:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    2670:	7f2b      	ldrb	r3, [r5, #28]
    2672:	2b05      	cmp	r3, #5
    2674:	d1bd      	bne.n	25f2 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    2676:	2300      	movs	r3, #0
    2678:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    267a:	7eeb      	ldrb	r3, [r5, #27]
    267c:	07db      	lsls	r3, r3, #31
    267e:	d5b8      	bpl.n	25f2 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    2680:	7eab      	ldrb	r3, [r5, #26]
    2682:	07db      	lsls	r3, r3, #31
    2684:	d5b5      	bpl.n	25f2 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2686:	0028      	movs	r0, r5
    2688:	68ab      	ldr	r3, [r5, #8]
    268a:	4798      	blx	r3
    268c:	e7b1      	b.n	25f2 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    268e:	0028      	movs	r0, r5
    2690:	68eb      	ldr	r3, [r5, #12]
    2692:	4798      	blx	r3
    2694:	e7b8      	b.n	2608 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2696:	692b      	ldr	r3, [r5, #16]
    2698:	0028      	movs	r0, r5
    269a:	4798      	blx	r3
}
    269c:	e7bf      	b.n	261e <ADC_Handler+0x3e>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	20000c58 	.word	0x20000c58

000026a4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    26a4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    26a6:	4b26      	ldr	r3, [pc, #152]	; (2740 <DMAC_Handler+0x9c>)
    26a8:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    26aa:	4926      	ldr	r1, [pc, #152]	; (2744 <DMAC_Handler+0xa0>)
    26ac:	8c0b      	ldrh	r3, [r1, #32]
    26ae:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    26b0:	4013      	ands	r3, r2
    26b2:	009b      	lsls	r3, r3, #2
    26b4:	4824      	ldr	r0, [pc, #144]	; (2748 <DMAC_Handler+0xa4>)
    26b6:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    26b8:	7803      	ldrb	r3, [r0, #0]
    26ba:	401a      	ands	r2, r3
    26bc:	233f      	movs	r3, #63	; 0x3f
    26be:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
    26c0:	330f      	adds	r3, #15
    26c2:	5cca      	ldrb	r2, [r1, r3]
    26c4:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    26c6:	7803      	ldrb	r3, [r0, #0]
    26c8:	011b      	lsls	r3, r3, #4
    26ca:	4920      	ldr	r1, [pc, #128]	; (274c <DMAC_Handler+0xa8>)
    26cc:	18c9      	adds	r1, r1, r3
    26ce:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    26d0:	4c1f      	ldr	r4, [pc, #124]	; (2750 <DMAC_Handler+0xac>)
    26d2:	18e3      	adds	r3, r4, r3
    26d4:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    26d6:	1acb      	subs	r3, r1, r3
    26d8:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    26da:	07d3      	lsls	r3, r2, #31
    26dc:	d50f      	bpl.n	26fe <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    26de:	2101      	movs	r1, #1
    26e0:	234e      	movs	r3, #78	; 0x4e
    26e2:	4a18      	ldr	r2, [pc, #96]	; (2744 <DMAC_Handler+0xa0>)
    26e4:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    26e6:	3b3e      	subs	r3, #62	; 0x3e
    26e8:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    26ea:	7c03      	ldrb	r3, [r0, #16]
    26ec:	07db      	lsls	r3, r3, #31
    26ee:	d503      	bpl.n	26f8 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    26f0:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    26f2:	2b00      	cmp	r3, #0
    26f4:	d000      	beq.n	26f8 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    26f6:	4798      	blx	r3
	cpu_irq_leave_critical();
    26f8:	4b16      	ldr	r3, [pc, #88]	; (2754 <DMAC_Handler+0xb0>)
    26fa:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
    26fc:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    26fe:	0793      	lsls	r3, r2, #30
    2700:	d50d      	bpl.n	271e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    2702:	2102      	movs	r1, #2
    2704:	234e      	movs	r3, #78	; 0x4e
    2706:	4a0f      	ldr	r2, [pc, #60]	; (2744 <DMAC_Handler+0xa0>)
    2708:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
    270a:	2300      	movs	r3, #0
    270c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    270e:	7c03      	ldrb	r3, [r0, #16]
    2710:	079b      	lsls	r3, r3, #30
    2712:	d5f1      	bpl.n	26f8 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    2714:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    2716:	2b00      	cmp	r3, #0
    2718:	d0ee      	beq.n	26f8 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    271a:	4798      	blx	r3
    271c:	e7ec      	b.n	26f8 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    271e:	0753      	lsls	r3, r2, #29
    2720:	d5ea      	bpl.n	26f8 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    2722:	2104      	movs	r1, #4
    2724:	234e      	movs	r3, #78	; 0x4e
    2726:	4a07      	ldr	r2, [pc, #28]	; (2744 <DMAC_Handler+0xa0>)
    2728:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
    272a:	3b48      	subs	r3, #72	; 0x48
    272c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    272e:	7c03      	ldrb	r3, [r0, #16]
    2730:	075b      	lsls	r3, r3, #29
    2732:	d5e1      	bpl.n	26f8 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    2734:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2736:	2b00      	cmp	r3, #0
    2738:	d0de      	beq.n	26f8 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    273a:	4798      	blx	r3
    273c:	e7dc      	b.n	26f8 <DMAC_Handler+0x54>
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	00004c79 	.word	0x00004c79
    2744:	41004800 	.word	0x41004800
    2748:	20000934 	.word	0x20000934
    274c:	20000c60 	.word	0x20000c60
    2750:	20000950 	.word	0x20000950
    2754:	00004cb9 	.word	0x00004cb9

00002758 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
    2758:	2300      	movs	r3, #0
    275a:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
    275c:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
    275e:	2203      	movs	r2, #3
    2760:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
    2762:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
    2764:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
    2766:	4770      	bx	lr

00002768 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
    2768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    276a:	46ce      	mov	lr, r9
    276c:	4647      	mov	r7, r8
    276e:	b580      	push	{r7, lr}
    2770:	0005      	movs	r5, r0
    2772:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
    2774:	4b45      	ldr	r3, [pc, #276]	; (288c <dma_allocate+0x124>)
    2776:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
    2778:	4b45      	ldr	r3, [pc, #276]	; (2890 <dma_allocate+0x128>)
    277a:	781b      	ldrb	r3, [r3, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d118      	bne.n	27b2 <dma_allocate+0x4a>
	PM->AHBMASK.reg |= ahb_mask;
    2780:	4b44      	ldr	r3, [pc, #272]	; (2894 <dma_allocate+0x12c>)
    2782:	695a      	ldr	r2, [r3, #20]
    2784:	2120      	movs	r1, #32
    2786:	430a      	orrs	r2, r1
    2788:	615a      	str	r2, [r3, #20]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    278a:	69da      	ldr	r2, [r3, #28]
    278c:	3910      	subs	r1, #16
    278e:	430a      	orrs	r2, r1
    2790:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2792:	4b41      	ldr	r3, [pc, #260]	; (2898 <dma_allocate+0x130>)
    2794:	881a      	ldrh	r2, [r3, #0]
    2796:	390e      	subs	r1, #14
    2798:	438a      	bics	r2, r1
    279a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    279c:	2201      	movs	r2, #1
    279e:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    27a0:	4a3e      	ldr	r2, [pc, #248]	; (289c <dma_allocate+0x134>)
    27a2:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    27a4:	4a3e      	ldr	r2, [pc, #248]	; (28a0 <dma_allocate+0x138>)
    27a6:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    27a8:	4a3e      	ldr	r2, [pc, #248]	; (28a4 <dma_allocate+0x13c>)
    27aa:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
    27ac:	4b38      	ldr	r3, [pc, #224]	; (2890 <dma_allocate+0x128>)
    27ae:	2201      	movs	r2, #1
    27b0:	701a      	strb	r2, [r3, #0]
    27b2:	4b36      	ldr	r3, [pc, #216]	; (288c <dma_allocate+0x124>)
    27b4:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
    27b6:	4b36      	ldr	r3, [pc, #216]	; (2890 <dma_allocate+0x128>)
    27b8:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
    27ba:	07da      	lsls	r2, r3, #31
    27bc:	d50f      	bpl.n	27de <dma_allocate+0x76>
		tmp = tmp >> 1;
    27be:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    27c0:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
    27c2:	2201      	movs	r2, #1
    27c4:	421a      	tst	r2, r3
    27c6:	d00b      	beq.n	27e0 <dma_allocate+0x78>
		tmp = tmp >> 1;
    27c8:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    27ca:	3401      	adds	r4, #1
    27cc:	b2e4      	uxtb	r4, r4
    27ce:	2c05      	cmp	r4, #5
    27d0:	d1f8      	bne.n	27c4 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
    27d2:	4b35      	ldr	r3, [pc, #212]	; (28a8 <dma_allocate+0x140>)
    27d4:	4798      	blx	r3
    27d6:	4b34      	ldr	r3, [pc, #208]	; (28a8 <dma_allocate+0x140>)
    27d8:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
    27da:	2014      	movs	r0, #20
    27dc:	e051      	b.n	2882 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    27de:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
    27e0:	4a2b      	ldr	r2, [pc, #172]	; (2890 <dma_allocate+0x128>)
    27e2:	6851      	ldr	r1, [r2, #4]
    27e4:	2301      	movs	r3, #1
    27e6:	40a3      	lsls	r3, r4
    27e8:	430b      	orrs	r3, r1
    27ea:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
    27ec:	7a13      	ldrb	r3, [r2, #8]
    27ee:	3b01      	subs	r3, #1
    27f0:	7213      	strb	r3, [r2, #8]
    27f2:	4b2d      	ldr	r3, [pc, #180]	; (28a8 <dma_allocate+0x140>)
    27f4:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
    27f6:	2cff      	cmp	r4, #255	; 0xff
    27f8:	d0ed      	beq.n	27d6 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
    27fa:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    27fc:	230f      	movs	r3, #15
    27fe:	4698      	mov	r8, r3
    2800:	401c      	ands	r4, r3
    2802:	4f25      	ldr	r7, [pc, #148]	; (2898 <dma_allocate+0x130>)
    2804:	3330      	adds	r3, #48	; 0x30
    2806:	4699      	mov	r9, r3
    2808:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    280a:	3301      	adds	r3, #1
    280c:	5cfa      	ldrb	r2, [r7, r3]
    280e:	2102      	movs	r1, #2
    2810:	438a      	bics	r2, r1
    2812:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    2814:	2401      	movs	r4, #1
    2816:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
    2818:	4b1c      	ldr	r3, [pc, #112]	; (288c <dma_allocate+0x124>)
    281a:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    281c:	782b      	ldrb	r3, [r5, #0]
    281e:	4642      	mov	r2, r8
    2820:	4013      	ands	r3, r2
    2822:	464a      	mov	r2, r9
    2824:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    2826:	693b      	ldr	r3, [r7, #16]
    2828:	782a      	ldrb	r2, [r5, #0]
    282a:	4094      	lsls	r4, r2
    282c:	43a3      	bics	r3, r4
    282e:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    2830:	7832      	ldrb	r2, [r6, #0]
    2832:	0152      	lsls	r2, r2, #5
    2834:	2360      	movs	r3, #96	; 0x60
    2836:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    2838:	7872      	ldrb	r2, [r6, #1]
    283a:	0212      	lsls	r2, r2, #8
    283c:	21fc      	movs	r1, #252	; 0xfc
    283e:	0189      	lsls	r1, r1, #6
    2840:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    2842:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
    2844:	78b2      	ldrb	r2, [r6, #2]
    2846:	0592      	lsls	r2, r2, #22
    2848:	21c0      	movs	r1, #192	; 0xc0
    284a:	0409      	lsls	r1, r1, #16
    284c:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    284e:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
    2850:	78f1      	ldrb	r1, [r6, #3]
    2852:	2900      	cmp	r1, #0
    2854:	d004      	beq.n	2860 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
    2856:	2207      	movs	r2, #7
    2858:	400a      	ands	r2, r1
    285a:	2108      	movs	r1, #8
    285c:	430a      	orrs	r2, r1
    285e:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
    2860:	7932      	ldrb	r2, [r6, #4]
    2862:	2a00      	cmp	r2, #0
    2864:	d001      	beq.n	286a <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
    2866:	2210      	movs	r2, #16
    2868:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    286a:	4a0b      	ldr	r2, [pc, #44]	; (2898 <dma_allocate+0x130>)
    286c:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
    286e:	4c0e      	ldr	r4, [pc, #56]	; (28a8 <dma_allocate+0x140>)
    2870:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
    2872:	2300      	movs	r3, #0
    2874:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
    2876:	782b      	ldrb	r3, [r5, #0]
    2878:	009b      	lsls	r3, r3, #2
    287a:	4a0c      	ldr	r2, [pc, #48]	; (28ac <dma_allocate+0x144>)
    287c:	509d      	str	r5, [r3, r2]
    287e:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
    2880:	2000      	movs	r0, #0
}
    2882:	bc0c      	pop	{r2, r3}
    2884:	4690      	mov	r8, r2
    2886:	4699      	mov	r9, r3
    2888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	00004c79 	.word	0x00004c79
    2890:	200001dc 	.word	0x200001dc
    2894:	40000400 	.word	0x40000400
    2898:	41004800 	.word	0x41004800
    289c:	20000c60 	.word	0x20000c60
    28a0:	20000950 	.word	0x20000950
    28a4:	00000f02 	.word	0x00000f02
    28a8:	00004cb9 	.word	0x00004cb9
    28ac:	20000934 	.word	0x20000934

000028b0 <dma_free>:
 * \retval STATUS_OK The DMA resource was freed successfully
 * \retval STATUS_BUSY The DMA resource was busy and can't be freed
 * \retval STATUS_ERR_NOT_INITIALIZED DMA resource was not initialized
 */
enum status_code dma_free(struct dma_resource *resource)
{
    28b0:	b510      	push	{r4, lr}
    28b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28b4:	4b11      	ldr	r3, [pc, #68]	; (28fc <dma_free+0x4c>)
    28b6:	4798      	blx	r3
	return (resource->job_status == STATUS_BUSY);
    28b8:	7c63      	ldrb	r3, [r4, #17]
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if channel is busy */
	if (dma_is_busy(resource)) {
    28ba:	2b05      	cmp	r3, #5
    28bc:	d00a      	beq.n	28d4 <dma_free+0x24>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if DMA resource was not allocated */
	if (!(_dma_inst.allocated_channels & (1 << resource->channel_id))) {
    28be:	4b10      	ldr	r3, [pc, #64]	; (2900 <dma_free+0x50>)
    28c0:	685a      	ldr	r2, [r3, #4]
    28c2:	7821      	ldrb	r1, [r4, #0]
    28c4:	2301      	movs	r3, #1
    28c6:	408b      	lsls	r3, r1
    28c8:	421a      	tst	r2, r3
    28ca:	d107      	bne.n	28dc <dma_free+0x2c>
	cpu_irq_leave_critical();
    28cc:	4b0d      	ldr	r3, [pc, #52]	; (2904 <dma_free+0x54>)
    28ce:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_NOT_INITIALIZED;
    28d0:	201f      	movs	r0, #31
	_dma_active_resource[resource->channel_id] = NULL;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
    28d2:	bd10      	pop	{r4, pc}
    28d4:	4b0b      	ldr	r3, [pc, #44]	; (2904 <dma_free+0x54>)
    28d6:	4798      	blx	r3
		return STATUS_BUSY;
    28d8:	2005      	movs	r0, #5
    28da:	e7fa      	b.n	28d2 <dma_free+0x22>
	_dma_inst.allocated_channels &= ~(1 << channel);
    28dc:	4a08      	ldr	r2, [pc, #32]	; (2900 <dma_free+0x50>)
    28de:	6851      	ldr	r1, [r2, #4]
    28e0:	4399      	bics	r1, r3
    28e2:	6051      	str	r1, [r2, #4]
	_dma_inst.free_channels++;
    28e4:	7a13      	ldrb	r3, [r2, #8]
    28e6:	3301      	adds	r3, #1
    28e8:	7213      	strb	r3, [r2, #8]
	_dma_active_resource[resource->channel_id] = NULL;
    28ea:	7823      	ldrb	r3, [r4, #0]
    28ec:	009b      	lsls	r3, r3, #2
    28ee:	2100      	movs	r1, #0
    28f0:	4a05      	ldr	r2, [pc, #20]	; (2908 <dma_free+0x58>)
    28f2:	5099      	str	r1, [r3, r2]
    28f4:	4b03      	ldr	r3, [pc, #12]	; (2904 <dma_free+0x54>)
    28f6:	4798      	blx	r3
	return STATUS_OK;
    28f8:	2000      	movs	r0, #0
    28fa:	e7ea      	b.n	28d2 <dma_free+0x22>
    28fc:	00004c79 	.word	0x00004c79
    2900:	200001dc 	.word	0x200001dc
    2904:	00004cb9 	.word	0x00004cb9
    2908:	20000934 	.word	0x20000934

0000290c <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
    290c:	b570      	push	{r4, r5, r6, lr}
    290e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2910:	4b19      	ldr	r3, [pc, #100]	; (2978 <dma_start_transfer_job+0x6c>)
    2912:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
    2914:	7c63      	ldrb	r3, [r4, #17]
    2916:	2b05      	cmp	r3, #5
    2918:	d008      	beq.n	292c <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
    291a:	69a3      	ldr	r3, [r4, #24]
    291c:	885b      	ldrh	r3, [r3, #2]
    291e:	b29b      	uxth	r3, r3
    2920:	2b00      	cmp	r3, #0
    2922:	d107      	bne.n	2934 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
    2924:	4b15      	ldr	r3, [pc, #84]	; (297c <dma_start_transfer_job+0x70>)
    2926:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
    2928:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
    292a:	bd70      	pop	{r4, r5, r6, pc}
    292c:	4b13      	ldr	r3, [pc, #76]	; (297c <dma_start_transfer_job+0x70>)
    292e:	4798      	blx	r3
		return STATUS_BUSY;
    2930:	2005      	movs	r0, #5
    2932:	e7fa      	b.n	292a <dma_start_transfer_job+0x1e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2934:	2640      	movs	r6, #64	; 0x40
    2936:	4b12      	ldr	r3, [pc, #72]	; (2980 <dma_start_transfer_job+0x74>)
    2938:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    293a:	7822      	ldrb	r2, [r4, #0]
    293c:	230f      	movs	r3, #15
    293e:	4013      	ands	r3, r2
    2940:	4d10      	ldr	r5, [pc, #64]	; (2984 <dma_start_transfer_job+0x78>)
    2942:	223f      	movs	r2, #63	; 0x3f
    2944:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
    2946:	7823      	ldrb	r3, [r4, #0]
    2948:	4a0f      	ldr	r2, [pc, #60]	; (2988 <dma_start_transfer_job+0x7c>)
    294a:	5cd2      	ldrb	r2, [r2, r3]
    294c:	2307      	movs	r3, #7
    294e:	4013      	ands	r3, r2
    2950:	224d      	movs	r2, #77	; 0x4d
    2952:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
    2954:	2305      	movs	r3, #5
    2956:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    2958:	7820      	ldrb	r0, [r4, #0]
    295a:	0100      	lsls	r0, r0, #4
    295c:	4b0b      	ldr	r3, [pc, #44]	; (298c <dma_start_transfer_job+0x80>)
    295e:	18c0      	adds	r0, r0, r3
    2960:	69a1      	ldr	r1, [r4, #24]
    2962:	3a3d      	subs	r2, #61	; 0x3d
    2964:	4b0a      	ldr	r3, [pc, #40]	; (2990 <dma_start_transfer_job+0x84>)
    2966:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2968:	5dab      	ldrb	r3, [r5, r6]
    296a:	2202      	movs	r2, #2
    296c:	4313      	orrs	r3, r2
    296e:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
    2970:	4b02      	ldr	r3, [pc, #8]	; (297c <dma_start_transfer_job+0x70>)
    2972:	4798      	blx	r3
	return STATUS_OK;
    2974:	2000      	movs	r0, #0
    2976:	e7d8      	b.n	292a <dma_start_transfer_job+0x1e>
    2978:	00004c79 	.word	0x00004c79
    297c:	00004cb9 	.word	0x00004cb9
    2980:	e000e100 	.word	0xe000e100
    2984:	41004800 	.word	0x41004800
    2988:	200009a0 	.word	0x200009a0
    298c:	20000c60 	.word	0x20000c60
    2990:	00005707 	.word	0x00005707

00002994 <dma_abort_job>:
 *
 * \param[in,out] resource Pointer to the DMA resource
 *
 */
void dma_abort_job(struct dma_resource *resource)
{
    2994:	b510      	push	{r4, lr}
    2996:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2998:	4b0c      	ldr	r3, [pc, #48]	; (29cc <dma_abort_job+0x38>)
    299a:	4798      	blx	r3
	Assert(resource);
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    299c:	7822      	ldrb	r2, [r4, #0]
    299e:	230f      	movs	r3, #15
    29a0:	4013      	ands	r3, r2
    29a2:	4a0b      	ldr	r2, [pc, #44]	; (29d0 <dma_abort_job+0x3c>)
    29a4:	213f      	movs	r1, #63	; 0x3f
    29a6:	5453      	strb	r3, [r2, r1]
	DMAC->CHCTRLA.reg = 0;
    29a8:	2100      	movs	r1, #0
    29aa:	2340      	movs	r3, #64	; 0x40
    29ac:	54d1      	strb	r1, [r2, r3]
	cpu_irq_leave_critical();
    29ae:	4b09      	ldr	r3, [pc, #36]	; (29d4 <dma_abort_job+0x40>)
    29b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Get transferred size */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    29b2:	7823      	ldrb	r3, [r4, #0]
    29b4:	011b      	lsls	r3, r3, #4
    29b6:	4a08      	ldr	r2, [pc, #32]	; (29d8 <dma_abort_job+0x44>)
    29b8:	18d2      	adds	r2, r2, r3
    29ba:	8852      	ldrh	r2, [r2, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    29bc:	4907      	ldr	r1, [pc, #28]	; (29dc <dma_abort_job+0x48>)
    29be:	18cb      	adds	r3, r1, r3
    29c0:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    29c2:	1ad3      	subs	r3, r2, r3
    29c4:	6163      	str	r3, [r4, #20]

	resource->job_status = STATUS_ABORTED;
    29c6:	2304      	movs	r3, #4
    29c8:	7463      	strb	r3, [r4, #17]
}
    29ca:	bd10      	pop	{r4, pc}
    29cc:	00004c79 	.word	0x00004c79
    29d0:	41004800 	.word	0x41004800
    29d4:	00004cb9 	.word	0x00004cb9
    29d8:	20000c60 	.word	0x20000c60
    29dc:	20000950 	.word	0x20000950

000029e0 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
    29e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
    29e2:	780a      	ldrb	r2, [r1, #0]
    29e4:	8803      	ldrh	r3, [r0, #0]
    29e6:	2601      	movs	r6, #1
    29e8:	4032      	ands	r2, r6
    29ea:	2401      	movs	r4, #1
    29ec:	43a3      	bics	r3, r4
    29ee:	4313      	orrs	r3, r2
    29f0:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
    29f2:	784b      	ldrb	r3, [r1, #1]
    29f4:	8804      	ldrh	r4, [r0, #0]
    29f6:	2703      	movs	r7, #3
    29f8:	403b      	ands	r3, r7
    29fa:	005b      	lsls	r3, r3, #1
    29fc:	2206      	movs	r2, #6
    29fe:	4394      	bics	r4, r2
    2a00:	431c      	orrs	r4, r3
    2a02:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
    2a04:	788d      	ldrb	r5, [r1, #2]
    2a06:	8804      	ldrh	r4, [r0, #0]
    2a08:	403d      	ands	r5, r7
    2a0a:	00ed      	lsls	r5, r5, #3
    2a0c:	2318      	movs	r3, #24
    2a0e:	439c      	bics	r4, r3
    2a10:	432c      	orrs	r4, r5
    2a12:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
    2a14:	78ca      	ldrb	r2, [r1, #3]
    2a16:	8803      	ldrh	r3, [r0, #0]
    2a18:	403a      	ands	r2, r7
    2a1a:	0212      	lsls	r2, r2, #8
    2a1c:	4c16      	ldr	r4, [pc, #88]	; (2a78 <dma_descriptor_create+0x98>)
    2a1e:	4023      	ands	r3, r4
    2a20:	4313      	orrs	r3, r2
    2a22:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
    2a24:	790b      	ldrb	r3, [r1, #4]
    2a26:	8804      	ldrh	r4, [r0, #0]
    2a28:	4033      	ands	r3, r6
    2a2a:	029b      	lsls	r3, r3, #10
    2a2c:	4a13      	ldr	r2, [pc, #76]	; (2a7c <dma_descriptor_create+0x9c>)
    2a2e:	4014      	ands	r4, r2
    2a30:	431c      	orrs	r4, r3
    2a32:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
    2a34:	794d      	ldrb	r5, [r1, #5]
    2a36:	8804      	ldrh	r4, [r0, #0]
    2a38:	4035      	ands	r5, r6
    2a3a:	02ed      	lsls	r5, r5, #11
    2a3c:	4b10      	ldr	r3, [pc, #64]	; (2a80 <dma_descriptor_create+0xa0>)
    2a3e:	401c      	ands	r4, r3
    2a40:	432c      	orrs	r4, r5
    2a42:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
    2a44:	798a      	ldrb	r2, [r1, #6]
    2a46:	8803      	ldrh	r3, [r0, #0]
    2a48:	4032      	ands	r2, r6
    2a4a:	0312      	lsls	r2, r2, #12
    2a4c:	4c0d      	ldr	r4, [pc, #52]	; (2a84 <dma_descriptor_create+0xa4>)
    2a4e:	4023      	ands	r3, r4
    2a50:	4313      	orrs	r3, r2
    2a52:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
    2a54:	79cb      	ldrb	r3, [r1, #7]
    2a56:	2207      	movs	r2, #7
    2a58:	401a      	ands	r2, r3
    2a5a:	8803      	ldrh	r3, [r0, #0]
    2a5c:	0352      	lsls	r2, r2, #13
    2a5e:	04db      	lsls	r3, r3, #19
    2a60:	0cdb      	lsrs	r3, r3, #19
    2a62:	4313      	orrs	r3, r2
    2a64:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
    2a66:	890b      	ldrh	r3, [r1, #8]
    2a68:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
    2a6a:	68cb      	ldr	r3, [r1, #12]
    2a6c:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
    2a6e:	690b      	ldr	r3, [r1, #16]
    2a70:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
    2a72:	694b      	ldr	r3, [r1, #20]
    2a74:	60c3      	str	r3, [r0, #12]
}
    2a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a78:	fffffcff 	.word	0xfffffcff
    2a7c:	fffffbff 	.word	0xfffffbff
    2a80:	fffff7ff 	.word	0xfffff7ff
    2a84:	ffffefff 	.word	0xffffefff

00002a88 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
    2a88:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
    2a8a:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
    2a8c:	2a05      	cmp	r2, #5
    2a8e:	d00b      	beq.n	2aa8 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
    2a90:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    2a92:	2b00      	cmp	r3, #0
    2a94:	d00a      	beq.n	2aac <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
    2a96:	68da      	ldr	r2, [r3, #12]
    2a98:	2a00      	cmp	r2, #0
    2a9a:	d003      	beq.n	2aa4 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    2a9c:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
    2a9e:	68da      	ldr	r2, [r3, #12]
    2aa0:	2a00      	cmp	r2, #0
    2aa2:	d1fb      	bne.n	2a9c <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
    2aa4:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
    2aa6:	2300      	movs	r3, #0
}
    2aa8:	0018      	movs	r0, r3
    2aaa:	4770      	bx	lr
		resource->descriptor = descriptor;
    2aac:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
    2aae:	2300      	movs	r3, #0
    2ab0:	e7fa      	b.n	2aa8 <dma_add_descriptor+0x20>

00002ab2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab4:	46de      	mov	lr, fp
    2ab6:	4657      	mov	r7, sl
    2ab8:	464e      	mov	r6, r9
    2aba:	4645      	mov	r5, r8
    2abc:	b5e0      	push	{r5, r6, r7, lr}
    2abe:	b087      	sub	sp, #28
    2ac0:	4680      	mov	r8, r0
    2ac2:	9104      	str	r1, [sp, #16]
    2ac4:	0016      	movs	r6, r2
    2ac6:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2ac8:	2200      	movs	r2, #0
    2aca:	2300      	movs	r3, #0
    2acc:	2100      	movs	r1, #0
    2ace:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    2ad0:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2ad2:	2001      	movs	r0, #1
    2ad4:	0021      	movs	r1, r4
    2ad6:	9600      	str	r6, [sp, #0]
    2ad8:	9701      	str	r7, [sp, #4]
    2ada:	465c      	mov	r4, fp
    2adc:	9403      	str	r4, [sp, #12]
    2ade:	4644      	mov	r4, r8
    2ae0:	9405      	str	r4, [sp, #20]
    2ae2:	e013      	b.n	2b0c <long_division+0x5a>
    2ae4:	2420      	movs	r4, #32
    2ae6:	1a64      	subs	r4, r4, r1
    2ae8:	0005      	movs	r5, r0
    2aea:	40e5      	lsrs	r5, r4
    2aec:	46a8      	mov	r8, r5
    2aee:	e014      	b.n	2b1a <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    2af0:	9c00      	ldr	r4, [sp, #0]
    2af2:	9d01      	ldr	r5, [sp, #4]
    2af4:	1b12      	subs	r2, r2, r4
    2af6:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2af8:	465c      	mov	r4, fp
    2afa:	464d      	mov	r5, r9
    2afc:	432c      	orrs	r4, r5
    2afe:	46a3      	mov	fp, r4
    2b00:	9c03      	ldr	r4, [sp, #12]
    2b02:	4645      	mov	r5, r8
    2b04:	432c      	orrs	r4, r5
    2b06:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    2b08:	3901      	subs	r1, #1
    2b0a:	d325      	bcc.n	2b58 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    2b0c:	2420      	movs	r4, #32
    2b0e:	4264      	negs	r4, r4
    2b10:	190c      	adds	r4, r1, r4
    2b12:	d4e7      	bmi.n	2ae4 <long_division+0x32>
    2b14:	0005      	movs	r5, r0
    2b16:	40a5      	lsls	r5, r4
    2b18:	46a8      	mov	r8, r5
    2b1a:	0004      	movs	r4, r0
    2b1c:	408c      	lsls	r4, r1
    2b1e:	46a1      	mov	r9, r4
		r = r << 1;
    2b20:	1892      	adds	r2, r2, r2
    2b22:	415b      	adcs	r3, r3
    2b24:	0014      	movs	r4, r2
    2b26:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2b28:	9e05      	ldr	r6, [sp, #20]
    2b2a:	464f      	mov	r7, r9
    2b2c:	403e      	ands	r6, r7
    2b2e:	46b4      	mov	ip, r6
    2b30:	9e04      	ldr	r6, [sp, #16]
    2b32:	4647      	mov	r7, r8
    2b34:	403e      	ands	r6, r7
    2b36:	46b2      	mov	sl, r6
    2b38:	4666      	mov	r6, ip
    2b3a:	4657      	mov	r7, sl
    2b3c:	433e      	orrs	r6, r7
    2b3e:	d003      	beq.n	2b48 <long_division+0x96>
			r |= 0x01;
    2b40:	0006      	movs	r6, r0
    2b42:	4326      	orrs	r6, r4
    2b44:	0032      	movs	r2, r6
    2b46:	002b      	movs	r3, r5
		if (r >= d) {
    2b48:	9c00      	ldr	r4, [sp, #0]
    2b4a:	9d01      	ldr	r5, [sp, #4]
    2b4c:	429d      	cmp	r5, r3
    2b4e:	d8db      	bhi.n	2b08 <long_division+0x56>
    2b50:	d1ce      	bne.n	2af0 <long_division+0x3e>
    2b52:	4294      	cmp	r4, r2
    2b54:	d8d8      	bhi.n	2b08 <long_division+0x56>
    2b56:	e7cb      	b.n	2af0 <long_division+0x3e>
    2b58:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2b5a:	4658      	mov	r0, fp
    2b5c:	0019      	movs	r1, r3
    2b5e:	b007      	add	sp, #28
    2b60:	bc3c      	pop	{r2, r3, r4, r5}
    2b62:	4690      	mov	r8, r2
    2b64:	4699      	mov	r9, r3
    2b66:	46a2      	mov	sl, r4
    2b68:	46ab      	mov	fp, r5
    2b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002b6c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2b6c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2b6e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2b70:	2340      	movs	r3, #64	; 0x40
    2b72:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2b74:	4281      	cmp	r1, r0
    2b76:	d202      	bcs.n	2b7e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2b78:	0018      	movs	r0, r3
    2b7a:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2b7c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2b7e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2b80:	1c63      	adds	r3, r4, #1
    2b82:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2b84:	4288      	cmp	r0, r1
    2b86:	d9f9      	bls.n	2b7c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2b88:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2b8a:	2cff      	cmp	r4, #255	; 0xff
    2b8c:	d8f4      	bhi.n	2b78 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2b8e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2b90:	2300      	movs	r3, #0
    2b92:	e7f1      	b.n	2b78 <_sercom_get_sync_baud_val+0xc>

00002b94 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b96:	b083      	sub	sp, #12
    2b98:	000f      	movs	r7, r1
    2b9a:	0016      	movs	r6, r2
    2b9c:	aa08      	add	r2, sp, #32
    2b9e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2ba0:	0004      	movs	r4, r0
    2ba2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ba4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2ba6:	42bc      	cmp	r4, r7
    2ba8:	d902      	bls.n	2bb0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2baa:	0010      	movs	r0, r2
    2bac:	b003      	add	sp, #12
    2bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d114      	bne.n	2bde <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2bb4:	0002      	movs	r2, r0
    2bb6:	0008      	movs	r0, r1
    2bb8:	2100      	movs	r1, #0
    2bba:	4c19      	ldr	r4, [pc, #100]	; (2c20 <_sercom_get_async_baud_val+0x8c>)
    2bbc:	47a0      	blx	r4
    2bbe:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2bc0:	003a      	movs	r2, r7
    2bc2:	2300      	movs	r3, #0
    2bc4:	2000      	movs	r0, #0
    2bc6:	4c17      	ldr	r4, [pc, #92]	; (2c24 <_sercom_get_async_baud_val+0x90>)
    2bc8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2bca:	2200      	movs	r2, #0
    2bcc:	2301      	movs	r3, #1
    2bce:	1a12      	subs	r2, r2, r0
    2bd0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2bd2:	0c12      	lsrs	r2, r2, #16
    2bd4:	041b      	lsls	r3, r3, #16
    2bd6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    2bd8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    2bda:	2200      	movs	r2, #0
    2bdc:	e7e5      	b.n	2baa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    2bde:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2be0:	2b01      	cmp	r3, #1
    2be2:	d1f9      	bne.n	2bd8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2be4:	000a      	movs	r2, r1
    2be6:	2300      	movs	r3, #0
    2be8:	2100      	movs	r1, #0
    2bea:	4c0d      	ldr	r4, [pc, #52]	; (2c20 <_sercom_get_async_baud_val+0x8c>)
    2bec:	47a0      	blx	r4
    2bee:	0002      	movs	r2, r0
    2bf0:	000b      	movs	r3, r1
    2bf2:	9200      	str	r2, [sp, #0]
    2bf4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    2bf6:	0038      	movs	r0, r7
    2bf8:	2100      	movs	r1, #0
    2bfa:	4c0a      	ldr	r4, [pc, #40]	; (2c24 <_sercom_get_async_baud_val+0x90>)
    2bfc:	47a0      	blx	r4
    2bfe:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2c00:	2380      	movs	r3, #128	; 0x80
    2c02:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2c04:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    2c06:	4298      	cmp	r0, r3
    2c08:	d8cf      	bhi.n	2baa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2c0a:	0f79      	lsrs	r1, r7, #29
    2c0c:	00f8      	lsls	r0, r7, #3
    2c0e:	9a00      	ldr	r2, [sp, #0]
    2c10:	9b01      	ldr	r3, [sp, #4]
    2c12:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2c14:	00ea      	lsls	r2, r5, #3
    2c16:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2c18:	b2d2      	uxtb	r2, r2
    2c1a:	0352      	lsls	r2, r2, #13
    2c1c:	432a      	orrs	r2, r5
    2c1e:	e7db      	b.n	2bd8 <_sercom_get_async_baud_val+0x44>
    2c20:	000055f1 	.word	0x000055f1
    2c24:	00002ab3 	.word	0x00002ab3

00002c28 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2c28:	b510      	push	{r4, lr}
    2c2a:	b082      	sub	sp, #8
    2c2c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2c2e:	4b0e      	ldr	r3, [pc, #56]	; (2c68 <sercom_set_gclk_generator+0x40>)
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d007      	beq.n	2c46 <sercom_set_gclk_generator+0x1e>
    2c36:	2900      	cmp	r1, #0
    2c38:	d105      	bne.n	2c46 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2c3a:	4b0b      	ldr	r3, [pc, #44]	; (2c68 <sercom_set_gclk_generator+0x40>)
    2c3c:	785b      	ldrb	r3, [r3, #1]
    2c3e:	4283      	cmp	r3, r0
    2c40:	d010      	beq.n	2c64 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2c42:	201d      	movs	r0, #29
    2c44:	e00c      	b.n	2c60 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2c46:	a901      	add	r1, sp, #4
    2c48:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2c4a:	2013      	movs	r0, #19
    2c4c:	4b07      	ldr	r3, [pc, #28]	; (2c6c <sercom_set_gclk_generator+0x44>)
    2c4e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2c50:	2013      	movs	r0, #19
    2c52:	4b07      	ldr	r3, [pc, #28]	; (2c70 <sercom_set_gclk_generator+0x48>)
    2c54:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2c56:	4b04      	ldr	r3, [pc, #16]	; (2c68 <sercom_set_gclk_generator+0x40>)
    2c58:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2c5a:	2201      	movs	r2, #1
    2c5c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2c5e:	2000      	movs	r0, #0
}
    2c60:	b002      	add	sp, #8
    2c62:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2c64:	2000      	movs	r0, #0
    2c66:	e7fb      	b.n	2c60 <sercom_set_gclk_generator+0x38>
    2c68:	200009a8 	.word	0x200009a8
    2c6c:	00005189 	.word	0x00005189
    2c70:	000050fd 	.word	0x000050fd

00002c74 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2c74:	4b2b      	ldr	r3, [pc, #172]	; (2d24 <_sercom_get_default_pad+0xb0>)
    2c76:	4298      	cmp	r0, r3
    2c78:	d023      	beq.n	2cc2 <_sercom_get_default_pad+0x4e>
    2c7a:	d90f      	bls.n	2c9c <_sercom_get_default_pad+0x28>
    2c7c:	4b2a      	ldr	r3, [pc, #168]	; (2d28 <_sercom_get_default_pad+0xb4>)
    2c7e:	4298      	cmp	r0, r3
    2c80:	d02f      	beq.n	2ce2 <_sercom_get_default_pad+0x6e>
    2c82:	4b2a      	ldr	r3, [pc, #168]	; (2d2c <_sercom_get_default_pad+0xb8>)
    2c84:	4298      	cmp	r0, r3
    2c86:	d142      	bne.n	2d0e <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c88:	2901      	cmp	r1, #1
    2c8a:	d03a      	beq.n	2d02 <_sercom_get_default_pad+0x8e>
    2c8c:	2900      	cmp	r1, #0
    2c8e:	d046      	beq.n	2d1e <_sercom_get_default_pad+0xaa>
    2c90:	2902      	cmp	r1, #2
    2c92:	d038      	beq.n	2d06 <_sercom_get_default_pad+0x92>
    2c94:	2903      	cmp	r1, #3
    2c96:	d038      	beq.n	2d0a <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
    2c98:	2000      	movs	r0, #0
    2c9a:	e039      	b.n	2d10 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
    2c9c:	4b24      	ldr	r3, [pc, #144]	; (2d30 <_sercom_get_default_pad+0xbc>)
    2c9e:	4298      	cmp	r0, r3
    2ca0:	d135      	bne.n	2d0e <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2ca2:	2901      	cmp	r1, #1
    2ca4:	d007      	beq.n	2cb6 <_sercom_get_default_pad+0x42>
    2ca6:	2900      	cmp	r1, #0
    2ca8:	d033      	beq.n	2d12 <_sercom_get_default_pad+0x9e>
    2caa:	2902      	cmp	r1, #2
    2cac:	d005      	beq.n	2cba <_sercom_get_default_pad+0x46>
    2cae:	2903      	cmp	r1, #3
    2cb0:	d005      	beq.n	2cbe <_sercom_get_default_pad+0x4a>
	return 0;
    2cb2:	2000      	movs	r0, #0
    2cb4:	e02c      	b.n	2d10 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cb6:	481f      	ldr	r0, [pc, #124]	; (2d34 <_sercom_get_default_pad+0xc0>)
    2cb8:	e02a      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cba:	481f      	ldr	r0, [pc, #124]	; (2d38 <_sercom_get_default_pad+0xc4>)
    2cbc:	e028      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cbe:	481f      	ldr	r0, [pc, #124]	; (2d3c <_sercom_get_default_pad+0xc8>)
    2cc0:	e026      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cc2:	2901      	cmp	r1, #1
    2cc4:	d007      	beq.n	2cd6 <_sercom_get_default_pad+0x62>
    2cc6:	2900      	cmp	r1, #0
    2cc8:	d025      	beq.n	2d16 <_sercom_get_default_pad+0xa2>
    2cca:	2902      	cmp	r1, #2
    2ccc:	d005      	beq.n	2cda <_sercom_get_default_pad+0x66>
    2cce:	2903      	cmp	r1, #3
    2cd0:	d005      	beq.n	2cde <_sercom_get_default_pad+0x6a>
	return 0;
    2cd2:	2000      	movs	r0, #0
    2cd4:	e01c      	b.n	2d10 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cd6:	481a      	ldr	r0, [pc, #104]	; (2d40 <_sercom_get_default_pad+0xcc>)
    2cd8:	e01a      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cda:	481a      	ldr	r0, [pc, #104]	; (2d44 <_sercom_get_default_pad+0xd0>)
    2cdc:	e018      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cde:	481a      	ldr	r0, [pc, #104]	; (2d48 <_sercom_get_default_pad+0xd4>)
    2ce0:	e016      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2ce2:	2901      	cmp	r1, #1
    2ce4:	d007      	beq.n	2cf6 <_sercom_get_default_pad+0x82>
    2ce6:	2900      	cmp	r1, #0
    2ce8:	d017      	beq.n	2d1a <_sercom_get_default_pad+0xa6>
    2cea:	2902      	cmp	r1, #2
    2cec:	d005      	beq.n	2cfa <_sercom_get_default_pad+0x86>
    2cee:	2903      	cmp	r1, #3
    2cf0:	d005      	beq.n	2cfe <_sercom_get_default_pad+0x8a>
	return 0;
    2cf2:	2000      	movs	r0, #0
    2cf4:	e00c      	b.n	2d10 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cf6:	4815      	ldr	r0, [pc, #84]	; (2d4c <_sercom_get_default_pad+0xd8>)
    2cf8:	e00a      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cfa:	4815      	ldr	r0, [pc, #84]	; (2d50 <_sercom_get_default_pad+0xdc>)
    2cfc:	e008      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2cfe:	4815      	ldr	r0, [pc, #84]	; (2d54 <_sercom_get_default_pad+0xe0>)
    2d00:	e006      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d02:	4815      	ldr	r0, [pc, #84]	; (2d58 <_sercom_get_default_pad+0xe4>)
    2d04:	e004      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d06:	4815      	ldr	r0, [pc, #84]	; (2d5c <_sercom_get_default_pad+0xe8>)
    2d08:	e002      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d0a:	4815      	ldr	r0, [pc, #84]	; (2d60 <_sercom_get_default_pad+0xec>)
    2d0c:	e000      	b.n	2d10 <_sercom_get_default_pad+0x9c>
	return 0;
    2d0e:	2000      	movs	r0, #0
}
    2d10:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d12:	4814      	ldr	r0, [pc, #80]	; (2d64 <_sercom_get_default_pad+0xf0>)
    2d14:	e7fc      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d16:	2003      	movs	r0, #3
    2d18:	e7fa      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d1a:	4813      	ldr	r0, [pc, #76]	; (2d68 <_sercom_get_default_pad+0xf4>)
    2d1c:	e7f8      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d1e:	4813      	ldr	r0, [pc, #76]	; (2d6c <_sercom_get_default_pad+0xf8>)
    2d20:	e7f6      	b.n	2d10 <_sercom_get_default_pad+0x9c>
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	42000c00 	.word	0x42000c00
    2d28:	42001000 	.word	0x42001000
    2d2c:	42001400 	.word	0x42001400
    2d30:	42000800 	.word	0x42000800
    2d34:	00050003 	.word	0x00050003
    2d38:	00060003 	.word	0x00060003
    2d3c:	00070003 	.word	0x00070003
    2d40:	00010003 	.word	0x00010003
    2d44:	001e0003 	.word	0x001e0003
    2d48:	001f0003 	.word	0x001f0003
    2d4c:	00090003 	.word	0x00090003
    2d50:	000a0003 	.word	0x000a0003
    2d54:	000b0003 	.word	0x000b0003
    2d58:	00110003 	.word	0x00110003
    2d5c:	00120003 	.word	0x00120003
    2d60:	00130003 	.word	0x00130003
    2d64:	00040003 	.word	0x00040003
    2d68:	00080003 	.word	0x00080003
    2d6c:	00100003 	.word	0x00100003

00002d70 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2d70:	b530      	push	{r4, r5, lr}
    2d72:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2d74:	466a      	mov	r2, sp
    2d76:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <_sercom_get_sercom_inst_index+0x44>)
    2d78:	cb32      	ldmia	r3!, {r1, r4, r5}
    2d7a:	c232      	stmia	r2!, {r1, r4, r5}
    2d7c:	681b      	ldr	r3, [r3, #0]
    2d7e:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2d80:	0003      	movs	r3, r0
    2d82:	9a00      	ldr	r2, [sp, #0]
    2d84:	4282      	cmp	r2, r0
    2d86:	d011      	beq.n	2dac <_sercom_get_sercom_inst_index+0x3c>
    2d88:	9a01      	ldr	r2, [sp, #4]
    2d8a:	4282      	cmp	r2, r0
    2d8c:	d00a      	beq.n	2da4 <_sercom_get_sercom_inst_index+0x34>
    2d8e:	9a02      	ldr	r2, [sp, #8]
    2d90:	4282      	cmp	r2, r0
    2d92:	d009      	beq.n	2da8 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2d94:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2d96:	9a03      	ldr	r2, [sp, #12]
    2d98:	429a      	cmp	r2, r3
    2d9a:	d001      	beq.n	2da0 <_sercom_get_sercom_inst_index+0x30>
}
    2d9c:	b005      	add	sp, #20
    2d9e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2da0:	3003      	adds	r0, #3
    2da2:	e004      	b.n	2dae <_sercom_get_sercom_inst_index+0x3e>
    2da4:	2001      	movs	r0, #1
    2da6:	e002      	b.n	2dae <_sercom_get_sercom_inst_index+0x3e>
    2da8:	2002      	movs	r0, #2
    2daa:	e000      	b.n	2dae <_sercom_get_sercom_inst_index+0x3e>
    2dac:	2000      	movs	r0, #0
			return i;
    2dae:	b2c0      	uxtb	r0, r0
    2db0:	e7f4      	b.n	2d9c <_sercom_get_sercom_inst_index+0x2c>
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	00007db0 	.word	0x00007db0

00002db8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dba:	46c6      	mov	lr, r8
    2dbc:	b500      	push	{lr}
    2dbe:	000c      	movs	r4, r1
    2dc0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2dc2:	2800      	cmp	r0, #0
    2dc4:	d10f      	bne.n	2de6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2dc6:	2a00      	cmp	r2, #0
    2dc8:	dd11      	ble.n	2dee <_read+0x36>
    2dca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2dcc:	4e09      	ldr	r6, [pc, #36]	; (2df4 <_read+0x3c>)
    2dce:	4d0a      	ldr	r5, [pc, #40]	; (2df8 <_read+0x40>)
    2dd0:	6830      	ldr	r0, [r6, #0]
    2dd2:	0021      	movs	r1, r4
    2dd4:	682b      	ldr	r3, [r5, #0]
    2dd6:	4798      	blx	r3
		ptr++;
    2dd8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2dda:	42bc      	cmp	r4, r7
    2ddc:	d1f8      	bne.n	2dd0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2dde:	4640      	mov	r0, r8
    2de0:	bc04      	pop	{r2}
    2de2:	4690      	mov	r8, r2
    2de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2de6:	2301      	movs	r3, #1
    2de8:	425b      	negs	r3, r3
    2dea:	4698      	mov	r8, r3
    2dec:	e7f7      	b.n	2dde <_read+0x26>
	for (; len > 0; --len) {
    2dee:	4680      	mov	r8, r0
    2df0:	e7f5      	b.n	2dde <_read+0x26>
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	20000cb8 	.word	0x20000cb8
    2df8:	20000cb0 	.word	0x20000cb0

00002dfc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfe:	46c6      	mov	lr, r8
    2e00:	b500      	push	{lr}
    2e02:	000e      	movs	r6, r1
    2e04:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2e06:	3801      	subs	r0, #1
    2e08:	2802      	cmp	r0, #2
    2e0a:	d810      	bhi.n	2e2e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2e0c:	2a00      	cmp	r2, #0
    2e0e:	d011      	beq.n	2e34 <_write+0x38>
    2e10:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2e12:	4b0c      	ldr	r3, [pc, #48]	; (2e44 <_write+0x48>)
    2e14:	4698      	mov	r8, r3
    2e16:	4f0c      	ldr	r7, [pc, #48]	; (2e48 <_write+0x4c>)
    2e18:	4643      	mov	r3, r8
    2e1a:	6818      	ldr	r0, [r3, #0]
    2e1c:	5d31      	ldrb	r1, [r6, r4]
    2e1e:	683b      	ldr	r3, [r7, #0]
    2e20:	4798      	blx	r3
    2e22:	2800      	cmp	r0, #0
    2e24:	db08      	blt.n	2e38 <_write+0x3c>
			return -1;
		}
		++nChars;
    2e26:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2e28:	42a5      	cmp	r5, r4
    2e2a:	d1f5      	bne.n	2e18 <_write+0x1c>
    2e2c:	e006      	b.n	2e3c <_write+0x40>
		return -1;
    2e2e:	2401      	movs	r4, #1
    2e30:	4264      	negs	r4, r4
    2e32:	e003      	b.n	2e3c <_write+0x40>
	for (; len != 0; --len) {
    2e34:	0014      	movs	r4, r2
    2e36:	e001      	b.n	2e3c <_write+0x40>
			return -1;
    2e38:	2401      	movs	r4, #1
    2e3a:	4264      	negs	r4, r4
	}
	return nChars;
}
    2e3c:	0020      	movs	r0, r4
    2e3e:	bc04      	pop	{r2}
    2e40:	4690      	mov	r8, r2
    2e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e44:	20000cb8 	.word	0x20000cb8
    2e48:	20000cb4 	.word	0x20000cb4

00002e4c <hw_timer_callback>:


/*! \brief  hw timer compare callback
 */
static void hw_timer_callback(struct tc_module *const module_instance)
{
    2e4c:	b510      	push	{r4, lr}
	SYS_HwExpiry_Cb();
    2e4e:	4b02      	ldr	r3, [pc, #8]	; (2e58 <hw_timer_callback+0xc>)
    2e50:	4798      	blx	r3
	SLP_HwExpiry_Cb();
    2e52:	4b02      	ldr	r3, [pc, #8]	; (2e5c <hw_timer_callback+0x10>)
    2e54:	4798      	blx	r3
	
#ifdef EXT_HW_EXPIRY_CB
	EXT_HW_EXPIRY_CB();
#endif
}
    2e56:	bd10      	pop	{r4, pc}
    2e58:	0000325d 	.word	0x0000325d
    2e5c:	00002fe9 	.word	0x00002fe9

00002e60 <hw_timer_init>:

/*! \brief  initialize hw timer to cause interrupt every HW_TIMER_INTERVAL
 */
void hw_timer_init(void)
{
    2e60:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2e62:	4a21      	ldr	r2, [pc, #132]	; (2ee8 <hw_timer_init+0x88>)
    2e64:	2300      	movs	r3, #0
    2e66:	2100      	movs	r1, #0
    2e68:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2e6a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2e6c:	2000      	movs	r0, #0
    2e6e:	7290      	strb	r0, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2e70:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2e72:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2e74:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2e76:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2e78:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2e7a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2e7c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2e7e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2e80:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2e82:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2e84:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2e86:	8593      	strh	r3, [r2, #44]	; 0x2c
	tc_get_config_defaults(&timer_config);
	timer_config.run_in_standby = HW_TIME_RUN_IN_STANDBY;
    2e88:	2501      	movs	r5, #1
    2e8a:	7055      	strb	r5, [r2, #1]
	timer_config.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    2e8c:	3320      	adds	r3, #32
    2e8e:	7193      	strb	r3, [r2, #6]
	timer_config.clock_source = HW_TIMER_SOURCE;
    2e90:	3b1b      	subs	r3, #27
    2e92:	7013      	strb	r3, [r2, #0]
	timer_config.clock_prescaler = HW_TIMER_PRESCALER;
    2e94:	23a0      	movs	r3, #160	; 0xa0
    2e96:	00db      	lsls	r3, r3, #3
    2e98:	8093      	strh	r3, [r2, #4]
	timer_config.counter_16_bit.compare_capture_channel[0] = HW_TIMER_PERIOD;
    2e9a:	237d      	movs	r3, #125	; 0x7d
    2e9c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, HW_TIMER_MODULE, &timer_config);
    2e9e:	4c13      	ldr	r4, [pc, #76]	; (2eec <hw_timer_init+0x8c>)
    2ea0:	4913      	ldr	r1, [pc, #76]	; (2ef0 <hw_timer_init+0x90>)
    2ea2:	0020      	movs	r0, r4
    2ea4:	4b13      	ldr	r3, [pc, #76]	; (2ef4 <hw_timer_init+0x94>)
    2ea6:	4798      	blx	r3
	tc_register_callback(&module_inst, hw_timer_callback, TC_CALLBACK_CC_CHANNEL0);
    2ea8:	2202      	movs	r2, #2
    2eaa:	4913      	ldr	r1, [pc, #76]	; (2ef8 <hw_timer_init+0x98>)
    2eac:	0020      	movs	r0, r4
    2eae:	4b13      	ldr	r3, [pc, #76]	; (2efc <hw_timer_init+0x9c>)
    2eb0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2eb2:	6820      	ldr	r0, [r4, #0]
    2eb4:	4b12      	ldr	r3, [pc, #72]	; (2f00 <hw_timer_init+0xa0>)
    2eb6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2eb8:	4b12      	ldr	r3, [pc, #72]	; (2f04 <hw_timer_init+0xa4>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2eba:	5c1a      	ldrb	r2, [r3, r0]
    2ebc:	231f      	movs	r3, #31
    2ebe:	4013      	ands	r3, r2
    2ec0:	409d      	lsls	r5, r3
    2ec2:	4b11      	ldr	r3, [pc, #68]	; (2f08 <hw_timer_init+0xa8>)
    2ec4:	601d      	str	r5, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2ec6:	7e63      	ldrb	r3, [r4, #25]
    2ec8:	2210      	movs	r2, #16
    2eca:	4313      	orrs	r3, r2
    2ecc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2ece:	6822      	ldr	r2, [r4, #0]
    2ed0:	2310      	movs	r3, #16
    2ed2:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ed4:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2ed6:	b25b      	sxtb	r3, r3
    2ed8:	2b00      	cmp	r3, #0
    2eda:	dbfb      	blt.n	2ed4 <hw_timer_init+0x74>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2edc:	8813      	ldrh	r3, [r2, #0]
    2ede:	2102      	movs	r1, #2
    2ee0:	430b      	orrs	r3, r1
    2ee2:	8013      	strh	r3, [r2, #0]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);

	tc_enable(&module_inst);
}
    2ee4:	bd70      	pop	{r4, r5, r6, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	20000cbc 	.word	0x20000cbc
    2eec:	20000cf0 	.word	0x20000cf0
    2ef0:	42002c00 	.word	0x42002c00
    2ef4:	0000404d 	.word	0x0000404d
    2ef8:	00002e4d 	.word	0x00002e4d
    2efc:	00004289 	.word	0x00004289
    2f00:	00004015 	.word	0x00004015
    2f04:	00007dc0 	.word	0x00007dc0
    2f08:	e000e100 	.word	0xe000e100

00002f0c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SLP_Timer_t *timer)
{
    2f0c:	b570      	push	{r4, r5, r6, lr}
    2f0e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f10:	4b15      	ldr	r3, [pc, #84]	; (2f68 <placeTimer+0x5c>)
    2f12:	4798      	blx	r3
	
	if (timers) {
    2f14:	4b15      	ldr	r3, [pc, #84]	; (2f6c <placeTimer+0x60>)
    2f16:	681d      	ldr	r5, [r3, #0]
    2f18:	2d00      	cmp	r5, #0
    2f1a:	d01e      	beq.n	2f5a <placeTimer+0x4e>
		SLP_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2f1c:	68a2      	ldr	r2, [r4, #8]

		for (SLP_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2f1e:	6869      	ldr	r1, [r5, #4]
    2f20:	428a      	cmp	r2, r1
    2f22:	d309      	bcc.n	2f38 <placeTimer+0x2c>
    2f24:	0028      	movs	r0, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2f26:	1a52      	subs	r2, r2, r1
		for (SLP_Timer_t *t = timers; t; t = t->next) {
    2f28:	6803      	ldr	r3, [r0, #0]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d008      	beq.n	2f40 <placeTimer+0x34>
			if (timeout < t->timeout) {
    2f2e:	6859      	ldr	r1, [r3, #4]
    2f30:	4291      	cmp	r1, r2
    2f32:	d803      	bhi.n	2f3c <placeTimer+0x30>
		for (SLP_Timer_t *t = timers; t; t = t->next) {
    2f34:	0018      	movs	r0, r3
    2f36:	e7f6      	b.n	2f26 <placeTimer+0x1a>
    2f38:	002b      	movs	r3, r5
		SLP_Timer_t *prev = NULL;
    2f3a:	2000      	movs	r0, #0
				t->timeout -= timeout;
    2f3c:	1a89      	subs	r1, r1, r2
    2f3e:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2f40:	6062      	str	r2, [r4, #4]

		if (prev) {
    2f42:	2800      	cmp	r0, #0
    2f44:	d005      	beq.n	2f52 <placeTimer+0x46>
			timer->next = prev->next;
    2f46:	6803      	ldr	r3, [r0, #0]
    2f48:	6023      	str	r3, [r4, #0]
			prev->next = timer;
    2f4a:	6004      	str	r4, [r0, #0]
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}

	cpu_irq_leave_critical();
    2f4c:	4b08      	ldr	r3, [pc, #32]	; (2f70 <placeTimer+0x64>)
    2f4e:	4798      	blx	r3
}
    2f50:	bd70      	pop	{r4, r5, r6, pc}
			timer->next = timers;
    2f52:	6025      	str	r5, [r4, #0]
			timers = timer;
    2f54:	4b05      	ldr	r3, [pc, #20]	; (2f6c <placeTimer+0x60>)
    2f56:	601c      	str	r4, [r3, #0]
    2f58:	e7f8      	b.n	2f4c <placeTimer+0x40>
		timer->next = NULL;
    2f5a:	2300      	movs	r3, #0
    2f5c:	6023      	str	r3, [r4, #0]
		timer->timeout = timer->interval;
    2f5e:	68a3      	ldr	r3, [r4, #8]
    2f60:	6063      	str	r3, [r4, #4]
		timers = timer;
    2f62:	4b02      	ldr	r3, [pc, #8]	; (2f6c <placeTimer+0x60>)
    2f64:	601c      	str	r4, [r3, #0]
    2f66:	e7f1      	b.n	2f4c <placeTimer+0x40>
    2f68:	00004c79 	.word	0x00004c79
    2f6c:	200009ac 	.word	0x200009ac
    2f70:	00004cb9 	.word	0x00004cb9

00002f74 <SLP_TimerInit>:
{
    2f74:	b510      	push	{r4, lr}
	SlpTimerTime = 0;
    2f76:	2400      	movs	r4, #0
    2f78:	4b03      	ldr	r3, [pc, #12]	; (2f88 <SLP_TimerInit+0x14>)
    2f7a:	601c      	str	r4, [r3, #0]
	hw_timer_init();
    2f7c:	4b03      	ldr	r3, [pc, #12]	; (2f8c <SLP_TimerInit+0x18>)
    2f7e:	4798      	blx	r3
	timers = NULL;
    2f80:	4b03      	ldr	r3, [pc, #12]	; (2f90 <SLP_TimerInit+0x1c>)
    2f82:	601c      	str	r4, [r3, #0]
}
    2f84:	bd10      	pop	{r4, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	20000d0c 	.word	0x20000d0c
    2f8c:	00002e61 	.word	0x00002e61
    2f90:	200009ac 	.word	0x200009ac

00002f94 <SLP_TimerStop>:
{
    2f94:	b510      	push	{r4, lr}
    2f96:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f98:	4b10      	ldr	r3, [pc, #64]	; (2fdc <SLP_TimerStop+0x48>)
    2f9a:	4798      	blx	r3
	for (SLP_Timer_t *t = timers; t; t = t->next) {
    2f9c:	4b10      	ldr	r3, [pc, #64]	; (2fe0 <SLP_TimerStop+0x4c>)
    2f9e:	681a      	ldr	r2, [r3, #0]
    2fa0:	2a00      	cmp	r2, #0
    2fa2:	d014      	beq.n	2fce <SLP_TimerStop+0x3a>
		if (t == timer) {
    2fa4:	42a2      	cmp	r2, r4
    2fa6:	d015      	beq.n	2fd4 <SLP_TimerStop+0x40>
	for (SLP_Timer_t *t = timers; t; t = t->next) {
    2fa8:	6813      	ldr	r3, [r2, #0]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d00f      	beq.n	2fce <SLP_TimerStop+0x3a>
		if (t == timer) {
    2fae:	429c      	cmp	r4, r3
    2fb0:	d001      	beq.n	2fb6 <SLP_TimerStop+0x22>
	for (SLP_Timer_t *t = timers; t; t = t->next) {
    2fb2:	001a      	movs	r2, r3
    2fb4:	e7f8      	b.n	2fa8 <SLP_TimerStop+0x14>
			if (prev) {
    2fb6:	2a00      	cmp	r2, #0
    2fb8:	d00c      	beq.n	2fd4 <SLP_TimerStop+0x40>
				prev->next = t->next;
    2fba:	6823      	ldr	r3, [r4, #0]
    2fbc:	6013      	str	r3, [r2, #0]
			if (t->next) {
    2fbe:	6823      	ldr	r3, [r4, #0]
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d004      	beq.n	2fce <SLP_TimerStop+0x3a>
				t->next->timeout += timer->timeout;
    2fc4:	6862      	ldr	r2, [r4, #4]
    2fc6:	6859      	ldr	r1, [r3, #4]
    2fc8:	468c      	mov	ip, r1
    2fca:	4462      	add	r2, ip
    2fcc:	605a      	str	r2, [r3, #4]
	cpu_irq_leave_critical();
    2fce:	4b05      	ldr	r3, [pc, #20]	; (2fe4 <SLP_TimerStop+0x50>)
    2fd0:	4798      	blx	r3
}
    2fd2:	bd10      	pop	{r4, pc}
				timers = t->next;
    2fd4:	4b02      	ldr	r3, [pc, #8]	; (2fe0 <SLP_TimerStop+0x4c>)
    2fd6:	6822      	ldr	r2, [r4, #0]
    2fd8:	601a      	str	r2, [r3, #0]
    2fda:	e7f0      	b.n	2fbe <SLP_TimerStop+0x2a>
    2fdc:	00004c79 	.word	0x00004c79
    2fe0:	200009ac 	.word	0x200009ac
    2fe4:	00004cb9 	.word	0x00004cb9

00002fe8 <SLP_HwExpiry_Cb>:
}

/*****************************************************************************
*****************************************************************************/
void SLP_HwExpiry_Cb(void)
{
    2fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;

	elapsed = HW_TIMER_INTERVAL;
	SlpTimerTime += HW_TIMER_INTERVAL;
    2fea:	4a10      	ldr	r2, [pc, #64]	; (302c <SLP_HwExpiry_Cb+0x44>)
    2fec:	6813      	ldr	r3, [r2, #0]
    2fee:	3301      	adds	r3, #1
    2ff0:	6013      	str	r3, [r2, #0]
	elapsed = HW_TIMER_INTERVAL;
    2ff2:	2501      	movs	r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    2ff4:	4e0e      	ldr	r6, [pc, #56]	; (3030 <SLP_HwExpiry_Cb+0x48>)
		SLP_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    2ff6:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    2ff8:	e005      	b.n	3006 <SLP_HwExpiry_Cb+0x1e>
		if (SLP_TIMER_PERIODIC_MODE == timer->mode) {
			placeTimer(timer);
    2ffa:	0020      	movs	r0, r4
    2ffc:	4b0d      	ldr	r3, [pc, #52]	; (3034 <SLP_HwExpiry_Cb+0x4c>)
    2ffe:	4798      	blx	r3
    3000:	e00d      	b.n	301e <SLP_HwExpiry_Cb+0x36>
		}

		if (timer->handler) {
			timer->handler(timer);
    3002:	0020      	movs	r0, r4
    3004:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    3006:	6834      	ldr	r4, [r6, #0]
    3008:	2c00      	cmp	r4, #0
    300a:	d00e      	beq.n	302a <SLP_HwExpiry_Cb+0x42>
    300c:	6863      	ldr	r3, [r4, #4]
    300e:	429d      	cmp	r5, r3
    3010:	d309      	bcc.n	3026 <SLP_HwExpiry_Cb+0x3e>
		elapsed -= timers->timeout;
    3012:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3014:	6823      	ldr	r3, [r4, #0]
    3016:	603b      	str	r3, [r7, #0]
		if (SLP_TIMER_PERIODIC_MODE == timer->mode) {
    3018:	7b23      	ldrb	r3, [r4, #12]
    301a:	2b01      	cmp	r3, #1
    301c:	d0ed      	beq.n	2ffa <SLP_HwExpiry_Cb+0x12>
		if (timer->handler) {
    301e:	6923      	ldr	r3, [r4, #16]
    3020:	2b00      	cmp	r3, #0
    3022:	d1ee      	bne.n	3002 <SLP_HwExpiry_Cb+0x1a>
    3024:	e7ef      	b.n	3006 <SLP_HwExpiry_Cb+0x1e>
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    3026:	1b5b      	subs	r3, r3, r5
    3028:	6063      	str	r3, [r4, #4]
	}
}
    302a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    302c:	20000d0c 	.word	0x20000d0c
    3030:	200009ac 	.word	0x200009ac
    3034:	00002f0d 	.word	0x00002f0d

00003038 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3038:	b570      	push	{r4, r5, r6, lr}
    303a:	0004      	movs	r4, r0
	#ifdef HW_TIMER_ENTER_CRITICAL
		HW_TIMER_ENTER_CRITICAL
    303c:	4b15      	ldr	r3, [pc, #84]	; (3094 <placeTimer+0x5c>)
    303e:	4798      	blx	r3
	#endif

	if (timers) {
    3040:	4b15      	ldr	r3, [pc, #84]	; (3098 <placeTimer+0x60>)
    3042:	681d      	ldr	r5, [r3, #0]
    3044:	2d00      	cmp	r5, #0
    3046:	d01e      	beq.n	3086 <placeTimer+0x4e>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3048:	68a2      	ldr	r2, [r4, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    304a:	6869      	ldr	r1, [r5, #4]
    304c:	428a      	cmp	r2, r1
    304e:	d309      	bcc.n	3064 <placeTimer+0x2c>
    3050:	0028      	movs	r0, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    3052:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3054:	6803      	ldr	r3, [r0, #0]
    3056:	2b00      	cmp	r3, #0
    3058:	d008      	beq.n	306c <placeTimer+0x34>
			if (timeout < t->timeout) {
    305a:	6859      	ldr	r1, [r3, #4]
    305c:	4291      	cmp	r1, r2
    305e:	d803      	bhi.n	3068 <placeTimer+0x30>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3060:	0018      	movs	r0, r3
    3062:	e7f6      	b.n	3052 <placeTimer+0x1a>
    3064:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    3066:	2000      	movs	r0, #0
				t->timeout -= timeout;
    3068:	1a89      	subs	r1, r1, r2
    306a:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    306c:	6062      	str	r2, [r4, #4]

		if (prev) {
    306e:	2800      	cmp	r0, #0
    3070:	d005      	beq.n	307e <placeTimer+0x46>
			timer->next = prev->next;
    3072:	6803      	ldr	r3, [r0, #0]
    3074:	6023      	str	r3, [r4, #0]
			prev->next = timer;
    3076:	6004      	str	r4, [r0, #0]
		timer->timeout = timer->interval;
		timers = timer;
	}

	#ifdef HW_TIMER_LEAVE_CRITICAL
		HW_TIMER_LEAVE_CRITICAL
    3078:	4b08      	ldr	r3, [pc, #32]	; (309c <placeTimer+0x64>)
    307a:	4798      	blx	r3
	#endif
}
    307c:	bd70      	pop	{r4, r5, r6, pc}
			timer->next = timers;
    307e:	6025      	str	r5, [r4, #0]
			timers = timer;
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <placeTimer+0x60>)
    3082:	601c      	str	r4, [r3, #0]
    3084:	e7f8      	b.n	3078 <placeTimer+0x40>
		timer->next = NULL;
    3086:	2300      	movs	r3, #0
    3088:	6023      	str	r3, [r4, #0]
		timer->timeout = timer->interval;
    308a:	68a3      	ldr	r3, [r4, #8]
    308c:	6063      	str	r3, [r4, #4]
		timers = timer;
    308e:	4b02      	ldr	r3, [pc, #8]	; (3098 <placeTimer+0x60>)
    3090:	601c      	str	r4, [r3, #0]
    3092:	e7f1      	b.n	3078 <placeTimer+0x40>
    3094:	00004c79 	.word	0x00004c79
    3098:	200009b4 	.word	0x200009b4
    309c:	00004cb9 	.word	0x00004cb9

000030a0 <SYS_TimerInit>:
{
    30a0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    30a2:	2400      	movs	r4, #0
    30a4:	4b04      	ldr	r3, [pc, #16]	; (30b8 <SYS_TimerInit+0x18>)
    30a6:	701c      	strb	r4, [r3, #0]
	SysTimerTime = 0;
    30a8:	4b04      	ldr	r3, [pc, #16]	; (30bc <SYS_TimerInit+0x1c>)
    30aa:	601c      	str	r4, [r3, #0]
	hw_timer_init();
    30ac:	4b04      	ldr	r3, [pc, #16]	; (30c0 <SYS_TimerInit+0x20>)
    30ae:	4798      	blx	r3
	timers = NULL;
    30b0:	4b04      	ldr	r3, [pc, #16]	; (30c4 <SYS_TimerInit+0x24>)
    30b2:	601c      	str	r4, [r3, #0]
}
    30b4:	bd10      	pop	{r4, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	20000d10 	.word	0x20000d10
    30bc:	200009b0 	.word	0x200009b0
    30c0:	00002e61 	.word	0x00002e61
    30c4:	200009b4 	.word	0x200009b4

000030c8 <SYS_TimerStop>:
{
    30c8:	b510      	push	{r4, lr}
    30ca:	0004      	movs	r4, r0
		HW_TIMER_ENTER_CRITICAL
    30cc:	4b10      	ldr	r3, [pc, #64]	; (3110 <SYS_TimerStop+0x48>)
    30ce:	4798      	blx	r3
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    30d0:	4b10      	ldr	r3, [pc, #64]	; (3114 <SYS_TimerStop+0x4c>)
    30d2:	681a      	ldr	r2, [r3, #0]
    30d4:	2a00      	cmp	r2, #0
    30d6:	d014      	beq.n	3102 <SYS_TimerStop+0x3a>
		if (t == timer) {
    30d8:	42a2      	cmp	r2, r4
    30da:	d015      	beq.n	3108 <SYS_TimerStop+0x40>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    30dc:	6813      	ldr	r3, [r2, #0]
    30de:	2b00      	cmp	r3, #0
    30e0:	d00f      	beq.n	3102 <SYS_TimerStop+0x3a>
		if (t == timer) {
    30e2:	429c      	cmp	r4, r3
    30e4:	d001      	beq.n	30ea <SYS_TimerStop+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    30e6:	001a      	movs	r2, r3
    30e8:	e7f8      	b.n	30dc <SYS_TimerStop+0x14>
			if (prev) {
    30ea:	2a00      	cmp	r2, #0
    30ec:	d00c      	beq.n	3108 <SYS_TimerStop+0x40>
				prev->next = t->next;
    30ee:	6823      	ldr	r3, [r4, #0]
    30f0:	6013      	str	r3, [r2, #0]
			if (t->next) {
    30f2:	6823      	ldr	r3, [r4, #0]
    30f4:	2b00      	cmp	r3, #0
    30f6:	d004      	beq.n	3102 <SYS_TimerStop+0x3a>
				t->next->timeout += timer->timeout;
    30f8:	6862      	ldr	r2, [r4, #4]
    30fa:	6859      	ldr	r1, [r3, #4]
    30fc:	468c      	mov	ip, r1
    30fe:	4462      	add	r2, ip
    3100:	605a      	str	r2, [r3, #4]
		HW_TIMER_LEAVE_CRITICAL
    3102:	4b05      	ldr	r3, [pc, #20]	; (3118 <SYS_TimerStop+0x50>)
    3104:	4798      	blx	r3
}
    3106:	bd10      	pop	{r4, pc}
				timers = t->next;
    3108:	4b02      	ldr	r3, [pc, #8]	; (3114 <SYS_TimerStop+0x4c>)
    310a:	6822      	ldr	r2, [r4, #0]
    310c:	601a      	str	r2, [r3, #0]
    310e:	e7f0      	b.n	30f2 <SYS_TimerStop+0x2a>
    3110:	00004c79 	.word	0x00004c79
    3114:	200009b4 	.word	0x200009b4
    3118:	00004cb9 	.word	0x00004cb9

0000311c <SYS_TimerStarted>:
{
    311c:	b510      	push	{r4, lr}
    311e:	0004      	movs	r4, r0
		HW_TIMER_ENTER_CRITICAL
    3120:	4b0a      	ldr	r3, [pc, #40]	; (314c <SYS_TimerStarted+0x30>)
    3122:	4798      	blx	r3
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3124:	4b0a      	ldr	r3, [pc, #40]	; (3150 <SYS_TimerStarted+0x34>)
    3126:	681b      	ldr	r3, [r3, #0]
    3128:	2b00      	cmp	r3, #0
    312a:	d00a      	beq.n	3142 <SYS_TimerStarted+0x26>
		if (t == timer) {
    312c:	42a3      	cmp	r3, r4
    312e:	d004      	beq.n	313a <SYS_TimerStarted+0x1e>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	2b00      	cmp	r3, #0
    3134:	d005      	beq.n	3142 <SYS_TimerStarted+0x26>
		if (t == timer) {
    3136:	429c      	cmp	r4, r3
    3138:	d1fa      	bne.n	3130 <SYS_TimerStarted+0x14>
				HW_TIMER_LEAVE_CRITICAL
    313a:	4b06      	ldr	r3, [pc, #24]	; (3154 <SYS_TimerStarted+0x38>)
    313c:	4798      	blx	r3
			return true;
    313e:	2001      	movs	r0, #1
    3140:	e002      	b.n	3148 <SYS_TimerStarted+0x2c>
		HW_TIMER_LEAVE_CRITICAL
    3142:	4b04      	ldr	r3, [pc, #16]	; (3154 <SYS_TimerStarted+0x38>)
    3144:	4798      	blx	r3
	return false;
    3146:	2000      	movs	r0, #0
}
    3148:	bd10      	pop	{r4, pc}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	00004c79 	.word	0x00004c79
    3150:	200009b4 	.word	0x200009b4
    3154:	00004cb9 	.word	0x00004cb9

00003158 <SYS_TimerStart>:
{
    3158:	b510      	push	{r4, lr}
    315a:	0004      	movs	r4, r0
		HW_TIMER_ENTER_CRITICAL
    315c:	4b06      	ldr	r3, [pc, #24]	; (3178 <SYS_TimerStart+0x20>)
    315e:	4798      	blx	r3
	if (!SYS_TimerStarted(timer)) {
    3160:	0020      	movs	r0, r4
    3162:	4b06      	ldr	r3, [pc, #24]	; (317c <SYS_TimerStart+0x24>)
    3164:	4798      	blx	r3
    3166:	2800      	cmp	r0, #0
    3168:	d002      	beq.n	3170 <SYS_TimerStart+0x18>
		HW_TIMER_LEAVE_CRITICAL
    316a:	4b05      	ldr	r3, [pc, #20]	; (3180 <SYS_TimerStart+0x28>)
    316c:	4798      	blx	r3
}
    316e:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    3170:	0020      	movs	r0, r4
    3172:	4b04      	ldr	r3, [pc, #16]	; (3184 <SYS_TimerStart+0x2c>)
    3174:	4798      	blx	r3
    3176:	e7f8      	b.n	316a <SYS_TimerStart+0x12>
    3178:	00004c79 	.word	0x00004c79
    317c:	0000311d 	.word	0x0000311d
    3180:	00004cb9 	.word	0x00004cb9
    3184:	00003039 	.word	0x00003039

00003188 <SYS_TimerRestart>:
{
    3188:	b510      	push	{r4, lr}
    318a:	0004      	movs	r4, r0
		HW_TIMER_ENTER_CRITICAL
    318c:	4b08      	ldr	r3, [pc, #32]	; (31b0 <SYS_TimerRestart+0x28>)
    318e:	4798      	blx	r3
	if (SYS_TimerStarted(timer)) {
    3190:	0020      	movs	r0, r4
    3192:	4b08      	ldr	r3, [pc, #32]	; (31b4 <SYS_TimerRestart+0x2c>)
    3194:	4798      	blx	r3
    3196:	2800      	cmp	r0, #0
    3198:	d105      	bne.n	31a6 <SYS_TimerRestart+0x1e>
	placeTimer(timer);
    319a:	0020      	movs	r0, r4
    319c:	4b06      	ldr	r3, [pc, #24]	; (31b8 <SYS_TimerRestart+0x30>)
    319e:	4798      	blx	r3
		HW_TIMER_LEAVE_CRITICAL
    31a0:	4b06      	ldr	r3, [pc, #24]	; (31bc <SYS_TimerRestart+0x34>)
    31a2:	4798      	blx	r3
}
    31a4:	bd10      	pop	{r4, pc}
		SYS_TimerStop(timer);
    31a6:	0020      	movs	r0, r4
    31a8:	4b05      	ldr	r3, [pc, #20]	; (31c0 <SYS_TimerRestart+0x38>)
    31aa:	4798      	blx	r3
    31ac:	e7f5      	b.n	319a <SYS_TimerRestart+0x12>
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	00004c79 	.word	0x00004c79
    31b4:	0000311d 	.word	0x0000311d
    31b8:	00003039 	.word	0x00003039
    31bc:	00004cb9 	.word	0x00004cb9
    31c0:	000030c9 	.word	0x000030c9

000031c4 <SYS_TimerTaskHandler>:
{
    31c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (0 == SysTimerIrqCount) {
    31c6:	4b1f      	ldr	r3, [pc, #124]	; (3244 <SYS_TimerTaskHandler+0x80>)
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d100      	bne.n	31d0 <SYS_TimerTaskHandler+0xc>
}
    31ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	cpu_irq_enter_critical();
    31d0:	4e1d      	ldr	r6, [pc, #116]	; (3248 <SYS_TimerTaskHandler+0x84>)
    31d2:	47b0      	blx	r6
	cnt = SysTimerIrqCount;
    31d4:	4b1b      	ldr	r3, [pc, #108]	; (3244 <SYS_TimerTaskHandler+0x80>)
    31d6:	781c      	ldrb	r4, [r3, #0]
    31d8:	b2e4      	uxtb	r4, r4
	SysTimerIrqCount = 0;
    31da:	2200      	movs	r2, #0
    31dc:	701a      	strb	r2, [r3, #0]
	cpu_irq_leave_critical();
    31de:	4b1b      	ldr	r3, [pc, #108]	; (324c <SYS_TimerTaskHandler+0x88>)
    31e0:	4798      	blx	r3
	elapsed = cnt * HW_TIMER_INTERVAL;
    31e2:	0025      	movs	r5, r4
	SysTimerTime += (cnt * HW_TIMER_INTERVAL);
    31e4:	4b1a      	ldr	r3, [pc, #104]	; (3250 <SYS_TimerTaskHandler+0x8c>)
    31e6:	681a      	ldr	r2, [r3, #0]
    31e8:	4694      	mov	ip, r2
    31ea:	4464      	add	r4, ip
    31ec:	601c      	str	r4, [r3, #0]
		HW_TIMER_ENTER_CRITICAL
    31ee:	47b0      	blx	r6
	while (timers && (timers->timeout <= elapsed)) {
    31f0:	4b18      	ldr	r3, [pc, #96]	; (3254 <SYS_TimerTaskHandler+0x90>)
    31f2:	681c      	ldr	r4, [r3, #0]
    31f4:	2c00      	cmp	r4, #0
    31f6:	d022      	beq.n	323e <SYS_TimerTaskHandler+0x7a>
    31f8:	6863      	ldr	r3, [r4, #4]
    31fa:	429d      	cmp	r5, r3
    31fc:	d31c      	bcc.n	3238 <SYS_TimerTaskHandler+0x74>
		timers = timers->next;
    31fe:	4f15      	ldr	r7, [pc, #84]	; (3254 <SYS_TimerTaskHandler+0x90>)
		HW_TIMER_LEAVE_CRITICAL
    3200:	4e12      	ldr	r6, [pc, #72]	; (324c <SYS_TimerTaskHandler+0x88>)
    3202:	e00e      	b.n	3222 <SYS_TimerTaskHandler+0x5e>
			placeTimer(timer);
    3204:	0020      	movs	r0, r4
    3206:	4b14      	ldr	r3, [pc, #80]	; (3258 <SYS_TimerTaskHandler+0x94>)
    3208:	4798      	blx	r3
    320a:	e010      	b.n	322e <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    320c:	0020      	movs	r0, r4
    320e:	4798      	blx	r3
		HW_TIMER_ENTER_CRITICAL
    3210:	4b0d      	ldr	r3, [pc, #52]	; (3248 <SYS_TimerTaskHandler+0x84>)
    3212:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    3214:	4b0f      	ldr	r3, [pc, #60]	; (3254 <SYS_TimerTaskHandler+0x90>)
    3216:	681c      	ldr	r4, [r3, #0]
    3218:	2c00      	cmp	r4, #0
    321a:	d010      	beq.n	323e <SYS_TimerTaskHandler+0x7a>
    321c:	6863      	ldr	r3, [r4, #4]
    321e:	42ab      	cmp	r3, r5
    3220:	d80a      	bhi.n	3238 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    3222:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3224:	6823      	ldr	r3, [r4, #0]
    3226:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3228:	7b23      	ldrb	r3, [r4, #12]
    322a:	2b01      	cmp	r3, #1
    322c:	d0ea      	beq.n	3204 <SYS_TimerTaskHandler+0x40>
		HW_TIMER_LEAVE_CRITICAL
    322e:	47b0      	blx	r6
		if (timer->handler) {
    3230:	6923      	ldr	r3, [r4, #16]
    3232:	2b00      	cmp	r3, #0
    3234:	d1ea      	bne.n	320c <SYS_TimerTaskHandler+0x48>
    3236:	e7eb      	b.n	3210 <SYS_TimerTaskHandler+0x4c>
		timers->timeout -= elapsed;
    3238:	6863      	ldr	r3, [r4, #4]
    323a:	1b5d      	subs	r5, r3, r5
    323c:	6065      	str	r5, [r4, #4]
		HW_TIMER_LEAVE_CRITICAL
    323e:	4b03      	ldr	r3, [pc, #12]	; (324c <SYS_TimerTaskHandler+0x88>)
    3240:	4798      	blx	r3
    3242:	e7c4      	b.n	31ce <SYS_TimerTaskHandler+0xa>
    3244:	20000d10 	.word	0x20000d10
    3248:	00004c79 	.word	0x00004c79
    324c:	00004cb9 	.word	0x00004cb9
    3250:	200009b0 	.word	0x200009b0
    3254:	200009b4 	.word	0x200009b4
    3258:	00003039 	.word	0x00003039

0000325c <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
	SysTimerIrqCount++;
    325c:	4a02      	ldr	r2, [pc, #8]	; (3268 <SYS_HwExpiry_Cb+0xc>)
    325e:	7813      	ldrb	r3, [r2, #0]
    3260:	3301      	adds	r3, #1
    3262:	b2db      	uxtb	r3, r3
    3264:	7013      	strb	r3, [r2, #0]
}
    3266:	4770      	bx	lr
    3268:	20000d10 	.word	0x20000d10

0000326c <vpCircBuf_init>:
}



void vpCircBuf_init(VPCircBuf* p, VPCircBuf_Element* buffer, size_t bufSize_elements)
{
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	0004      	movs	r4, r0
    3270:	000d      	movs	r5, r1
    3272:	0016      	movs	r6, r2
    REQUIRE(p);
    3274:	2800      	cmp	r0, #0
    3276:	d00c      	beq.n	3292 <vpCircBuf_init+0x26>
    REQUIRE(buffer);
    3278:	2900      	cmp	r1, #0
    327a:	d010      	beq.n	329e <vpCircBuf_init+0x32>
    REQUIRE(bufSize_elements > 0);
    327c:	2a00      	cmp	r2, #0
    327e:	d014      	beq.n	32aa <vpCircBuf_init+0x3e>

    vpOs_init();
    3280:	4b0d      	ldr	r3, [pc, #52]	; (32b8 <vpCircBuf_init+0x4c>)
    3282:	4798      	blx	r3

    p->start = buffer;
    3284:	6025      	str	r5, [r4, #0]
    p->stop  = buffer + bufSize_elements;
    3286:	19ad      	adds	r5, r5, r6
    3288:	6065      	str	r5, [r4, #4]
    p->head  = NULL;
    328a:	2300      	movs	r3, #0
    328c:	60a3      	str	r3, [r4, #8]
    p->tail  = NULL;
    328e:	60e3      	str	r3, [r4, #12]
}
    3290:	bd70      	pop	{r4, r5, r6, pc}
    REQUIRE(p);
    3292:	4b0a      	ldr	r3, [pc, #40]	; (32bc <vpCircBuf_init+0x50>)
    3294:	4a0a      	ldr	r2, [pc, #40]	; (32c0 <vpCircBuf_init+0x54>)
    3296:	2122      	movs	r1, #34	; 0x22
    3298:	480a      	ldr	r0, [pc, #40]	; (32c4 <vpCircBuf_init+0x58>)
    329a:	4c0b      	ldr	r4, [pc, #44]	; (32c8 <vpCircBuf_init+0x5c>)
    329c:	47a0      	blx	r4
    REQUIRE(buffer);
    329e:	4b0b      	ldr	r3, [pc, #44]	; (32cc <vpCircBuf_init+0x60>)
    32a0:	4a07      	ldr	r2, [pc, #28]	; (32c0 <vpCircBuf_init+0x54>)
    32a2:	2123      	movs	r1, #35	; 0x23
    32a4:	4807      	ldr	r0, [pc, #28]	; (32c4 <vpCircBuf_init+0x58>)
    32a6:	4c08      	ldr	r4, [pc, #32]	; (32c8 <vpCircBuf_init+0x5c>)
    32a8:	47a0      	blx	r4
    REQUIRE(bufSize_elements > 0);
    32aa:	4b09      	ldr	r3, [pc, #36]	; (32d0 <vpCircBuf_init+0x64>)
    32ac:	4a04      	ldr	r2, [pc, #16]	; (32c0 <vpCircBuf_init+0x54>)
    32ae:	2124      	movs	r1, #36	; 0x24
    32b0:	4804      	ldr	r0, [pc, #16]	; (32c4 <vpCircBuf_init+0x58>)
    32b2:	4c05      	ldr	r4, [pc, #20]	; (32c8 <vpCircBuf_init+0x5c>)
    32b4:	47a0      	blx	r4
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	0000372d 	.word	0x0000372d
    32bc:	00007ebc 	.word	0x00007ebc
    32c0:	00007dc4 	.word	0x00007dc4
    32c4:	00007ec0 	.word	0x00007ec0
    32c8:	00005645 	.word	0x00005645
    32cc:	00007ed8 	.word	0x00007ed8
    32d0:	00007ee0 	.word	0x00007ee0

000032d4 <vpCircBuf_count>:
}



size_t vpCircBuf_count(VPCircBuf* p)
{
    32d4:	b570      	push	{r4, r5, r6, lr}
    32d6:	1e04      	subs	r4, r0, #0
    ptrdiff_t count_elements = 0;

    REQUIRE(p);
    32d8:	d024      	beq.n	3324 <vpCircBuf_count+0x50>
    REQUIRE(p->start);
    32da:	6803      	ldr	r3, [r0, #0]
    32dc:	2b00      	cmp	r3, #0
    32de:	d027      	beq.n	3330 <vpCircBuf_count+0x5c>
    REQUIRE(p->stop);
    32e0:	6843      	ldr	r3, [r0, #4]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d02a      	beq.n	333c <vpCircBuf_count+0x68>

    vpOs_criticalRegionEnter();
    32e6:	4b1f      	ldr	r3, [pc, #124]	; (3364 <vpCircBuf_count+0x90>)
    32e8:	4798      	blx	r3

        ASSERT(!p->head
    32ea:	68a3      	ldr	r3, [r4, #8]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d00d      	beq.n	330c <vpCircBuf_count+0x38>
    32f0:	68a2      	ldr	r2, [r4, #8]
    32f2:	6823      	ldr	r3, [r4, #0]
    32f4:	429a      	cmp	r2, r3
    32f6:	d327      	bcc.n	3348 <vpCircBuf_count+0x74>
    32f8:	68a1      	ldr	r1, [r4, #8]
    32fa:	6862      	ldr	r2, [r4, #4]
    32fc:	4291      	cmp	r1, r2
    32fe:	d223      	bcs.n	3348 <vpCircBuf_count+0x74>
    3300:	68e1      	ldr	r1, [r4, #12]
    3302:	428b      	cmp	r3, r1
    3304:	d820      	bhi.n	3348 <vpCircBuf_count+0x74>
    3306:	68e3      	ldr	r3, [r4, #12]
    3308:	429a      	cmp	r2, r3
    330a:	d91d      	bls.n	3348 <vpCircBuf_count+0x74>
                && p->tail >= p->start
                && p->tail <  p->stop
                )
            );

        if( p->head /* i.e., not empty */ )
    330c:	68a3      	ldr	r3, [r4, #8]
    330e:	2b00      	cmp	r3, #0
    3310:	d025      	beq.n	335e <vpCircBuf_count+0x8a>
        {
            count_elements = p->tail - p->head;
    3312:	68e5      	ldr	r5, [r4, #12]
    3314:	68a3      	ldr	r3, [r4, #8]
    3316:	1aed      	subs	r5, r5, r3

            if( count_elements <= 0 )
    3318:	2d00      	cmp	r5, #0
    331a:	dd1b      	ble.n	3354 <vpCircBuf_count+0x80>
                count_elements += p->stop - p->start;
        }

    vpOs_criticalRegionLeave();
    331c:	4b12      	ldr	r3, [pc, #72]	; (3368 <vpCircBuf_count+0x94>)
    331e:	4798      	blx	r3

    return count_elements;
}
    3320:	0028      	movs	r0, r5
    3322:	bd70      	pop	{r4, r5, r6, pc}
    REQUIRE(p);
    3324:	4b11      	ldr	r3, [pc, #68]	; (336c <vpCircBuf_count+0x98>)
    3326:	4a12      	ldr	r2, [pc, #72]	; (3370 <vpCircBuf_count+0x9c>)
    3328:	2156      	movs	r1, #86	; 0x56
    332a:	4812      	ldr	r0, [pc, #72]	; (3374 <vpCircBuf_count+0xa0>)
    332c:	4c12      	ldr	r4, [pc, #72]	; (3378 <vpCircBuf_count+0xa4>)
    332e:	47a0      	blx	r4
    REQUIRE(p->start);
    3330:	4b12      	ldr	r3, [pc, #72]	; (337c <vpCircBuf_count+0xa8>)
    3332:	4a0f      	ldr	r2, [pc, #60]	; (3370 <vpCircBuf_count+0x9c>)
    3334:	2157      	movs	r1, #87	; 0x57
    3336:	480f      	ldr	r0, [pc, #60]	; (3374 <vpCircBuf_count+0xa0>)
    3338:	4c0f      	ldr	r4, [pc, #60]	; (3378 <vpCircBuf_count+0xa4>)
    333a:	47a0      	blx	r4
    REQUIRE(p->stop);
    333c:	4b10      	ldr	r3, [pc, #64]	; (3380 <vpCircBuf_count+0xac>)
    333e:	4a0c      	ldr	r2, [pc, #48]	; (3370 <vpCircBuf_count+0x9c>)
    3340:	2158      	movs	r1, #88	; 0x58
    3342:	480c      	ldr	r0, [pc, #48]	; (3374 <vpCircBuf_count+0xa0>)
    3344:	4c0c      	ldr	r4, [pc, #48]	; (3378 <vpCircBuf_count+0xa4>)
    3346:	47a0      	blx	r4
        ASSERT(!p->head
    3348:	4b0e      	ldr	r3, [pc, #56]	; (3384 <vpCircBuf_count+0xb0>)
    334a:	4a09      	ldr	r2, [pc, #36]	; (3370 <vpCircBuf_count+0x9c>)
    334c:	2162      	movs	r1, #98	; 0x62
    334e:	4809      	ldr	r0, [pc, #36]	; (3374 <vpCircBuf_count+0xa0>)
    3350:	4c09      	ldr	r4, [pc, #36]	; (3378 <vpCircBuf_count+0xa4>)
    3352:	47a0      	blx	r4
                count_elements += p->stop - p->start;
    3354:	6863      	ldr	r3, [r4, #4]
    3356:	6822      	ldr	r2, [r4, #0]
    3358:	1a9b      	subs	r3, r3, r2
    335a:	18ed      	adds	r5, r5, r3
    335c:	e7de      	b.n	331c <vpCircBuf_count+0x48>
    ptrdiff_t count_elements = 0;
    335e:	2500      	movs	r5, #0
    3360:	e7dc      	b.n	331c <vpCircBuf_count+0x48>
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	00003731 	.word	0x00003731
    3368:	0000373d 	.word	0x0000373d
    336c:	00007ebc 	.word	0x00007ebc
    3370:	00007dd4 	.word	0x00007dd4
    3374:	00007ec0 	.word	0x00007ec0
    3378:	00005645 	.word	0x00005645
    337c:	00007e40 	.word	0x00007e40
    3380:	00007e4c 	.word	0x00007e4c
    3384:	00007e54 	.word	0x00007e54

00003388 <vpCircBuf_freeCount>:



size_t vpCircBuf_freeCount(VPCircBuf* p)
{
    3388:	b570      	push	{r4, r5, r6, lr}
    REQUIRE(p);
    338a:	2800      	cmp	r0, #0
    338c:	d00a      	beq.n	33a4 <vpCircBuf_freeCount+0x1c>
    REQUIRE(p->start);
    338e:	6805      	ldr	r5, [r0, #0]
    3390:	2d00      	cmp	r5, #0
    3392:	d00d      	beq.n	33b0 <vpCircBuf_freeCount+0x28>
    REQUIRE(p->stop);
    3394:	6844      	ldr	r4, [r0, #4]
    3396:	2c00      	cmp	r4, #0
    3398:	d010      	beq.n	33bc <vpCircBuf_freeCount+0x34>

    return p->stop - p->start - vpCircBuf_count(p);
    339a:	4b0b      	ldr	r3, [pc, #44]	; (33c8 <vpCircBuf_freeCount+0x40>)
    339c:	4798      	blx	r3
    339e:	1b64      	subs	r4, r4, r5
    33a0:	1a20      	subs	r0, r4, r0
}
    33a2:	bd70      	pop	{r4, r5, r6, pc}
    REQUIRE(p);
    33a4:	4b09      	ldr	r3, [pc, #36]	; (33cc <vpCircBuf_freeCount+0x44>)
    33a6:	4a0a      	ldr	r2, [pc, #40]	; (33d0 <vpCircBuf_freeCount+0x48>)
    33a8:	2175      	movs	r1, #117	; 0x75
    33aa:	480a      	ldr	r0, [pc, #40]	; (33d4 <vpCircBuf_freeCount+0x4c>)
    33ac:	4c0a      	ldr	r4, [pc, #40]	; (33d8 <vpCircBuf_freeCount+0x50>)
    33ae:	47a0      	blx	r4
    REQUIRE(p->start);
    33b0:	4b0a      	ldr	r3, [pc, #40]	; (33dc <vpCircBuf_freeCount+0x54>)
    33b2:	4a07      	ldr	r2, [pc, #28]	; (33d0 <vpCircBuf_freeCount+0x48>)
    33b4:	2176      	movs	r1, #118	; 0x76
    33b6:	4807      	ldr	r0, [pc, #28]	; (33d4 <vpCircBuf_freeCount+0x4c>)
    33b8:	4c07      	ldr	r4, [pc, #28]	; (33d8 <vpCircBuf_freeCount+0x50>)
    33ba:	47a0      	blx	r4
    REQUIRE(p->stop);
    33bc:	4b08      	ldr	r3, [pc, #32]	; (33e0 <vpCircBuf_freeCount+0x58>)
    33be:	4a04      	ldr	r2, [pc, #16]	; (33d0 <vpCircBuf_freeCount+0x48>)
    33c0:	2177      	movs	r1, #119	; 0x77
    33c2:	4804      	ldr	r0, [pc, #16]	; (33d4 <vpCircBuf_freeCount+0x4c>)
    33c4:	4c04      	ldr	r4, [pc, #16]	; (33d8 <vpCircBuf_freeCount+0x50>)
    33c6:	47a0      	blx	r4
    33c8:	000032d5 	.word	0x000032d5
    33cc:	00007ebc 	.word	0x00007ebc
    33d0:	00007de4 	.word	0x00007de4
    33d4:	00007ec0 	.word	0x00007ec0
    33d8:	00005645 	.word	0x00005645
    33dc:	00007e40 	.word	0x00007e40
    33e0:	00007e4c 	.word	0x00007e4c

000033e4 <vpCircBuf_put>:



size_t vpCircBuf_put(VPCircBuf* p, const VPCircBuf_Element* buffer, size_t count_elements)
{
    33e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33e6:	46d6      	mov	lr, sl
    33e8:	4647      	mov	r7, r8
    33ea:	b580      	push	{r7, lr}
    33ec:	b083      	sub	sp, #12
    33ee:	1e04      	subs	r4, r0, #0
    33f0:	9101      	str	r1, [sp, #4]
    33f2:	4690      	mov	r8, r2
    VPCircBuf_Element*       upperRegionStart = NULL;
    VPCircBuf_Element*       upperRegionStop;
    VPCircBuf_Element*       lowerRegionStart = NULL;
    VPCircBuf_Element*       lowerRegionStop;

    REQUIRE(p);
    33f4:	d024      	beq.n	3440 <vpCircBuf_put+0x5c>
    REQUIRE(p->start);
    33f6:	6803      	ldr	r3, [r0, #0]
    33f8:	2b00      	cmp	r3, #0
    33fa:	d027      	beq.n	344c <vpCircBuf_put+0x68>
    REQUIRE(p->stop);
    33fc:	6843      	ldr	r3, [r0, #4]
    33fe:	2b00      	cmp	r3, #0
    3400:	d02a      	beq.n	3458 <vpCircBuf_put+0x74>

    vpOs_criticalRegionEnter();
    3402:	4b3b      	ldr	r3, [pc, #236]	; (34f0 <vpCircBuf_put+0x10c>)
    3404:	4798      	blx	r3

        ASSERT(!p->head
    3406:	68a3      	ldr	r3, [r4, #8]
    3408:	2b00      	cmp	r3, #0
    340a:	d00d      	beq.n	3428 <vpCircBuf_put+0x44>
    340c:	68a2      	ldr	r2, [r4, #8]
    340e:	6823      	ldr	r3, [r4, #0]
    3410:	429a      	cmp	r2, r3
    3412:	d327      	bcc.n	3464 <vpCircBuf_put+0x80>
    3414:	68a1      	ldr	r1, [r4, #8]
    3416:	6862      	ldr	r2, [r4, #4]
    3418:	4291      	cmp	r1, r2
    341a:	d223      	bcs.n	3464 <vpCircBuf_put+0x80>
    341c:	68e1      	ldr	r1, [r4, #12]
    341e:	428b      	cmp	r3, r1
    3420:	d820      	bhi.n	3464 <vpCircBuf_put+0x80>
    3422:	68e3      	ldr	r3, [r4, #12]
    3424:	429a      	cmp	r2, r3
    3426:	d91d      	bls.n	3464 <vpCircBuf_put+0x80>
                && p->tail >= p->start
                && p->tail <  p->stop
                )
            );

        if( !p->head )
    3428:	68a3      	ldr	r3, [r4, #8]
    342a:	2b00      	cmp	r3, #0
    342c:	d020      	beq.n	3470 <vpCircBuf_put+0x8c>
        {
            p->head          = p->start;
            lowerRegionStart = p->start;
            lowerRegionStop  = p->stop;
        }
        else if( p->head > p->tail )
    342e:	68a2      	ldr	r2, [r4, #8]
    3430:	68e3      	ldr	r3, [r4, #12]
    3432:	429a      	cmp	r2, r3
    3434:	d921      	bls.n	347a <vpCircBuf_put+0x96>
        {
            lowerRegionStart = p->tail;
    3436:	68e7      	ldr	r7, [r4, #12]
            lowerRegionStop  = p->head;
    3438:	68a3      	ldr	r3, [r4, #8]
    343a:	469a      	mov	sl, r3
    size_t                   total            = 0;
    343c:	2500      	movs	r5, #0
    343e:	e033      	b.n	34a8 <vpCircBuf_put+0xc4>
    REQUIRE(p);
    3440:	4b2c      	ldr	r3, [pc, #176]	; (34f4 <vpCircBuf_put+0x110>)
    3442:	4a2d      	ldr	r2, [pc, #180]	; (34f8 <vpCircBuf_put+0x114>)
    3444:	2199      	movs	r1, #153	; 0x99
    3446:	482d      	ldr	r0, [pc, #180]	; (34fc <vpCircBuf_put+0x118>)
    3448:	4c2d      	ldr	r4, [pc, #180]	; (3500 <vpCircBuf_put+0x11c>)
    344a:	47a0      	blx	r4
    REQUIRE(p->start);
    344c:	4b2d      	ldr	r3, [pc, #180]	; (3504 <vpCircBuf_put+0x120>)
    344e:	4a2a      	ldr	r2, [pc, #168]	; (34f8 <vpCircBuf_put+0x114>)
    3450:	219a      	movs	r1, #154	; 0x9a
    3452:	482a      	ldr	r0, [pc, #168]	; (34fc <vpCircBuf_put+0x118>)
    3454:	4c2a      	ldr	r4, [pc, #168]	; (3500 <vpCircBuf_put+0x11c>)
    3456:	47a0      	blx	r4
    REQUIRE(p->stop);
    3458:	4b2b      	ldr	r3, [pc, #172]	; (3508 <vpCircBuf_put+0x124>)
    345a:	4a27      	ldr	r2, [pc, #156]	; (34f8 <vpCircBuf_put+0x114>)
    345c:	219b      	movs	r1, #155	; 0x9b
    345e:	4827      	ldr	r0, [pc, #156]	; (34fc <vpCircBuf_put+0x118>)
    3460:	4c27      	ldr	r4, [pc, #156]	; (3500 <vpCircBuf_put+0x11c>)
    3462:	47a0      	blx	r4
        ASSERT(!p->head
    3464:	4b29      	ldr	r3, [pc, #164]	; (350c <vpCircBuf_put+0x128>)
    3466:	4a24      	ldr	r2, [pc, #144]	; (34f8 <vpCircBuf_put+0x114>)
    3468:	21a5      	movs	r1, #165	; 0xa5
    346a:	4824      	ldr	r0, [pc, #144]	; (34fc <vpCircBuf_put+0x118>)
    346c:	4c24      	ldr	r4, [pc, #144]	; (3500 <vpCircBuf_put+0x11c>)
    346e:	47a0      	blx	r4
            p->head          = p->start;
    3470:	6827      	ldr	r7, [r4, #0]
    3472:	60a7      	str	r7, [r4, #8]
            lowerRegionStop  = p->stop;
    3474:	6863      	ldr	r3, [r4, #4]
    3476:	469a      	mov	sl, r3
    3478:	e7e0      	b.n	343c <vpCircBuf_put+0x58>
        }
        else if( p->head < p->tail )
    347a:	68a2      	ldr	r2, [r4, #8]
    347c:	68e3      	ldr	r3, [r4, #12]
    size_t                   total            = 0;
    347e:	2500      	movs	r5, #0
        else if( p->head < p->tail )
    3480:	429a      	cmp	r2, r3
    3482:	d215      	bcs.n	34b0 <vpCircBuf_put+0xcc>
        {
            upperRegionStart = p->tail;
    3484:	68e6      	ldr	r6, [r4, #12]
            upperRegionStop  = p->stop;
    3486:	6863      	ldr	r3, [r4, #4]
            lowerRegionStart = p->start;
    3488:	6827      	ldr	r7, [r4, #0]
            lowerRegionStop  = p->head;
    348a:	68a2      	ldr	r2, [r4, #8]
    348c:	4692      	mov	sl, r2
        }

        if( upperRegionStart )
    348e:	2e00      	cmp	r6, #0
    3490:	d00a      	beq.n	34a8 <vpCircBuf_put+0xc4>
        {
            n = MIN_(count_elements, (size_t)(upperRegionStop - upperRegionStart));
    3492:	1b9d      	subs	r5, r3, r6
    3494:	4545      	cmp	r5, r8
    3496:	d900      	bls.n	349a <vpCircBuf_put+0xb6>
    3498:	4645      	mov	r5, r8
            memcpy(upperRegionStart, buf, n * sizeof *upperRegionStart);
    349a:	002a      	movs	r2, r5
    349c:	9901      	ldr	r1, [sp, #4]
    349e:	0030      	movs	r0, r6
    34a0:	4b1b      	ldr	r3, [pc, #108]	; (3510 <vpCircBuf_put+0x12c>)
    34a2:	4798      	blx	r3
            total += n;
            p->tail = upperRegionStart + n;
    34a4:	1976      	adds	r6, r6, r5
    34a6:	60e6      	str	r6, [r4, #12]
        }

        if( lowerRegionStart  &&  total < count_elements )
    34a8:	2f00      	cmp	r7, #0
    34aa:	d001      	beq.n	34b0 <vpCircBuf_put+0xcc>
    34ac:	4545      	cmp	r5, r8
    34ae:	d30b      	bcc.n	34c8 <vpCircBuf_put+0xe4>
            memcpy(lowerRegionStart, buf + total, n * sizeof *lowerRegionStart);
            total += n;
            p->tail = lowerRegionStart + n;
        }

        if( p->tail == p->stop )
    34b0:	68e3      	ldr	r3, [r4, #12]
    34b2:	6862      	ldr	r2, [r4, #4]
    34b4:	4293      	cmp	r3, r2
    34b6:	d018      	beq.n	34ea <vpCircBuf_put+0x106>
            p->tail =  p->start;

    vpOs_criticalRegionLeave();
    34b8:	4b16      	ldr	r3, [pc, #88]	; (3514 <vpCircBuf_put+0x130>)
    34ba:	4798      	blx	r3
         */

    xTRACE(("\t\t%p:%p\n", p->head, p->tail));

    return total;
}
    34bc:	0028      	movs	r0, r5
    34be:	b003      	add	sp, #12
    34c0:	bc0c      	pop	{r2, r3}
    34c2:	4690      	mov	r8, r2
    34c4:	469a      	mov	sl, r3
    34c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            n = MIN_(count_elements - total, (size_t)(lowerRegionStop - lowerRegionStart));
    34c8:	4643      	mov	r3, r8
    34ca:	1b5b      	subs	r3, r3, r5
    34cc:	4652      	mov	r2, sl
    34ce:	1bd6      	subs	r6, r2, r7
    34d0:	429e      	cmp	r6, r3
    34d2:	d900      	bls.n	34d6 <vpCircBuf_put+0xf2>
    34d4:	001e      	movs	r6, r3
            memcpy(lowerRegionStart, buf + total, n * sizeof *lowerRegionStart);
    34d6:	9b01      	ldr	r3, [sp, #4]
    34d8:	1959      	adds	r1, r3, r5
    34da:	0032      	movs	r2, r6
    34dc:	0038      	movs	r0, r7
    34de:	4b0c      	ldr	r3, [pc, #48]	; (3510 <vpCircBuf_put+0x12c>)
    34e0:	4798      	blx	r3
            total += n;
    34e2:	19ad      	adds	r5, r5, r6
            p->tail = lowerRegionStart + n;
    34e4:	19be      	adds	r6, r7, r6
    34e6:	60e6      	str	r6, [r4, #12]
    34e8:	e7e2      	b.n	34b0 <vpCircBuf_put+0xcc>
            p->tail =  p->start;
    34ea:	6823      	ldr	r3, [r4, #0]
    34ec:	60e3      	str	r3, [r4, #12]
    34ee:	e7e3      	b.n	34b8 <vpCircBuf_put+0xd4>
    34f0:	00003731 	.word	0x00003731
    34f4:	00007ebc 	.word	0x00007ebc
    34f8:	00007df8 	.word	0x00007df8
    34fc:	00007ec0 	.word	0x00007ec0
    3500:	00005645 	.word	0x00005645
    3504:	00007e40 	.word	0x00007e40
    3508:	00007e4c 	.word	0x00007e4c
    350c:	00007e54 	.word	0x00007e54
    3510:	00005707 	.word	0x00005707
    3514:	0000373d 	.word	0x0000373d

00003518 <vpCircBuf_putAll>:



size_t vpCircBuf_putAll(VPCircBuf* p, const VPCircBuf_Element* buffer, size_t count_elements)
{
    3518:	b570      	push	{r4, r5, r6, lr}
    351a:	0005      	movs	r5, r0
    351c:	000e      	movs	r6, r1
    351e:	0014      	movs	r4, r2
    bool                     ok;
    const VPCircBuf_Element* buf = (const VPCircBuf_Element*)buffer;

    vpOs_criticalRegionEnter();
    3520:	4b0d      	ldr	r3, [pc, #52]	; (3558 <vpCircBuf_putAll+0x40>)
    3522:	4798      	blx	r3

        ok = vpCircBuf_freeCount(p) >= count_elements;
    3524:	0028      	movs	r0, r5
    3526:	4b0d      	ldr	r3, [pc, #52]	; (355c <vpCircBuf_putAll+0x44>)
    3528:	4798      	blx	r3

        if( ok )
    352a:	42a0      	cmp	r0, r4
    352c:	d310      	bcc.n	3550 <vpCircBuf_putAll+0x38>
        {
            size_t n = vpCircBuf_put(p, buf, count_elements);
    352e:	0022      	movs	r2, r4
    3530:	0031      	movs	r1, r6
    3532:	0028      	movs	r0, r5
    3534:	4b0a      	ldr	r3, [pc, #40]	; (3560 <vpCircBuf_putAll+0x48>)
    3536:	4798      	blx	r3
            ASSERT(n == count_elements);
    3538:	4284      	cmp	r4, r0
    353a:	d103      	bne.n	3544 <vpCircBuf_putAll+0x2c>
        }

    vpOs_criticalRegionLeave();
    353c:	4b09      	ldr	r3, [pc, #36]	; (3564 <vpCircBuf_putAll+0x4c>)
    353e:	4798      	blx	r3

    return ok? count_elements: 0;
    3540:	0020      	movs	r0, r4
    3542:	e008      	b.n	3556 <vpCircBuf_putAll+0x3e>
            ASSERT(n == count_elements);
    3544:	4b08      	ldr	r3, [pc, #32]	; (3568 <vpCircBuf_putAll+0x50>)
    3546:	4a09      	ldr	r2, [pc, #36]	; (356c <vpCircBuf_putAll+0x54>)
    3548:	21ea      	movs	r1, #234	; 0xea
    354a:	4809      	ldr	r0, [pc, #36]	; (3570 <vpCircBuf_putAll+0x58>)
    354c:	4c09      	ldr	r4, [pc, #36]	; (3574 <vpCircBuf_putAll+0x5c>)
    354e:	47a0      	blx	r4
    vpOs_criticalRegionLeave();
    3550:	4b04      	ldr	r3, [pc, #16]	; (3564 <vpCircBuf_putAll+0x4c>)
    3552:	4798      	blx	r3
    return ok? count_elements: 0;
    3554:	2000      	movs	r0, #0
}
    3556:	bd70      	pop	{r4, r5, r6, pc}
    3558:	00003731 	.word	0x00003731
    355c:	00003389 	.word	0x00003389
    3560:	000033e5 	.word	0x000033e5
    3564:	0000373d 	.word	0x0000373d
    3568:	00007ef8 	.word	0x00007ef8
    356c:	00007e08 	.word	0x00007e08
    3570:	00007ec0 	.word	0x00007ec0
    3574:	00005645 	.word	0x00005645

00003578 <vpCircBuf_get>:
}



size_t vpCircBuf_get(VPCircBuf* p, VPCircBuf_Element* buffer, size_t count_elements)
{
    3578:	b5f0      	push	{r4, r5, r6, r7, lr}
    357a:	46d6      	mov	lr, sl
    357c:	4647      	mov	r7, r8
    357e:	b580      	push	{r7, lr}
    3580:	b083      	sub	sp, #12
    3582:	1e04      	subs	r4, r0, #0
    3584:	9101      	str	r1, [sp, #4]
    3586:	4690      	mov	r8, r2
    VPCircBuf_Element*  upperRegionStart = NULL;
    VPCircBuf_Element*  upperRegionStop;
    VPCircBuf_Element*  lowerRegionStart = NULL;
    VPCircBuf_Element*  lowerRegionStop;

    REQUIRE(p);
    3588:	d025      	beq.n	35d6 <vpCircBuf_get+0x5e>
    REQUIRE(p->start);
    358a:	6803      	ldr	r3, [r0, #0]
    358c:	2b00      	cmp	r3, #0
    358e:	d029      	beq.n	35e4 <vpCircBuf_get+0x6c>
    REQUIRE(p->stop);
    3590:	6843      	ldr	r3, [r0, #4]
    3592:	2b00      	cmp	r3, #0
    3594:	d02d      	beq.n	35f2 <vpCircBuf_get+0x7a>

    vpOs_criticalRegionEnter();
    3596:	4b3e      	ldr	r3, [pc, #248]	; (3690 <vpCircBuf_get+0x118>)
    3598:	4798      	blx	r3
       if( p->head )
    359a:	68a3      	ldr	r3, [r4, #8]
    359c:	2b00      	cmp	r3, #0
    359e:	d100      	bne.n	35a2 <vpCircBuf_get+0x2a>
    35a0:	e073      	b.n	368a <vpCircBuf_get+0x112>
       {
            ASSERT(!p->head
    35a2:	68a3      	ldr	r3, [r4, #8]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d00d      	beq.n	35c4 <vpCircBuf_get+0x4c>
    35a8:	68a2      	ldr	r2, [r4, #8]
    35aa:	6823      	ldr	r3, [r4, #0]
    35ac:	429a      	cmp	r2, r3
    35ae:	d327      	bcc.n	3600 <vpCircBuf_get+0x88>
    35b0:	68a1      	ldr	r1, [r4, #8]
    35b2:	6862      	ldr	r2, [r4, #4]
    35b4:	4291      	cmp	r1, r2
    35b6:	d223      	bcs.n	3600 <vpCircBuf_get+0x88>
    35b8:	68e1      	ldr	r1, [r4, #12]
    35ba:	428b      	cmp	r3, r1
    35bc:	d820      	bhi.n	3600 <vpCircBuf_get+0x88>
    35be:	68e3      	ldr	r3, [r4, #12]
    35c0:	429a      	cmp	r2, r3
    35c2:	d91d      	bls.n	3600 <vpCircBuf_get+0x88>
                    && p->tail >= p->start
                    && p->tail <  p->stop
                    )
                );

            if( p->head < p->tail )
    35c4:	68a2      	ldr	r2, [r4, #8]
    35c6:	68e3      	ldr	r3, [r4, #12]
    35c8:	429a      	cmp	r2, r3
    35ca:	d220      	bcs.n	360e <vpCircBuf_get+0x96>
            {
                lowerRegionStart = p->head;
    35cc:	68a7      	ldr	r7, [r4, #8]
                lowerRegionStop  = p->tail;
    35ce:	68e3      	ldr	r3, [r4, #12]
    35d0:	469a      	mov	sl, r3
    size_t              total            = 0;
    35d2:	2500      	movs	r5, #0
    35d4:	e02e      	b.n	3634 <vpCircBuf_get+0xbc>
    REQUIRE(p);
    35d6:	4b2f      	ldr	r3, [pc, #188]	; (3694 <vpCircBuf_get+0x11c>)
    35d8:	4a2f      	ldr	r2, [pc, #188]	; (3698 <vpCircBuf_get+0x120>)
    35da:	2189      	movs	r1, #137	; 0x89
    35dc:	0049      	lsls	r1, r1, #1
    35de:	482f      	ldr	r0, [pc, #188]	; (369c <vpCircBuf_get+0x124>)
    35e0:	4c2f      	ldr	r4, [pc, #188]	; (36a0 <vpCircBuf_get+0x128>)
    35e2:	47a0      	blx	r4
    REQUIRE(p->start);
    35e4:	4b2f      	ldr	r3, [pc, #188]	; (36a4 <vpCircBuf_get+0x12c>)
    35e6:	4a2c      	ldr	r2, [pc, #176]	; (3698 <vpCircBuf_get+0x120>)
    35e8:	2114      	movs	r1, #20
    35ea:	31ff      	adds	r1, #255	; 0xff
    35ec:	482b      	ldr	r0, [pc, #172]	; (369c <vpCircBuf_get+0x124>)
    35ee:	4c2c      	ldr	r4, [pc, #176]	; (36a0 <vpCircBuf_get+0x128>)
    35f0:	47a0      	blx	r4
    REQUIRE(p->stop);
    35f2:	4b2d      	ldr	r3, [pc, #180]	; (36a8 <vpCircBuf_get+0x130>)
    35f4:	4a28      	ldr	r2, [pc, #160]	; (3698 <vpCircBuf_get+0x120>)
    35f6:	218a      	movs	r1, #138	; 0x8a
    35f8:	0049      	lsls	r1, r1, #1
    35fa:	4828      	ldr	r0, [pc, #160]	; (369c <vpCircBuf_get+0x124>)
    35fc:	4c28      	ldr	r4, [pc, #160]	; (36a0 <vpCircBuf_get+0x128>)
    35fe:	47a0      	blx	r4
            ASSERT(!p->head
    3600:	4b2a      	ldr	r3, [pc, #168]	; (36ac <vpCircBuf_get+0x134>)
    3602:	4a25      	ldr	r2, [pc, #148]	; (3698 <vpCircBuf_get+0x120>)
    3604:	2120      	movs	r1, #32
    3606:	31ff      	adds	r1, #255	; 0xff
    3608:	4824      	ldr	r0, [pc, #144]	; (369c <vpCircBuf_get+0x124>)
    360a:	4c25      	ldr	r4, [pc, #148]	; (36a0 <vpCircBuf_get+0x128>)
    360c:	47a0      	blx	r4
            }
            else
            {
                upperRegionStart = p->head;
    360e:	68a6      	ldr	r6, [r4, #8]
                upperRegionStop  = p->stop;
    3610:	6863      	ldr	r3, [r4, #4]
                lowerRegionStart = p->start;
    3612:	6827      	ldr	r7, [r4, #0]
                lowerRegionStop  = p->tail;
    3614:	68e2      	ldr	r2, [r4, #12]
    3616:	4692      	mov	sl, r2
    size_t              total            = 0;
    3618:	2500      	movs	r5, #0
            }

            if( upperRegionStart )
    361a:	2e00      	cmp	r6, #0
    361c:	d00a      	beq.n	3634 <vpCircBuf_get+0xbc>
            {
                n = MIN_(count_elements, (size_t)(upperRegionStop - upperRegionStart));
    361e:	1b9d      	subs	r5, r3, r6
    3620:	4545      	cmp	r5, r8
    3622:	d900      	bls.n	3626 <vpCircBuf_get+0xae>
    3624:	4645      	mov	r5, r8
                memcpy(buffer, upperRegionStart, n * sizeof *upperRegionStart);
    3626:	002a      	movs	r2, r5
    3628:	0031      	movs	r1, r6
    362a:	9801      	ldr	r0, [sp, #4]
    362c:	4b20      	ldr	r3, [pc, #128]	; (36b0 <vpCircBuf_get+0x138>)
    362e:	4798      	blx	r3
                total += n;
                p->head = upperRegionStart + n;
    3630:	1976      	adds	r6, r6, r5
    3632:	60a6      	str	r6, [r4, #8]
            }

            if( lowerRegionStart  &&  total < count_elements )
    3634:	2f00      	cmp	r7, #0
    3636:	d001      	beq.n	363c <vpCircBuf_get+0xc4>
    3638:	4545      	cmp	r5, r8
    363a:	d30f      	bcc.n	365c <vpCircBuf_get+0xe4>
                memcpy(buffer + total, lowerRegionStart, n * sizeof *buffer);
                total += n;
                p->head = lowerRegionStart + n;
            }

            if( p->head == p->stop )
    363c:	68a3      	ldr	r3, [r4, #8]
    363e:	6862      	ldr	r2, [r4, #4]
    3640:	4293      	cmp	r3, r2
    3642:	d01c      	beq.n	367e <vpCircBuf_get+0x106>
                p->head =  p->start;

            if( p->head == p->tail )
    3644:	68a2      	ldr	r2, [r4, #8]
    3646:	68e3      	ldr	r3, [r4, #12]
    3648:	429a      	cmp	r2, r3
    364a:	d01b      	beq.n	3684 <vpCircBuf_get+0x10c>
                p->head =  NULL;
        }
    vpOs_criticalRegionLeave();
    364c:	4b19      	ldr	r3, [pc, #100]	; (36b4 <vpCircBuf_get+0x13c>)
    364e:	4798      	blx	r3

    xTRACE(("\t\t%p:%p\n", p->head, p->tail));

    return total;
}
    3650:	0028      	movs	r0, r5
    3652:	b003      	add	sp, #12
    3654:	bc0c      	pop	{r2, r3}
    3656:	4690      	mov	r8, r2
    3658:	469a      	mov	sl, r3
    365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                n = MIN_(count_elements - total, (size_t)(lowerRegionStop - lowerRegionStart));
    365c:	4643      	mov	r3, r8
    365e:	1b5b      	subs	r3, r3, r5
    3660:	4652      	mov	r2, sl
    3662:	1bd6      	subs	r6, r2, r7
    3664:	429e      	cmp	r6, r3
    3666:	d900      	bls.n	366a <vpCircBuf_get+0xf2>
    3668:	001e      	movs	r6, r3
                memcpy(buffer + total, lowerRegionStart, n * sizeof *buffer);
    366a:	9b01      	ldr	r3, [sp, #4]
    366c:	1958      	adds	r0, r3, r5
    366e:	0032      	movs	r2, r6
    3670:	0039      	movs	r1, r7
    3672:	4b0f      	ldr	r3, [pc, #60]	; (36b0 <vpCircBuf_get+0x138>)
    3674:	4798      	blx	r3
                total += n;
    3676:	19ad      	adds	r5, r5, r6
                p->head = lowerRegionStart + n;
    3678:	19be      	adds	r6, r7, r6
    367a:	60a6      	str	r6, [r4, #8]
    367c:	e7de      	b.n	363c <vpCircBuf_get+0xc4>
                p->head =  p->start;
    367e:	6823      	ldr	r3, [r4, #0]
    3680:	60a3      	str	r3, [r4, #8]
    3682:	e7df      	b.n	3644 <vpCircBuf_get+0xcc>
                p->head =  NULL;
    3684:	2300      	movs	r3, #0
    3686:	60a3      	str	r3, [r4, #8]
    3688:	e7e0      	b.n	364c <vpCircBuf_get+0xd4>
    size_t              total            = 0;
    368a:	2500      	movs	r5, #0
    368c:	e7de      	b.n	364c <vpCircBuf_get+0xd4>
    368e:	46c0      	nop			; (mov r8, r8)
    3690:	00003731 	.word	0x00003731
    3694:	00007ebc 	.word	0x00007ebc
    3698:	00007e1c 	.word	0x00007e1c
    369c:	00007ec0 	.word	0x00007ec0
    36a0:	00005645 	.word	0x00005645
    36a4:	00007e40 	.word	0x00007e40
    36a8:	00007e4c 	.word	0x00007e4c
    36ac:	00007e54 	.word	0x00007e54
    36b0:	00005707 	.word	0x00005707
    36b4:	0000373d 	.word	0x0000373d

000036b8 <vpCircBuf_getAll>:



bool vpCircBuf_getAll(VPCircBuf* p, VPCircBuf_Element* buffer, size_t count_elements)
{
    36b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ba:	0004      	movs	r4, r0
    36bc:	000d      	movs	r5, r1
    36be:	0017      	movs	r7, r2
    bool ret;

    vpOs_criticalRegionEnter();
    36c0:	4b0e      	ldr	r3, [pc, #56]	; (36fc <vpCircBuf_getAll+0x44>)
    36c2:	4798      	blx	r3

        ret = vpCircBuf_count(p) >= count_elements;
    36c4:	0020      	movs	r0, r4
    36c6:	4b0e      	ldr	r3, [pc, #56]	; (3700 <vpCircBuf_getAll+0x48>)
    36c8:	4798      	blx	r3
    36ca:	2300      	movs	r3, #0
    36cc:	42b8      	cmp	r0, r7
    36ce:	415b      	adcs	r3, r3
    36d0:	b2de      	uxtb	r6, r3

        if( ret )
    36d2:	42b8      	cmp	r0, r7
    36d4:	d306      	bcc.n	36e4 <vpCircBuf_getAll+0x2c>
        {
            size_t n = vpCircBuf_get(p, buffer, count_elements);
    36d6:	003a      	movs	r2, r7
    36d8:	0029      	movs	r1, r5
    36da:	0020      	movs	r0, r4
    36dc:	4b09      	ldr	r3, [pc, #36]	; (3704 <vpCircBuf_getAll+0x4c>)
    36de:	4798      	blx	r3
            ASSERT(n == count_elements);
    36e0:	4287      	cmp	r7, r0
    36e2:	d103      	bne.n	36ec <vpCircBuf_getAll+0x34>
        }

    vpOs_criticalRegionLeave();
    36e4:	4b08      	ldr	r3, [pc, #32]	; (3708 <vpCircBuf_getAll+0x50>)
    36e6:	4798      	blx	r3

    return ret;
}
    36e8:	0030      	movs	r0, r6
    36ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ASSERT(n == count_elements);
    36ec:	4b07      	ldr	r3, [pc, #28]	; (370c <vpCircBuf_getAll+0x54>)
    36ee:	4a08      	ldr	r2, [pc, #32]	; (3710 <vpCircBuf_getAll+0x58>)
    36f0:	21ac      	movs	r1, #172	; 0xac
    36f2:	0049      	lsls	r1, r1, #1
    36f4:	4807      	ldr	r0, [pc, #28]	; (3714 <vpCircBuf_getAll+0x5c>)
    36f6:	4c08      	ldr	r4, [pc, #32]	; (3718 <vpCircBuf_getAll+0x60>)
    36f8:	47a0      	blx	r4
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	00003731 	.word	0x00003731
    3700:	000032d5 	.word	0x000032d5
    3704:	00003579 	.word	0x00003579
    3708:	0000373d 	.word	0x0000373d
    370c:	00007ef8 	.word	0x00007ef8
    3710:	00007e2c 	.word	0x00007e2c
    3714:	00007ec0 	.word	0x00007ec0
    3718:	00005645 	.word	0x00005645

0000371c <vpCircBuf_getElement>:



bool vpCircBuf_getElement(VPCircBuf* p, VPCircBuf_Element* buffer)
{
    371c:	b510      	push	{r4, lr}
    return vpCircBuf_getAll(p, buffer, 1);
    371e:	2201      	movs	r2, #1
    3720:	4b01      	ldr	r3, [pc, #4]	; (3728 <vpCircBuf_getElement+0xc>)
    3722:	4798      	blx	r3
}
    3724:	bd10      	pop	{r4, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	000036b9 	.word	0x000036b9

0000372c <vpOs_init>:


 void vpOs_init(void)
 {
	 
 }
    372c:	4770      	bx	lr
	...

00003730 <vpOs_criticalRegionEnter>:
 
 
 
 void vpOs_criticalRegionEnter(void)
 {
    3730:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    3732:	4b01      	ldr	r3, [pc, #4]	; (3738 <vpOs_criticalRegionEnter+0x8>)
    3734:	4798      	blx	r3
 }
    3736:	bd10      	pop	{r4, pc}
    3738:	00004c79 	.word	0x00004c79

0000373c <vpOs_criticalRegionLeave>:
 
 
 
 void vpOs_criticalRegionLeave(void)
 {
    373c:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    373e:	4b01      	ldr	r3, [pc, #4]	; (3744 <vpOs_criticalRegionLeave+0x8>)
    3740:	4798      	blx	r3
    3742:	bd10      	pop	{r4, pc}
    3744:	00004cb9 	.word	0x00004cb9

00003748 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    3748:	b510      	push	{r4, lr}
    374a:	b082      	sub	sp, #8
    374c:	0004      	movs	r4, r0
			PM->APBAMASK.reg |= mask;
    374e:	4a39      	ldr	r2, [pc, #228]	; (3834 <wdt_set_config+0xec>)
    3750:	6993      	ldr	r3, [r2, #24]
    3752:	2110      	movs	r1, #16
    3754:	430b      	orrs	r3, r1
    3756:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    3758:	4b37      	ldr	r3, [pc, #220]	; (3838 <wdt_set_config+0xf0>)
    375a:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    375c:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
    375e:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
    3760:	2b00      	cmp	r3, #0
    3762:	db03      	blt.n	376c <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3764:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
    3766:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3768:	2b00      	cmp	r3, #0
    376a:	d101      	bne.n	3770 <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    376c:	b002      	add	sp, #8
    376e:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    3770:	7922      	ldrb	r2, [r4, #4]
    3772:	429a      	cmp	r2, r3
    3774:	d8fa      	bhi.n	376c <wdt_set_config+0x24>
    3776:	7962      	ldrb	r2, [r4, #5]
    3778:	429a      	cmp	r2, r3
    377a:	d8f7      	bhi.n	376c <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    377c:	4a2e      	ldr	r2, [pc, #184]	; (3838 <wdt_set_config+0xf0>)
    377e:	7813      	ldrb	r3, [r2, #0]
    3780:	390e      	subs	r1, #14
    3782:	438b      	bics	r3, r1
    3784:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    3786:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    3788:	b25b      	sxtb	r3, r3
    378a:	2b00      	cmp	r3, #0
    378c:	dbfb      	blt.n	3786 <wdt_set_config+0x3e>
	if(config->enable == false) {
    378e:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    3790:	2000      	movs	r0, #0
	if(config->enable == false) {
    3792:	2b00      	cmp	r3, #0
    3794:	d0ea      	beq.n	376c <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
    3796:	a901      	add	r1, sp, #4
    3798:	78a3      	ldrb	r3, [r4, #2]
    379a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    379c:	3003      	adds	r0, #3
    379e:	4b27      	ldr	r3, [pc, #156]	; (383c <wdt_set_config+0xf4>)
    37a0:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    37a2:	2003      	movs	r0, #3
    37a4:	4b26      	ldr	r3, [pc, #152]	; (3840 <wdt_set_config+0xf8>)
    37a6:	4798      	blx	r3
	if (config->always_on) {
    37a8:	7823      	ldrb	r3, [r4, #0]
    37aa:	2b00      	cmp	r3, #0
    37ac:	d127      	bne.n	37fe <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    37ae:	78e3      	ldrb	r3, [r4, #3]
    37b0:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    37b2:	7922      	ldrb	r2, [r4, #4]
    37b4:	2a00      	cmp	r2, #0
    37b6:	d026      	beq.n	3806 <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    37b8:	491f      	ldr	r1, [pc, #124]	; (3838 <wdt_set_config+0xf0>)
    37ba:	780a      	ldrb	r2, [r1, #0]
    37bc:	2004      	movs	r0, #4
    37be:	4302      	orrs	r2, r0
    37c0:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    37c2:	7922      	ldrb	r2, [r4, #4]
    37c4:	3a01      	subs	r2, #1
    37c6:	4082      	lsls	r2, r0
    37c8:	4313      	orrs	r3, r2
    37ca:	491b      	ldr	r1, [pc, #108]	; (3838 <wdt_set_config+0xf0>)
    37cc:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
    37ce:	b252      	sxtb	r2, r2
    37d0:	2a00      	cmp	r2, #0
    37d2:	dbfb      	blt.n	37cc <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
    37d4:	b2db      	uxtb	r3, r3
    37d6:	4a18      	ldr	r2, [pc, #96]	; (3838 <wdt_set_config+0xf0>)
    37d8:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    37da:	7963      	ldrb	r3, [r4, #5]
    37dc:	2b00      	cmp	r3, #0
    37de:	d118      	bne.n	3812 <wdt_set_config+0xca>
	if (config->always_on) {
    37e0:	7823      	ldrb	r3, [r4, #0]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d01f      	beq.n	3826 <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    37e6:	4a14      	ldr	r2, [pc, #80]	; (3838 <wdt_set_config+0xf0>)
    37e8:	7813      	ldrb	r3, [r2, #0]
    37ea:	2180      	movs	r1, #128	; 0x80
    37ec:	430b      	orrs	r3, r1
    37ee:	7013      	strb	r3, [r2, #0]
    37f0:	4a11      	ldr	r2, [pc, #68]	; (3838 <wdt_set_config+0xf0>)
    37f2:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    37f4:	b25b      	sxtb	r3, r3
    37f6:	2b00      	cmp	r3, #0
    37f8:	dbfb      	blt.n	37f2 <wdt_set_config+0xaa>
	return STATUS_OK;
    37fa:	2000      	movs	r0, #0
    37fc:	e7b6      	b.n	376c <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
    37fe:	2003      	movs	r0, #3
    3800:	4b10      	ldr	r3, [pc, #64]	; (3844 <wdt_set_config+0xfc>)
    3802:	4798      	blx	r3
    3804:	e7d3      	b.n	37ae <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    3806:	490c      	ldr	r1, [pc, #48]	; (3838 <wdt_set_config+0xf0>)
    3808:	780a      	ldrb	r2, [r1, #0]
    380a:	2004      	movs	r0, #4
    380c:	4382      	bics	r2, r0
    380e:	700a      	strb	r2, [r1, #0]
    3810:	e7db      	b.n	37ca <wdt_set_config+0x82>
    3812:	0011      	movs	r1, r2
    3814:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
    3816:	b252      	sxtb	r2, r2
    3818:	2a00      	cmp	r2, #0
    381a:	dbfb      	blt.n	3814 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    381c:	3b01      	subs	r3, #1
    381e:	b2db      	uxtb	r3, r3
    3820:	4a05      	ldr	r2, [pc, #20]	; (3838 <wdt_set_config+0xf0>)
    3822:	7093      	strb	r3, [r2, #2]
    3824:	e7dc      	b.n	37e0 <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    3826:	4a04      	ldr	r2, [pc, #16]	; (3838 <wdt_set_config+0xf0>)
    3828:	7813      	ldrb	r3, [r2, #0]
    382a:	2102      	movs	r1, #2
    382c:	430b      	orrs	r3, r1
    382e:	7013      	strb	r3, [r2, #0]
    3830:	e7de      	b.n	37f0 <wdt_set_config+0xa8>
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	40000400 	.word	0x40000400
    3838:	40001000 	.word	0x40001000
    383c:	00005189 	.word	0x00005189
    3840:	000050fd 	.word	0x000050fd
    3844:	000051a5 	.word	0x000051a5

00003848 <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
    3848:	2900      	cmp	r1, #0
    384a:	d001      	beq.n	3850 <wdt_register_callback+0x8>
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    384c:	2017      	movs	r0, #23
	}
}
    384e:	4770      	bx	lr
		wdt_early_warning_callback = callback;
    3850:	4b01      	ldr	r3, [pc, #4]	; (3858 <wdt_register_callback+0x10>)
    3852:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
    3854:	2000      	movs	r0, #0
    3856:	e7fa      	b.n	384e <wdt_register_callback+0x6>
    3858:	20000d14 	.word	0x20000d14

0000385c <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
    385c:	2800      	cmp	r0, #0
    385e:	d001      	beq.n	3864 <wdt_enable_callback+0x8>
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3860:	2017      	movs	r0, #23
	}
}
    3862:	4770      	bx	lr
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
    3864:	2201      	movs	r2, #1
    3866:	4b03      	ldr	r3, [pc, #12]	; (3874 <wdt_enable_callback+0x18>)
    3868:	715a      	strb	r2, [r3, #5]
    386a:	3203      	adds	r2, #3
    386c:	4b02      	ldr	r3, [pc, #8]	; (3878 <wdt_enable_callback+0x1c>)
    386e:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
    3870:	e7f7      	b.n	3862 <wdt_enable_callback+0x6>
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	40001000 	.word	0x40001000
    3878:	e000e100 	.word	0xe000e100

0000387c <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    387c:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    387e:	2201      	movs	r2, #1
    3880:	4b03      	ldr	r3, [pc, #12]	; (3890 <WDT_Handler+0x14>)
    3882:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    3884:	4b03      	ldr	r3, [pc, #12]	; (3894 <WDT_Handler+0x18>)
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	2b00      	cmp	r3, #0
    388a:	d000      	beq.n	388e <WDT_Handler+0x12>
		wdt_early_warning_callback();
    388c:	4798      	blx	r3
	}
}
    388e:	bd10      	pop	{r4, pc}
    3890:	40001000 	.word	0x40001000
    3894:	20000d14 	.word	0x20000d14

00003898 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    3898:	4b09      	ldr	r3, [pc, #36]	; (38c0 <_tcc_get_inst_index+0x28>)
    389a:	4298      	cmp	r0, r3
    389c:	d00c      	beq.n	38b8 <_tcc_get_inst_index+0x20>
    389e:	4b09      	ldr	r3, [pc, #36]	; (38c4 <_tcc_get_inst_index+0x2c>)
    38a0:	4298      	cmp	r0, r3
    38a2:	d007      	beq.n	38b4 <_tcc_get_inst_index+0x1c>
    38a4:	4a08      	ldr	r2, [pc, #32]	; (38c8 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    38a6:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    38a8:	4290      	cmp	r0, r2
    38aa:	d001      	beq.n	38b0 <_tcc_get_inst_index+0x18>
}
    38ac:	0018      	movs	r0, r3
    38ae:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    38b0:	3302      	adds	r3, #2
    38b2:	e002      	b.n	38ba <_tcc_get_inst_index+0x22>
    38b4:	2301      	movs	r3, #1
    38b6:	e000      	b.n	38ba <_tcc_get_inst_index+0x22>
    38b8:	2300      	movs	r3, #0
			return i;
    38ba:	b2db      	uxtb	r3, r3
    38bc:	e7f6      	b.n	38ac <_tcc_get_inst_index+0x14>
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	42002000 	.word	0x42002000
    38c4:	42002400 	.word	0x42002400
    38c8:	42002800 	.word	0x42002800

000038cc <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    38cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ce:	000f      	movs	r7, r1
    38d0:	0015      	movs	r5, r2
    38d2:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    38d4:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    38d6:	0020      	movs	r0, r4
    38d8:	4b16      	ldr	r3, [pc, #88]	; (3934 <_tcc_set_compare_value+0x68>)
    38da:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    38dc:	4b16      	ldr	r3, [pc, #88]	; (3938 <_tcc_set_compare_value+0x6c>)
    38de:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    38e0:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    38e2:	42ba      	cmp	r2, r7
    38e4:	d801      	bhi.n	38ea <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    38e6:	0018      	movs	r0, r3
    38e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
    38ea:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
    38ec:	4b13      	ldr	r3, [pc, #76]	; (393c <_tcc_set_compare_value+0x70>)
    38ee:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    38f0:	2317      	movs	r3, #23
	if (compare > max_count) {
    38f2:	42aa      	cmp	r2, r5
    38f4:	d3f7      	bcc.n	38e6 <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
    38f6:	2e00      	cmp	r6, #0
    38f8:	d010      	beq.n	391c <_tcc_set_compare_value+0x50>
				(TCC_STATUS_CCBV0 << channel_index)) {
    38fa:	2280      	movs	r2, #128	; 0x80
    38fc:	0252      	lsls	r2, r2, #9
    38fe:	40ba      	lsls	r2, r7
		while(tcc_module->STATUS.reg  &
    3900:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3902:	421a      	tst	r2, r3
    3904:	d1fc      	bne.n	3900 <_tcc_set_compare_value+0x34>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    3906:	2280      	movs	r2, #128	; 0x80
    3908:	0312      	lsls	r2, r2, #12
    390a:	40ba      	lsls	r2, r7
		while(tcc_module->SYNCBUSY.reg  &
    390c:	68a3      	ldr	r3, [r4, #8]
    390e:	421a      	tst	r2, r3
    3910:	d1fc      	bne.n	390c <_tcc_set_compare_value+0x40>
		tcc_module->CCB[channel_index].reg = compare;
    3912:	371c      	adds	r7, #28
    3914:	00bf      	lsls	r7, r7, #2
    3916:	513d      	str	r5, [r7, r4]
	return STATUS_OK;
    3918:	2300      	movs	r3, #0
    391a:	e7e4      	b.n	38e6 <_tcc_set_compare_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    391c:	2280      	movs	r2, #128	; 0x80
    391e:	0052      	lsls	r2, r2, #1
    3920:	40ba      	lsls	r2, r7
    3922:	68a3      	ldr	r3, [r4, #8]
    3924:	421a      	tst	r2, r3
    3926:	d1fc      	bne.n	3922 <_tcc_set_compare_value+0x56>
		tcc_module->CC[channel_index].reg = compare;
    3928:	3710      	adds	r7, #16
    392a:	00bf      	lsls	r7, r7, #2
    392c:	19e4      	adds	r4, r4, r7
    392e:	6065      	str	r5, [r4, #4]
	return STATUS_OK;
    3930:	2300      	movs	r3, #0
    3932:	e7d8      	b.n	38e6 <_tcc_set_compare_value+0x1a>
    3934:	00003899 	.word	0x00003899
    3938:	00007f18 	.word	0x00007f18
    393c:	00007f20 	.word	0x00007f20

00003940 <_tcc_set_top_value>:
 */
static enum status_code _tcc_set_top_value(
		const struct tcc_module *const module_inst,
		const uint32_t top_value,
		const bool double_buffering_enabled)
{
    3940:	b570      	push	{r4, r5, r6, lr}
    3942:	000e      	movs	r6, r1
    3944:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    3946:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    3948:	0020      	movs	r0, r4
    394a:	4b0d      	ldr	r3, [pc, #52]	; (3980 <_tcc_set_top_value+0x40>)
    394c:	4798      	blx	r3

	uint32_t max_count = _tcc_maxs[module_index];
    394e:	0080      	lsls	r0, r0, #2

	/* Check compare value */
	if (top_value > max_count) {
    3950:	4b0c      	ldr	r3, [pc, #48]	; (3984 <_tcc_set_top_value+0x44>)
    3952:	58c3      	ldr	r3, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    3954:	2017      	movs	r0, #23
	if (top_value > max_count) {
    3956:	42b3      	cmp	r3, r6
    3958:	d200      	bcs.n	395c <_tcc_set_top_value+0x1c>
			/* Sync wait */
		}
		tcc_module->PER.reg = top_value;
	}
	return STATUS_OK;
}
    395a:	bd70      	pop	{r4, r5, r6, pc}
	if (double_buffering_enabled) {
    395c:	2d00      	cmp	r5, #0
    395e:	d007      	beq.n	3970 <_tcc_set_top_value+0x30>
		while(tcc_module->SYNCBUSY.reg  & TCC_SYNCBUSY_PERB) {
    3960:	2280      	movs	r2, #128	; 0x80
    3962:	02d2      	lsls	r2, r2, #11
    3964:	68a3      	ldr	r3, [r4, #8]
    3966:	4213      	tst	r3, r2
    3968:	d1fc      	bne.n	3964 <_tcc_set_top_value+0x24>
		tcc_module->PERB.reg = top_value;
    396a:	66e6      	str	r6, [r4, #108]	; 0x6c
	return STATUS_OK;
    396c:	2000      	movs	r0, #0
    396e:	e7f4      	b.n	395a <_tcc_set_top_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & TCC_SYNCBUSY_PER) {
    3970:	2280      	movs	r2, #128	; 0x80
    3972:	68a3      	ldr	r3, [r4, #8]
    3974:	421a      	tst	r2, r3
    3976:	d1fc      	bne.n	3972 <_tcc_set_top_value+0x32>
		tcc_module->PER.reg = top_value;
    3978:	6426      	str	r6, [r4, #64]	; 0x40
	return STATUS_OK;
    397a:	2000      	movs	r0, #0
    397c:	e7ed      	b.n	395a <_tcc_set_top_value+0x1a>
    397e:	46c0      	nop			; (mov r8, r8)
    3980:	00003899 	.word	0x00003899
    3984:	00007f20 	.word	0x00007f20

00003988 <tcc_get_config_defaults>:
{
    3988:	b510      	push	{r4, lr}
    398a:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    398c:	0008      	movs	r0, r1
    398e:	4b4f      	ldr	r3, [pc, #316]	; (3acc <tcc_get_config_defaults+0x144>)
    3990:	4798      	blx	r3
	config->counter.count                  = 0;
    3992:	2300      	movs	r3, #0
    3994:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    3996:	0080      	lsls	r0, r0, #2
    3998:	4a4d      	ldr	r2, [pc, #308]	; (3ad0 <tcc_get_config_defaults+0x148>)
    399a:	5882      	ldr	r2, [r0, r2]
    399c:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    399e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    39a0:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    39a2:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    39a4:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    39a6:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    39a8:	61e3      	str	r3, [r4, #28]
    39aa:	6223      	str	r3, [r4, #32]
    39ac:	6263      	str	r3, [r4, #36]	; 0x24
    39ae:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    39b0:	7523      	strb	r3, [r4, #20]
    39b2:	7563      	strb	r3, [r4, #21]
    39b4:	75a3      	strb	r3, [r4, #22]
    39b6:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    39b8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    39ba:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    39bc:	7423      	strb	r3, [r4, #16]
    39be:	7463      	strb	r3, [r4, #17]
    39c0:	74a3      	strb	r3, [r4, #18]
    39c2:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    39c4:	222c      	movs	r2, #44	; 0x2c
    39c6:	54a3      	strb	r3, [r4, r2]
    39c8:	3201      	adds	r2, #1
    39ca:	54a3      	strb	r3, [r4, r2]
    39cc:	3201      	adds	r2, #1
    39ce:	54a3      	strb	r3, [r4, r2]
    39d0:	3201      	adds	r2, #1
    39d2:	54a3      	strb	r3, [r4, r2]
    39d4:	3201      	adds	r2, #1
    39d6:	54a3      	strb	r3, [r4, r2]
    39d8:	3201      	adds	r2, #1
    39da:	54a3      	strb	r3, [r4, r2]
    39dc:	3201      	adds	r2, #1
    39de:	54a3      	strb	r3, [r4, r2]
    39e0:	3201      	adds	r2, #1
    39e2:	54a3      	strb	r3, [r4, r2]
    39e4:	3201      	adds	r2, #1
    39e6:	54a3      	strb	r3, [r4, r2]
    39e8:	3201      	adds	r2, #1
    39ea:	54a3      	strb	r3, [r4, r2]
    39ec:	3201      	adds	r2, #1
    39ee:	54a3      	strb	r3, [r4, r2]
    39f0:	3201      	adds	r2, #1
    39f2:	54a3      	strb	r3, [r4, r2]
    39f4:	3201      	adds	r2, #1
    39f6:	54a3      	strb	r3, [r4, r2]
    39f8:	3201      	adds	r2, #1
    39fa:	54a3      	strb	r3, [r4, r2]
    39fc:	3201      	adds	r2, #1
    39fe:	54a3      	strb	r3, [r4, r2]
    3a00:	3201      	adds	r2, #1
    3a02:	54a3      	strb	r3, [r4, r2]
    3a04:	3201      	adds	r2, #1
    3a06:	54a3      	strb	r3, [r4, r2]
    3a08:	3201      	adds	r2, #1
    3a0a:	54a3      	strb	r3, [r4, r2]
    3a0c:	3201      	adds	r2, #1
    3a0e:	54a3      	strb	r3, [r4, r2]
    3a10:	3201      	adds	r2, #1
    3a12:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    3a14:	3201      	adds	r2, #1
    3a16:	54a3      	strb	r3, [r4, r2]
    3a18:	3201      	adds	r2, #1
    3a1a:	54a3      	strb	r3, [r4, r2]
    3a1c:	3201      	adds	r2, #1
    3a1e:	54a3      	strb	r3, [r4, r2]
    3a20:	3201      	adds	r2, #1
    3a22:	54a3      	strb	r3, [r4, r2]
    3a24:	3201      	adds	r2, #1
    3a26:	54a3      	strb	r3, [r4, r2]
    3a28:	3201      	adds	r2, #1
    3a2a:	54a3      	strb	r3, [r4, r2]
    3a2c:	3201      	adds	r2, #1
    3a2e:	54a3      	strb	r3, [r4, r2]
    3a30:	3201      	adds	r2, #1
    3a32:	54a3      	strb	r3, [r4, r2]
    3a34:	3201      	adds	r2, #1
    3a36:	54a3      	strb	r3, [r4, r2]
    3a38:	3201      	adds	r2, #1
    3a3a:	54a3      	strb	r3, [r4, r2]
    3a3c:	3201      	adds	r2, #1
    3a3e:	54a3      	strb	r3, [r4, r2]
    3a40:	3201      	adds	r2, #1
    3a42:	54a3      	strb	r3, [r4, r2]
    3a44:	3201      	adds	r2, #1
    3a46:	54a3      	strb	r3, [r4, r2]
    3a48:	3201      	adds	r2, #1
    3a4a:	54a3      	strb	r3, [r4, r2]
    3a4c:	3201      	adds	r2, #1
    3a4e:	54a3      	strb	r3, [r4, r2]
    3a50:	3201      	adds	r2, #1
    3a52:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    3a54:	3201      	adds	r2, #1
    3a56:	54a3      	strb	r3, [r4, r2]
    3a58:	3201      	adds	r2, #1
    3a5a:	54a3      	strb	r3, [r4, r2]
    3a5c:	3201      	adds	r2, #1
    3a5e:	54a3      	strb	r3, [r4, r2]
    3a60:	3201      	adds	r2, #1
    3a62:	54a3      	strb	r3, [r4, r2]
    3a64:	3201      	adds	r2, #1
    3a66:	54a3      	strb	r3, [r4, r2]
    3a68:	3201      	adds	r2, #1
    3a6a:	54a3      	strb	r3, [r4, r2]
    3a6c:	3201      	adds	r2, #1
    3a6e:	54a3      	strb	r3, [r4, r2]
    3a70:	3201      	adds	r2, #1
    3a72:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    3a74:	3241      	adds	r2, #65	; 0x41
    3a76:	54a3      	strb	r3, [r4, r2]
    3a78:	65a3      	str	r3, [r4, #88]	; 0x58
    3a7a:	67a3      	str	r3, [r4, #120]	; 0x78
    3a7c:	3201      	adds	r2, #1
    3a7e:	54a3      	strb	r3, [r4, r2]
    3a80:	65e3      	str	r3, [r4, #92]	; 0x5c
    3a82:	67e3      	str	r3, [r4, #124]	; 0x7c
    3a84:	3201      	adds	r2, #1
    3a86:	54a3      	strb	r3, [r4, r2]
    3a88:	6623      	str	r3, [r4, #96]	; 0x60
    3a8a:	3a1a      	subs	r2, #26
    3a8c:	50a3      	str	r3, [r4, r2]
    3a8e:	321b      	adds	r2, #27
    3a90:	54a3      	strb	r3, [r4, r2]
    3a92:	6663      	str	r3, [r4, #100]	; 0x64
    3a94:	3a17      	subs	r2, #23
    3a96:	50a3      	str	r3, [r4, r2]
    3a98:	3218      	adds	r2, #24
    3a9a:	54a3      	strb	r3, [r4, r2]
    3a9c:	66a3      	str	r3, [r4, #104]	; 0x68
    3a9e:	3a14      	subs	r2, #20
    3aa0:	50a3      	str	r3, [r4, r2]
    3aa2:	3215      	adds	r2, #21
    3aa4:	54a3      	strb	r3, [r4, r2]
    3aa6:	66e3      	str	r3, [r4, #108]	; 0x6c
    3aa8:	3a11      	subs	r2, #17
    3aaa:	50a3      	str	r3, [r4, r2]
    3aac:	3212      	adds	r2, #18
    3aae:	54a3      	strb	r3, [r4, r2]
    3ab0:	6723      	str	r3, [r4, #112]	; 0x70
    3ab2:	3a0e      	subs	r2, #14
    3ab4:	50a3      	str	r3, [r4, r2]
    3ab6:	320f      	adds	r2, #15
    3ab8:	54a3      	strb	r3, [r4, r2]
    3aba:	6763      	str	r3, [r4, #116]	; 0x74
    3abc:	3a0b      	subs	r2, #11
    3abe:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    3ac0:	2101      	movs	r1, #1
    3ac2:	320c      	adds	r2, #12
    3ac4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    3ac6:	3201      	adds	r2, #1
    3ac8:	54a3      	strb	r3, [r4, r2]
}
    3aca:	bd10      	pop	{r4, pc}
    3acc:	00003899 	.word	0x00003899
    3ad0:	00007f20 	.word	0x00007f20

00003ad4 <tcc_init>:
{
    3ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ad6:	46de      	mov	lr, fp
    3ad8:	4657      	mov	r7, sl
    3ada:	464e      	mov	r6, r9
    3adc:	4645      	mov	r5, r8
    3ade:	b5e0      	push	{r5, r6, r7, lr}
    3ae0:	b091      	sub	sp, #68	; 0x44
    3ae2:	9001      	str	r0, [sp, #4]
    3ae4:	000c      	movs	r4, r1
    3ae6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    3ae8:	0008      	movs	r0, r1
    3aea:	4bc3      	ldr	r3, [pc, #780]	; (3df8 <tcc_init+0x324>)
    3aec:	4798      	blx	r3
    3aee:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3af0:	0001      	movs	r1, r0
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3af2:	48c2      	ldr	r0, [pc, #776]	; (3dfc <tcc_init+0x328>)
    3af4:	6a02      	ldr	r2, [r0, #32]
    3af6:	009e      	lsls	r6, r3, #2
    3af8:	4fc1      	ldr	r7, [pc, #772]	; (3e00 <tcc_init+0x32c>)
    3afa:	59f7      	ldr	r7, [r6, r7]
    3afc:	433a      	orrs	r2, r7
    3afe:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    3b00:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    3b02:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    3b04:	0792      	lsls	r2, r2, #30
    3b06:	d506      	bpl.n	3b16 <tcc_init+0x42>
}
    3b08:	b011      	add	sp, #68	; 0x44
    3b0a:	bc3c      	pop	{r2, r3, r4, r5}
    3b0c:	4690      	mov	r8, r2
    3b0e:	4699      	mov	r9, r3
    3b10:	46a2      	mov	sl, r4
    3b12:	46ab      	mov	fp, r5
    3b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    3b16:	6822      	ldr	r2, [r4, #0]
    3b18:	2701      	movs	r7, #1
    3b1a:	4017      	ands	r7, r2
    3b1c:	d1f4      	bne.n	3b08 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    3b1e:	48b9      	ldr	r0, [pc, #740]	; (3e04 <tcc_init+0x330>)
    3b20:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    3b22:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    3b24:	682e      	ldr	r6, [r5, #0]
    3b26:	42b2      	cmp	r2, r6
    3b28:	d3ee      	bcc.n	3b08 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    3b2a:	686e      	ldr	r6, [r5, #4]
    3b2c:	42b2      	cmp	r2, r6
    3b2e:	d3eb      	bcc.n	3b08 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    3b30:	69e8      	ldr	r0, [r5, #28]
    3b32:	4282      	cmp	r2, r0
    3b34:	d200      	bcs.n	3b38 <tcc_init+0x64>
    3b36:	e1b9      	b.n	3eac <tcc_init+0x3d8>
    3b38:	6a28      	ldr	r0, [r5, #32]
    3b3a:	4282      	cmp	r2, r0
    3b3c:	d200      	bcs.n	3b40 <tcc_init+0x6c>
    3b3e:	e1b7      	b.n	3eb0 <tcc_init+0x3dc>
    3b40:	6a68      	ldr	r0, [r5, #36]	; 0x24
    3b42:	4282      	cmp	r2, r0
    3b44:	d200      	bcs.n	3b48 <tcc_init+0x74>
    3b46:	e1b5      	b.n	3eb4 <tcc_init+0x3e0>
    3b48:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3b4a:	4282      	cmp	r2, r0
    3b4c:	d200      	bcs.n	3b50 <tcc_init+0x7c>
    3b4e:	e1b3      	b.n	3eb8 <tcc_init+0x3e4>
    3b50:	2298      	movs	r2, #152	; 0x98
    3b52:	4694      	mov	ip, r2
    3b54:	44ac      	add	ip, r5
    3b56:	4662      	mov	r2, ip
    3b58:	9208      	str	r2, [sp, #32]
    3b5a:	2000      	movs	r0, #0
    3b5c:	e003      	b.n	3b66 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    3b5e:	3001      	adds	r0, #1
    3b60:	3201      	adds	r2, #1
    3b62:	2808      	cmp	r0, #8
    3b64:	d008      	beq.n	3b78 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    3b66:	7816      	ldrb	r6, [r2, #0]
    3b68:	2e00      	cmp	r6, #0
    3b6a:	d0f8      	beq.n	3b5e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    3b6c:	4ea6      	ldr	r6, [pc, #664]	; (3e08 <tcc_init+0x334>)
    3b6e:	5c76      	ldrb	r6, [r6, r1]
    3b70:	4286      	cmp	r6, r0
    3b72:	dcf4      	bgt.n	3b5e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    3b74:	2017      	movs	r0, #23
    3b76:	e7c7      	b.n	3b08 <tcc_init+0x34>
    3b78:	2200      	movs	r2, #0
    3b7a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    3b7c:	2080      	movs	r0, #128	; 0x80
    3b7e:	0440      	lsls	r0, r0, #17
    3b80:	4684      	mov	ip, r0
    3b82:	e002      	b.n	3b8a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    3b84:	3201      	adds	r2, #1
    3b86:	2a04      	cmp	r2, #4
    3b88:	d00e      	beq.n	3ba8 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    3b8a:	18a8      	adds	r0, r5, r2
    3b8c:	7c00      	ldrb	r0, [r0, #16]
    3b8e:	2801      	cmp	r0, #1
    3b90:	d1f8      	bne.n	3b84 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    3b92:	489e      	ldr	r0, [pc, #632]	; (3e0c <tcc_init+0x338>)
    3b94:	5c40      	ldrb	r0, [r0, r1]
    3b96:	4290      	cmp	r0, r2
    3b98:	da00      	bge.n	3b9c <tcc_init+0xc8>
    3b9a:	e18f      	b.n	3ebc <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    3b9c:	4660      	mov	r0, ip
    3b9e:	4090      	lsls	r0, r2
    3ba0:	9e02      	ldr	r6, [sp, #8]
    3ba2:	4306      	orrs	r6, r0
    3ba4:	9602      	str	r6, [sp, #8]
    3ba6:	e7ed      	b.n	3b84 <tcc_init+0xb0>
	if (config->run_in_standby) {
    3ba8:	329d      	adds	r2, #157	; 0x9d
    3baa:	5caa      	ldrb	r2, [r5, r2]
    3bac:	2a00      	cmp	r2, #0
    3bae:	d004      	beq.n	3bba <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    3bb0:	2280      	movs	r2, #128	; 0x80
    3bb2:	0112      	lsls	r2, r2, #4
    3bb4:	9902      	ldr	r1, [sp, #8]
    3bb6:	4311      	orrs	r1, r2
    3bb8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    3bba:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    3bbc:	1e51      	subs	r1, r2, #1
    3bbe:	418a      	sbcs	r2, r1
    3bc0:	0092      	lsls	r2, r2, #2
    3bc2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    3bc4:	7a6a      	ldrb	r2, [r5, #9]
    3bc6:	2a01      	cmp	r2, #1
    3bc8:	d022      	beq.n	3c10 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    3bca:	4a90      	ldr	r2, [pc, #576]	; (3e0c <tcc_init+0x338>)
    3bcc:	5cd2      	ldrb	r2, [r2, r3]
    3bce:	0011      	movs	r1, r2
    3bd0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    3bd2:	2235      	movs	r2, #53	; 0x35
    3bd4:	5caa      	ldrb	r2, [r5, r2]
    3bd6:	428a      	cmp	r2, r1
    3bd8:	d300      	bcc.n	3bdc <tcc_init+0x108>
    3bda:	e179      	b.n	3ed0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    3bdc:	212c      	movs	r1, #44	; 0x2c
    3bde:	5c69      	ldrb	r1, [r5, r1]
    3be0:	290f      	cmp	r1, #15
    3be2:	d900      	bls.n	3be6 <tcc_init+0x112>
    3be4:	e174      	b.n	3ed0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    3be6:	7b28      	ldrb	r0, [r5, #12]
    3be8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    3bea:	7ae8      	ldrb	r0, [r5, #11]
    3bec:	900b      	str	r0, [sp, #44]	; 0x2c
    3bee:	202d      	movs	r0, #45	; 0x2d
    3bf0:	4682      	mov	sl, r0
    3bf2:	44aa      	add	sl, r5
    3bf4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    3bf6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    3bf8:	ae0e      	add	r6, sp, #56	; 0x38
    3bfa:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    3bfc:	26c0      	movs	r6, #192	; 0xc0
    3bfe:	0136      	lsls	r6, r6, #4
    3c00:	46b1      	mov	r9, r6
    3c02:	4684      	mov	ip, r0
    3c04:	46a0      	mov	r8, r4
    3c06:	0028      	movs	r0, r5
    3c08:	4655      	mov	r5, sl
    3c0a:	9309      	str	r3, [sp, #36]	; 0x24
    3c0c:	4682      	mov	sl, r0
    3c0e:	e035      	b.n	3c7c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    3c10:	9906      	ldr	r1, [sp, #24]
    3c12:	4311      	orrs	r1, r2
    3c14:	9106      	str	r1, [sp, #24]
    3c16:	e7d8      	b.n	3bca <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    3c18:	0292      	lsls	r2, r2, #10
    3c1a:	464f      	mov	r7, r9
    3c1c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3c1e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    3c20:	7919      	ldrb	r1, [r3, #4]
    3c22:	468b      	mov	fp, r1
    3c24:	2103      	movs	r1, #3
    3c26:	465f      	mov	r7, fp
    3c28:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3c2a:	430a      	orrs	r2, r1
    3c2c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    3c2e:	795a      	ldrb	r2, [r3, #5]
    3c30:	0152      	lsls	r2, r2, #5
    3c32:	2160      	movs	r1, #96	; 0x60
    3c34:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3c36:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    3c38:	7999      	ldrb	r1, [r3, #6]
    3c3a:	0209      	lsls	r1, r1, #8
    3c3c:	26c0      	movs	r6, #192	; 0xc0
    3c3e:	00b6      	lsls	r6, r6, #2
    3c40:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3c42:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    3c44:	79da      	ldrb	r2, [r3, #7]
    3c46:	0312      	lsls	r2, r2, #12
    3c48:	21e0      	movs	r1, #224	; 0xe0
    3c4a:	01c9      	lsls	r1, r1, #7
    3c4c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3c4e:	4316      	orrs	r6, r2
    3c50:	4334      	orrs	r4, r6
    3c52:	9a03      	ldr	r2, [sp, #12]
    3c54:	4314      	orrs	r4, r2
    3c56:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    3c58:	4662      	mov	r2, ip
    3c5a:	9907      	ldr	r1, [sp, #28]
    3c5c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    3c5e:	2a04      	cmp	r2, #4
    3c60:	d02a      	beq.n	3cb8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    3c62:	7c9a      	ldrb	r2, [r3, #18]
    3c64:	9905      	ldr	r1, [sp, #20]
    3c66:	4291      	cmp	r1, r2
    3c68:	d800      	bhi.n	3c6c <tcc_init+0x198>
    3c6a:	e131      	b.n	3ed0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    3c6c:	7a59      	ldrb	r1, [r3, #9]
    3c6e:	350a      	adds	r5, #10
    3c70:	2304      	movs	r3, #4
    3c72:	469b      	mov	fp, r3
    3c74:	44dc      	add	ip, fp
    3c76:	290f      	cmp	r1, #15
    3c78:	d900      	bls.n	3c7c <tcc_init+0x1a8>
    3c7a:	e129      	b.n	3ed0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3c7c:	0609      	lsls	r1, r1, #24
    3c7e:	23f0      	movs	r3, #240	; 0xf0
    3c80:	051b      	lsls	r3, r3, #20
    3c82:	4019      	ands	r1, r3
    3c84:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    3c86:	782e      	ldrb	r6, [r5, #0]
    3c88:	0436      	lsls	r6, r6, #16
    3c8a:	20ff      	movs	r0, #255	; 0xff
    3c8c:	0400      	lsls	r0, r0, #16
    3c8e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    3c90:	7868      	ldrb	r0, [r5, #1]
    3c92:	2480      	movs	r4, #128	; 0x80
    3c94:	2800      	cmp	r0, #0
    3c96:	d100      	bne.n	3c9a <tcc_init+0x1c6>
    3c98:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    3c9a:	7898      	ldrb	r0, [r3, #2]
    3c9c:	2708      	movs	r7, #8
    3c9e:	9703      	str	r7, [sp, #12]
    3ca0:	2800      	cmp	r0, #0
    3ca2:	d101      	bne.n	3ca8 <tcc_init+0x1d4>
    3ca4:	9804      	ldr	r0, [sp, #16]
    3ca6:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    3ca8:	78d8      	ldrb	r0, [r3, #3]
    3caa:	4683      	mov	fp, r0
    3cac:	2010      	movs	r0, #16
    3cae:	465f      	mov	r7, fp
    3cb0:	2f00      	cmp	r7, #0
    3cb2:	d1b1      	bne.n	3c18 <tcc_init+0x144>
    3cb4:	9804      	ldr	r0, [sp, #16]
    3cb6:	e7af      	b.n	3c18 <tcc_init+0x144>
    3cb8:	4644      	mov	r4, r8
    3cba:	4655      	mov	r5, sl
    3cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    3cbe:	4a52      	ldr	r2, [pc, #328]	; (3e08 <tcc_init+0x334>)
    3cc0:	5cd2      	ldrb	r2, [r2, r3]
    3cc2:	4691      	mov	r9, r2
    3cc4:	4651      	mov	r1, sl
    3cc6:	3150      	adds	r1, #80	; 0x50
    3cc8:	4650      	mov	r0, sl
    3cca:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    3ccc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    3cce:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    3cd0:	2601      	movs	r6, #1
    3cd2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    3cd4:	2602      	movs	r6, #2
    3cd6:	36ff      	adds	r6, #255	; 0xff
    3cd8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    3cda:	2680      	movs	r6, #128	; 0x80
    3cdc:	0276      	lsls	r6, r6, #9
    3cde:	46b0      	mov	r8, r6
    3ce0:	46a4      	mov	ip, r4
    3ce2:	001c      	movs	r4, r3
    3ce4:	464b      	mov	r3, r9
    3ce6:	e00f      	b.n	3d08 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    3ce8:	7806      	ldrb	r6, [r0, #0]
    3cea:	2e00      	cmp	r6, #0
    3cec:	d007      	beq.n	3cfe <tcc_init+0x22a>
			if (i >= ow_num) {
    3cee:	4293      	cmp	r3, r2
    3cf0:	d800      	bhi.n	3cf4 <tcc_init+0x220>
    3cf2:	e0e7      	b.n	3ec4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    3cf4:	2e02      	cmp	r6, #2
    3cf6:	d014      	beq.n	3d22 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    3cf8:	4656      	mov	r6, sl
    3cfa:	4096      	lsls	r6, r2
    3cfc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    3cfe:	3201      	adds	r2, #1
    3d00:	3101      	adds	r1, #1
    3d02:	3002      	adds	r0, #2
    3d04:	2a08      	cmp	r2, #8
    3d06:	d010      	beq.n	3d2a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    3d08:	780e      	ldrb	r6, [r1, #0]
    3d0a:	2e00      	cmp	r6, #0
    3d0c:	d0ec      	beq.n	3ce8 <tcc_init+0x214>
			if (i >= ow_num) {
    3d0e:	4293      	cmp	r3, r2
    3d10:	d800      	bhi.n	3d14 <tcc_init+0x240>
    3d12:	e0d5      	b.n	3ec0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    3d14:	4646      	mov	r6, r8
    3d16:	4096      	lsls	r6, r2
    3d18:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    3d1a:	7806      	ldrb	r6, [r0, #0]
    3d1c:	2e00      	cmp	r6, #0
    3d1e:	d1e9      	bne.n	3cf4 <tcc_init+0x220>
    3d20:	e7ed      	b.n	3cfe <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    3d22:	465e      	mov	r6, fp
    3d24:	4096      	lsls	r6, r2
    3d26:	4337      	orrs	r7, r6
    3d28:	e7e9      	b.n	3cfe <tcc_init+0x22a>
    3d2a:	4699      	mov	r9, r3
    3d2c:	0023      	movs	r3, r4
    3d2e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    3d30:	7e6a      	ldrb	r2, [r5, #25]
    3d32:	0112      	lsls	r2, r2, #4
    3d34:	2130      	movs	r1, #48	; 0x30
    3d36:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    3d38:	7e28      	ldrb	r0, [r5, #24]
    3d3a:	2207      	movs	r2, #7
    3d3c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    3d3e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    3d40:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    3d42:	2080      	movs	r0, #128	; 0x80
    3d44:	0240      	lsls	r0, r0, #9
    3d46:	000e      	movs	r6, r1
    3d48:	e002      	b.n	3d50 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    3d4a:	3201      	adds	r2, #1
    3d4c:	2a04      	cmp	r2, #4
    3d4e:	d00b      	beq.n	3d68 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    3d50:	18a9      	adds	r1, r5, r2
    3d52:	7d09      	ldrb	r1, [r1, #20]
    3d54:	2900      	cmp	r1, #0
    3d56:	d0f8      	beq.n	3d4a <tcc_init+0x276>
			if (n >= cc_num) {
    3d58:	9905      	ldr	r1, [sp, #20]
    3d5a:	4291      	cmp	r1, r2
    3d5c:	dc00      	bgt.n	3d60 <tcc_init+0x28c>
    3d5e:	e0b3      	b.n	3ec8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    3d60:	0001      	movs	r1, r0
    3d62:	4091      	lsls	r1, r2
    3d64:	430e      	orrs	r6, r1
    3d66:	e7f0      	b.n	3d4a <tcc_init+0x276>
    3d68:	46b2      	mov	sl, r6
    3d6a:	9801      	ldr	r0, [sp, #4]
    3d6c:	0002      	movs	r2, r0
    3d6e:	3204      	adds	r2, #4
    3d70:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    3d72:	2100      	movs	r1, #0
    3d74:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    3d76:	4282      	cmp	r2, r0
    3d78:	d1fc      	bne.n	3d74 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    3d7a:	2200      	movs	r2, #0
    3d7c:	9801      	ldr	r0, [sp, #4]
    3d7e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    3d80:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    3d82:	0099      	lsls	r1, r3, #2
    3d84:	4a22      	ldr	r2, [pc, #136]	; (3e10 <tcc_init+0x33c>)
    3d86:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    3d88:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    3d8a:	22a0      	movs	r2, #160	; 0xa0
    3d8c:	5ca9      	ldrb	r1, [r5, r2]
    3d8e:	3a64      	subs	r2, #100	; 0x64
    3d90:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    3d92:	a90d      	add	r1, sp, #52	; 0x34
    3d94:	7aaa      	ldrb	r2, [r5, #10]
    3d96:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    3d98:	4a1e      	ldr	r2, [pc, #120]	; (3e14 <tcc_init+0x340>)
    3d9a:	5cd6      	ldrb	r6, [r2, r3]
    3d9c:	0030      	movs	r0, r6
    3d9e:	4b1e      	ldr	r3, [pc, #120]	; (3e18 <tcc_init+0x344>)
    3da0:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    3da2:	0030      	movs	r0, r6
    3da4:	4b1d      	ldr	r3, [pc, #116]	; (3e1c <tcc_init+0x348>)
    3da6:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    3da8:	464b      	mov	r3, r9
    3daa:	2b00      	cmp	r3, #0
    3dac:	dd3c      	ble.n	3e28 <tcc_init+0x354>
    3dae:	002e      	movs	r6, r5
    3db0:	3658      	adds	r6, #88	; 0x58
    3db2:	3398      	adds	r3, #152	; 0x98
    3db4:	4698      	mov	r8, r3
    3db6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3db8:	2301      	movs	r3, #1
    3dba:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    3dbc:	46ab      	mov	fp, r5
    3dbe:	4645      	mov	r5, r8
    3dc0:	46a0      	mov	r8, r4
    3dc2:	9c08      	ldr	r4, [sp, #32]
    3dc4:	e003      	b.n	3dce <tcc_init+0x2fa>
    3dc6:	3401      	adds	r4, #1
    3dc8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    3dca:	42ac      	cmp	r4, r5
    3dcc:	d02a      	beq.n	3e24 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    3dce:	7823      	ldrb	r3, [r4, #0]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d0f8      	beq.n	3dc6 <tcc_init+0x2f2>
    3dd4:	ab0c      	add	r3, sp, #48	; 0x30
    3dd6:	464a      	mov	r2, r9
    3dd8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3dda:	2300      	movs	r3, #0
    3ddc:	aa0c      	add	r2, sp, #48	; 0x30
    3dde:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    3de0:	0013      	movs	r3, r2
    3de2:	2220      	movs	r2, #32
    3de4:	18b2      	adds	r2, r6, r2
    3de6:	7812      	ldrb	r2, [r2, #0]
    3de8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3dea:	464a      	mov	r2, r9
    3dec:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    3dee:	7830      	ldrb	r0, [r6, #0]
    3df0:	0019      	movs	r1, r3
    3df2:	4b0b      	ldr	r3, [pc, #44]	; (3e20 <tcc_init+0x34c>)
    3df4:	4798      	blx	r3
    3df6:	e7e6      	b.n	3dc6 <tcc_init+0x2f2>
    3df8:	00003899 	.word	0x00003899
    3dfc:	40000400 	.word	0x40000400
    3e00:	00007f0c 	.word	0x00007f0c
    3e04:	00007f20 	.word	0x00007f20
    3e08:	00007f2c 	.word	0x00007f2c
    3e0c:	00007f18 	.word	0x00007f18
    3e10:	20000d18 	.word	0x20000d18
    3e14:	00007f1c 	.word	0x00007f1c
    3e18:	00005189 	.word	0x00005189
    3e1c:	000050fd 	.word	0x000050fd
    3e20:	000052b1 	.word	0x000052b1
    3e24:	4644      	mov	r4, r8
    3e26:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    3e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e2a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    3e2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3e2e:	0212      	lsls	r2, r2, #8
    3e30:	4313      	orrs	r3, r2
    3e32:	9a02      	ldr	r2, [sp, #8]
    3e34:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    3e36:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3e38:	2204      	movs	r2, #4
    3e3a:	68a3      	ldr	r3, [r4, #8]
    3e3c:	421a      	tst	r2, r3
    3e3e:	d1fc      	bne.n	3e3a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    3e40:	23ff      	movs	r3, #255	; 0xff
    3e42:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3e44:	2204      	movs	r2, #4
    3e46:	68a3      	ldr	r3, [r4, #8]
    3e48:	421a      	tst	r2, r3
    3e4a:	d1fc      	bne.n	3e46 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    3e4c:	466b      	mov	r3, sp
    3e4e:	7e1b      	ldrb	r3, [r3, #24]
    3e50:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    3e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3e54:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    3e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e58:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    3e5a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    3e5c:	4a1d      	ldr	r2, [pc, #116]	; (3ed4 <tcc_init+0x400>)
    3e5e:	68a3      	ldr	r3, [r4, #8]
    3e60:	4213      	tst	r3, r2
    3e62:	d1fc      	bne.n	3e5e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    3e64:	4653      	mov	r3, sl
    3e66:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    3e68:	2210      	movs	r2, #16
    3e6a:	68a3      	ldr	r3, [r4, #8]
    3e6c:	421a      	tst	r2, r3
    3e6e:	d1fc      	bne.n	3e6a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    3e70:	682b      	ldr	r3, [r5, #0]
    3e72:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    3e74:	4a18      	ldr	r2, [pc, #96]	; (3ed8 <tcc_init+0x404>)
    3e76:	68a3      	ldr	r3, [r4, #8]
    3e78:	4213      	tst	r3, r2
    3e7a:	d1fc      	bne.n	3e76 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    3e7c:	686b      	ldr	r3, [r5, #4]
    3e7e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    3e80:	9805      	ldr	r0, [sp, #20]
    3e82:	2800      	cmp	r0, #0
    3e84:	dd22      	ble.n	3ecc <tcc_init+0x3f8>
    3e86:	351c      	adds	r5, #28
    3e88:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    3e8a:	4e14      	ldr	r6, [pc, #80]	; (3edc <tcc_init+0x408>)
    3e8c:	0032      	movs	r2, r6
    3e8e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    3e90:	68a3      	ldr	r3, [r4, #8]
    3e92:	421a      	tst	r2, r3
    3e94:	d1fc      	bne.n	3e90 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    3e96:	cd04      	ldmia	r5!, {r2}
    3e98:	000b      	movs	r3, r1
    3e9a:	3310      	adds	r3, #16
    3e9c:	009b      	lsls	r3, r3, #2
    3e9e:	18e3      	adds	r3, r4, r3
    3ea0:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    3ea2:	3101      	adds	r1, #1
    3ea4:	4288      	cmp	r0, r1
    3ea6:	dcf1      	bgt.n	3e8c <tcc_init+0x3b8>
	return STATUS_OK;
    3ea8:	2000      	movs	r0, #0
    3eaa:	e62d      	b.n	3b08 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    3eac:	2017      	movs	r0, #23
    3eae:	e62b      	b.n	3b08 <tcc_init+0x34>
    3eb0:	2017      	movs	r0, #23
    3eb2:	e629      	b.n	3b08 <tcc_init+0x34>
    3eb4:	2017      	movs	r0, #23
    3eb6:	e627      	b.n	3b08 <tcc_init+0x34>
    3eb8:	2017      	movs	r0, #23
    3eba:	e625      	b.n	3b08 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    3ebc:	2017      	movs	r0, #23
    3ebe:	e623      	b.n	3b08 <tcc_init+0x34>
			if (i >= ow_num) {
    3ec0:	2017      	movs	r0, #23
    3ec2:	e621      	b.n	3b08 <tcc_init+0x34>
			if (i >= ow_num) {
    3ec4:	2017      	movs	r0, #23
    3ec6:	e61f      	b.n	3b08 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    3ec8:	2017      	movs	r0, #23
    3eca:	e61d      	b.n	3b08 <tcc_init+0x34>
	return STATUS_OK;
    3ecc:	2000      	movs	r0, #0
    3ece:	e61b      	b.n	3b08 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    3ed0:	2017      	movs	r0, #23
    3ed2:	e619      	b.n	3b08 <tcc_init+0x34>
    3ed4:	00020040 	.word	0x00020040
    3ed8:	00040080 	.word	0x00040080
    3edc:	00080100 	.word	0x00080100

00003ee0 <tcc_set_compare_value>:
{
    3ee0:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    3ee2:	233c      	movs	r3, #60	; 0x3c
    3ee4:	5cc3      	ldrb	r3, [r0, r3]
    3ee6:	4c01      	ldr	r4, [pc, #4]	; (3eec <tcc_set_compare_value+0xc>)
    3ee8:	47a0      	blx	r4
}
    3eea:	bd10      	pop	{r4, pc}
    3eec:	000038cd 	.word	0x000038cd

00003ef0 <tcc_set_top_value>:
 *                                top/period value exceed resolution
 */
enum status_code tcc_set_top_value(
		const struct tcc_module *const module_inst,
		const uint32_t top_value)
{
    3ef0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_top_value(module_inst, top_value,
    3ef2:	233c      	movs	r3, #60	; 0x3c
    3ef4:	5cc2      	ldrb	r2, [r0, r3]
    3ef6:	4b01      	ldr	r3, [pc, #4]	; (3efc <tcc_set_top_value+0xc>)
    3ef8:	4798      	blx	r3
			module_inst->double_buffering_enabled);
}
    3efa:	bd10      	pop	{r4, pc}
    3efc:	00003941 	.word	0x00003941

00003f00 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3f00:	0092      	lsls	r2, r2, #2
    3f02:	1883      	adds	r3, r0, r2
    3f04:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    3f06:	4b03      	ldr	r3, [pc, #12]	; (3f14 <tcc_register_callback+0x14>)
    3f08:	58d3      	ldr	r3, [r2, r3]
    3f0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    3f0c:	4313      	orrs	r3, r2
    3f0e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    3f10:	2000      	movs	r0, #0
    3f12:	4770      	bx	lr
    3f14:	00007f30 	.word	0x00007f30

00003f18 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    3f18:	b570      	push	{r4, r5, r6, lr}
    3f1a:	0004      	movs	r4, r0
    3f1c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    3f1e:	6800      	ldr	r0, [r0, #0]
    3f20:	4b09      	ldr	r3, [pc, #36]	; (3f48 <tcc_enable_callback+0x30>)
    3f22:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    3f24:	4b09      	ldr	r3, [pc, #36]	; (3f4c <tcc_enable_callback+0x34>)
    3f26:	5c1b      	ldrb	r3, [r3, r0]
    3f28:	221f      	movs	r2, #31
    3f2a:	401a      	ands	r2, r3
    3f2c:	2301      	movs	r3, #1
    3f2e:	4093      	lsls	r3, r2
    3f30:	4a07      	ldr	r2, [pc, #28]	; (3f50 <tcc_enable_callback+0x38>)
    3f32:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    3f34:	00ad      	lsls	r5, r5, #2
    3f36:	4b07      	ldr	r3, [pc, #28]	; (3f54 <tcc_enable_callback+0x3c>)
    3f38:	58ea      	ldr	r2, [r5, r3]
    3f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f3c:	4313      	orrs	r3, r2
    3f3e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    3f40:	6823      	ldr	r3, [r4, #0]
    3f42:	629a      	str	r2, [r3, #40]	; 0x28
}
    3f44:	bd70      	pop	{r4, r5, r6, pc}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	00003899 	.word	0x00003899
    3f4c:	00007f60 	.word	0x00007f60
    3f50:	e000e100 	.word	0xe000e100
    3f54:	00007f30 	.word	0x00007f30

00003f58 <tcc_disable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_disable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	0004      	movs	r4, r0
    3f5c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Disable interrupts for this TCC module */
	system_interrupt_disable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    3f5e:	6800      	ldr	r0, [r0, #0]
    3f60:	4b09      	ldr	r3, [pc, #36]	; (3f88 <tcc_disable_callback+0x30>)
    3f62:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    3f64:	4b09      	ldr	r3, [pc, #36]	; (3f8c <tcc_disable_callback+0x34>)
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f66:	5c1b      	ldrb	r3, [r3, r0]
    3f68:	221f      	movs	r2, #31
    3f6a:	401a      	ands	r2, r3
    3f6c:	2301      	movs	r3, #1
    3f6e:	4093      	lsls	r3, r2
    3f70:	2280      	movs	r2, #128	; 0x80
    3f72:	4907      	ldr	r1, [pc, #28]	; (3f90 <tcc_disable_callback+0x38>)
    3f74:	508b      	str	r3, [r1, r2]

	/* Disable channel or other callbacks */
	module->enable_callback_mask &= ~_tcc_intflag[callback_type];
    3f76:	00ad      	lsls	r5, r5, #2
    3f78:	4b06      	ldr	r3, [pc, #24]	; (3f94 <tcc_disable_callback+0x3c>)
    3f7a:	58ea      	ldr	r2, [r5, r3]
    3f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f7e:	4393      	bics	r3, r2
    3f80:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENCLR.reg = _tcc_intflag[callback_type];
    3f82:	6823      	ldr	r3, [r4, #0]
    3f84:	625a      	str	r2, [r3, #36]	; 0x24
}
    3f86:	bd70      	pop	{r4, r5, r6, pc}
    3f88:	00003899 	.word	0x00003899
    3f8c:	00007f60 	.word	0x00007f60
    3f90:	e000e100 	.word	0xe000e100
    3f94:	00007f30 	.word	0x00007f30

00003f98 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f9a:	46c6      	mov	lr, r8
    3f9c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    3f9e:	0080      	lsls	r0, r0, #2
    3fa0:	4b0e      	ldr	r3, [pc, #56]	; (3fdc <_tcc_interrupt_handler+0x44>)
    3fa2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    3fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3fac:	4013      	ands	r3, r2
    3fae:	401e      	ands	r6, r3
    3fb0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    3fb2:	4b0b      	ldr	r3, [pc, #44]	; (3fe0 <_tcc_interrupt_handler+0x48>)
    3fb4:	4698      	mov	r8, r3
    3fb6:	e002      	b.n	3fbe <_tcc_interrupt_handler+0x26>
    3fb8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    3fba:	2c30      	cmp	r4, #48	; 0x30
    3fbc:	d00a      	beq.n	3fd4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    3fbe:	4643      	mov	r3, r8
    3fc0:	58e5      	ldr	r5, [r4, r3]
    3fc2:	4235      	tst	r5, r6
    3fc4:	d0f8      	beq.n	3fb8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    3fc6:	193b      	adds	r3, r7, r4
    3fc8:	685b      	ldr	r3, [r3, #4]
    3fca:	0038      	movs	r0, r7
    3fcc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    3fce:	683b      	ldr	r3, [r7, #0]
    3fd0:	62dd      	str	r5, [r3, #44]	; 0x2c
    3fd2:	e7f1      	b.n	3fb8 <_tcc_interrupt_handler+0x20>
		}
	}
}
    3fd4:	bc04      	pop	{r2}
    3fd6:	4690      	mov	r8, r2
    3fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	20000d18 	.word	0x20000d18
    3fe0:	00007f30 	.word	0x00007f30

00003fe4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    3fe4:	b510      	push	{r4, lr}
    3fe6:	2000      	movs	r0, #0
    3fe8:	4b01      	ldr	r3, [pc, #4]	; (3ff0 <TCC0_Handler+0xc>)
    3fea:	4798      	blx	r3
    3fec:	bd10      	pop	{r4, pc}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	00003f99 	.word	0x00003f99

00003ff4 <TCC1_Handler>:
    3ff4:	b510      	push	{r4, lr}
    3ff6:	2001      	movs	r0, #1
    3ff8:	4b01      	ldr	r3, [pc, #4]	; (4000 <TCC1_Handler+0xc>)
    3ffa:	4798      	blx	r3
    3ffc:	bd10      	pop	{r4, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	00003f99 	.word	0x00003f99

00004004 <TCC2_Handler>:
    4004:	b510      	push	{r4, lr}
    4006:	2002      	movs	r0, #2
    4008:	4b01      	ldr	r3, [pc, #4]	; (4010 <TCC2_Handler+0xc>)
    400a:	4798      	blx	r3
    400c:	bd10      	pop	{r4, pc}
    400e:	46c0      	nop			; (mov r8, r8)
    4010:	00003f99 	.word	0x00003f99

00004014 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    4014:	b530      	push	{r4, r5, lr}
    4016:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4018:	aa01      	add	r2, sp, #4
    401a:	4b0b      	ldr	r3, [pc, #44]	; (4048 <_tc_get_inst_index+0x34>)
    401c:	cb32      	ldmia	r3!, {r1, r4, r5}
    401e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    4020:	9b01      	ldr	r3, [sp, #4]
    4022:	4298      	cmp	r0, r3
    4024:	d00d      	beq.n	4042 <_tc_get_inst_index+0x2e>
    4026:	9b02      	ldr	r3, [sp, #8]
    4028:	4298      	cmp	r0, r3
    402a:	d008      	beq.n	403e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    402c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    402e:	9a03      	ldr	r2, [sp, #12]
    4030:	4282      	cmp	r2, r0
    4032:	d002      	beq.n	403a <_tc_get_inst_index+0x26>
}
    4034:	0018      	movs	r0, r3
    4036:	b005      	add	sp, #20
    4038:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    403a:	3302      	adds	r3, #2
    403c:	e002      	b.n	4044 <_tc_get_inst_index+0x30>
    403e:	2301      	movs	r3, #1
    4040:	e000      	b.n	4044 <_tc_get_inst_index+0x30>
    4042:	2300      	movs	r3, #0
			return i;
    4044:	b2db      	uxtb	r3, r3
    4046:	e7f5      	b.n	4034 <_tc_get_inst_index+0x20>
    4048:	00007f64 	.word	0x00007f64

0000404c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    404c:	b5f0      	push	{r4, r5, r6, r7, lr}
    404e:	b087      	sub	sp, #28
    4050:	0004      	movs	r4, r0
    4052:	000d      	movs	r5, r1
    4054:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    4056:	0008      	movs	r0, r1
    4058:	4b85      	ldr	r3, [pc, #532]	; (4270 <tc_init+0x224>)
    405a:	4798      	blx	r3
    405c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    405e:	ab05      	add	r3, sp, #20
    4060:	221b      	movs	r2, #27
    4062:	701a      	strb	r2, [r3, #0]
    4064:	3201      	adds	r2, #1
    4066:	705a      	strb	r2, [r3, #1]
    4068:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    406a:	ab03      	add	r3, sp, #12
    406c:	2280      	movs	r2, #128	; 0x80
    406e:	0112      	lsls	r2, r2, #4
    4070:	801a      	strh	r2, [r3, #0]
    4072:	2280      	movs	r2, #128	; 0x80
    4074:	0152      	lsls	r2, r2, #5
    4076:	805a      	strh	r2, [r3, #2]
    4078:	2280      	movs	r2, #128	; 0x80
    407a:	0192      	lsls	r2, r2, #6
    407c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    407e:	2300      	movs	r3, #0
    4080:	60a3      	str	r3, [r4, #8]
    4082:	60e3      	str	r3, [r4, #12]
    4084:	6123      	str	r3, [r4, #16]
    4086:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    4088:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    408a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    408c:	0082      	lsls	r2, r0, #2
    408e:	4b79      	ldr	r3, [pc, #484]	; (4274 <tc_init+0x228>)
    4090:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    4092:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4094:	78b3      	ldrb	r3, [r6, #2]
    4096:	2b08      	cmp	r3, #8
    4098:	d006      	beq.n	40a8 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    409a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    409c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    409e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    40a0:	07db      	lsls	r3, r3, #31
    40a2:	d505      	bpl.n	40b0 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    40a4:	b007      	add	sp, #28
    40a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    40a8:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    40aa:	07fa      	lsls	r2, r7, #31
    40ac:	d5fa      	bpl.n	40a4 <tc_init+0x58>
    40ae:	e7f4      	b.n	409a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    40b0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    40b2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    40b4:	06db      	lsls	r3, r3, #27
    40b6:	d4f5      	bmi.n	40a4 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    40b8:	882b      	ldrh	r3, [r5, #0]
    40ba:	079b      	lsls	r3, r3, #30
    40bc:	d4f2      	bmi.n	40a4 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    40be:	7c33      	ldrb	r3, [r6, #16]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d179      	bne.n	41b8 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    40c4:	7f33      	ldrb	r3, [r6, #28]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d000      	beq.n	40cc <tc_init+0x80>
    40ca:	e081      	b.n	41d0 <tc_init+0x184>
    40cc:	496a      	ldr	r1, [pc, #424]	; (4278 <tc_init+0x22c>)
    40ce:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    40d0:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    40d2:	ab03      	add	r3, sp, #12
    40d4:	5ad3      	ldrh	r3, [r2, r3]
    40d6:	4303      	orrs	r3, r0
    40d8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    40da:	78b3      	ldrb	r3, [r6, #2]
    40dc:	2b08      	cmp	r3, #8
    40de:	d100      	bne.n	40e2 <tc_init+0x96>
    40e0:	e086      	b.n	41f0 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    40e2:	a901      	add	r1, sp, #4
    40e4:	7833      	ldrb	r3, [r6, #0]
    40e6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    40e8:	ab05      	add	r3, sp, #20
    40ea:	5ddf      	ldrb	r7, [r3, r7]
    40ec:	0038      	movs	r0, r7
    40ee:	4b63      	ldr	r3, [pc, #396]	; (427c <tc_init+0x230>)
    40f0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    40f2:	0038      	movs	r0, r7
    40f4:	4b62      	ldr	r3, [pc, #392]	; (4280 <tc_init+0x234>)
    40f6:	4798      	blx	r3
	ctrla_tmp =
    40f8:	8931      	ldrh	r1, [r6, #8]
    40fa:	88b3      	ldrh	r3, [r6, #4]
    40fc:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    40fe:	78b1      	ldrb	r1, [r6, #2]
    4100:	79b2      	ldrb	r2, [r6, #6]
    4102:	4311      	orrs	r1, r2
	ctrla_tmp =
    4104:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    4106:	7873      	ldrb	r3, [r6, #1]
    4108:	2b00      	cmp	r3, #0
    410a:	d002      	beq.n	4112 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    410c:	2380      	movs	r3, #128	; 0x80
    410e:	011b      	lsls	r3, r3, #4
    4110:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4112:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4114:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4116:	b25b      	sxtb	r3, r3
    4118:	2b00      	cmp	r3, #0
    411a:	dbfb      	blt.n	4114 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    411c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    411e:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    4120:	1e4b      	subs	r3, r1, #1
    4122:	4199      	sbcs	r1, r3
    4124:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    4126:	7bb3      	ldrb	r3, [r6, #14]
    4128:	2b00      	cmp	r3, #0
    412a:	d001      	beq.n	4130 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    412c:	2301      	movs	r3, #1
    412e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4130:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4132:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4134:	b25b      	sxtb	r3, r3
    4136:	2b00      	cmp	r3, #0
    4138:	dbfb      	blt.n	4132 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    413a:	23ff      	movs	r3, #255	; 0xff
    413c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    413e:	2900      	cmp	r1, #0
    4140:	d005      	beq.n	414e <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4142:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4144:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    4146:	b25b      	sxtb	r3, r3
    4148:	2b00      	cmp	r3, #0
    414a:	dbfb      	blt.n	4144 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    414c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    414e:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    4150:	7af3      	ldrb	r3, [r6, #11]
    4152:	2b00      	cmp	r3, #0
    4154:	d001      	beq.n	415a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4156:	2310      	movs	r3, #16
    4158:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    415a:	7b33      	ldrb	r3, [r6, #12]
    415c:	2b00      	cmp	r3, #0
    415e:	d001      	beq.n	4164 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4160:	2320      	movs	r3, #32
    4162:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4164:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4166:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4168:	b25b      	sxtb	r3, r3
    416a:	2b00      	cmp	r3, #0
    416c:	dbfb      	blt.n	4166 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    416e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4170:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4172:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4174:	b25b      	sxtb	r3, r3
    4176:	2b00      	cmp	r3, #0
    4178:	dbfb      	blt.n	4172 <tc_init+0x126>
	switch (module_inst->counter_size) {
    417a:	7923      	ldrb	r3, [r4, #4]
    417c:	2b04      	cmp	r3, #4
    417e:	d03f      	beq.n	4200 <tc_init+0x1b4>
    4180:	2b08      	cmp	r3, #8
    4182:	d05e      	beq.n	4242 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    4184:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    4186:	2b00      	cmp	r3, #0
    4188:	d000      	beq.n	418c <tc_init+0x140>
    418a:	e78b      	b.n	40a4 <tc_init+0x58>
    418c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    418e:	b25b      	sxtb	r3, r3
    4190:	2b00      	cmp	r3, #0
    4192:	dbfb      	blt.n	418c <tc_init+0x140>
				= config->counter_16_bit.value;
    4194:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4196:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4198:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    419a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    419c:	b25b      	sxtb	r3, r3
    419e:	2b00      	cmp	r3, #0
    41a0:	dbfb      	blt.n	419a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    41a2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    41a4:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    41a6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    41a8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    41aa:	b25b      	sxtb	r3, r3
    41ac:	2b00      	cmp	r3, #0
    41ae:	dbfb      	blt.n	41a8 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    41b0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    41b2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    41b4:	2000      	movs	r0, #0
    41b6:	e775      	b.n	40a4 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    41b8:	a902      	add	r1, sp, #8
    41ba:	2301      	movs	r3, #1
    41bc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    41be:	2200      	movs	r2, #0
    41c0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    41c2:	7e32      	ldrb	r2, [r6, #24]
    41c4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    41c6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    41c8:	7d30      	ldrb	r0, [r6, #20]
    41ca:	4b2e      	ldr	r3, [pc, #184]	; (4284 <tc_init+0x238>)
    41cc:	4798      	blx	r3
    41ce:	e779      	b.n	40c4 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    41d0:	a902      	add	r1, sp, #8
    41d2:	2301      	movs	r3, #1
    41d4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    41d6:	2200      	movs	r2, #0
    41d8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    41da:	3224      	adds	r2, #36	; 0x24
    41dc:	18b2      	adds	r2, r6, r2
    41de:	7812      	ldrb	r2, [r2, #0]
    41e0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    41e2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    41e4:	331f      	adds	r3, #31
    41e6:	18f3      	adds	r3, r6, r3
    41e8:	7818      	ldrb	r0, [r3, #0]
    41ea:	4b26      	ldr	r3, [pc, #152]	; (4284 <tc_init+0x238>)
    41ec:	4798      	blx	r3
    41ee:	e76d      	b.n	40cc <tc_init+0x80>
    41f0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    41f2:	1c7a      	adds	r2, r7, #1
    41f4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    41f6:	ab03      	add	r3, sp, #12
    41f8:	5ad3      	ldrh	r3, [r2, r3]
    41fa:	4303      	orrs	r3, r0
    41fc:	620b      	str	r3, [r1, #32]
    41fe:	e770      	b.n	40e2 <tc_init+0x96>
    4200:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4202:	b25b      	sxtb	r3, r3
    4204:	2b00      	cmp	r3, #0
    4206:	dbfb      	blt.n	4200 <tc_init+0x1b4>
					config->counter_8_bit.value;
    4208:	2328      	movs	r3, #40	; 0x28
    420a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    420c:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    420e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4210:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4212:	b25b      	sxtb	r3, r3
    4214:	2b00      	cmp	r3, #0
    4216:	dbfb      	blt.n	4210 <tc_init+0x1c4>
					config->counter_8_bit.period;
    4218:	2329      	movs	r3, #41	; 0x29
    421a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    421c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    421e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4220:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4222:	b25b      	sxtb	r3, r3
    4224:	2b00      	cmp	r3, #0
    4226:	dbfb      	blt.n	4220 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    4228:	232a      	movs	r3, #42	; 0x2a
    422a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    422c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    422e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4230:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4232:	b25b      	sxtb	r3, r3
    4234:	2b00      	cmp	r3, #0
    4236:	dbfb      	blt.n	4230 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    4238:	232b      	movs	r3, #43	; 0x2b
    423a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    423c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    423e:	2000      	movs	r0, #0
    4240:	e730      	b.n	40a4 <tc_init+0x58>
    4242:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4244:	b25b      	sxtb	r3, r3
    4246:	2b00      	cmp	r3, #0
    4248:	dbfb      	blt.n	4242 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    424a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    424c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    424e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4250:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4252:	b25b      	sxtb	r3, r3
    4254:	2b00      	cmp	r3, #0
    4256:	dbfb      	blt.n	4250 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    4258:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    425a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    425c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    425e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4260:	b25b      	sxtb	r3, r3
    4262:	2b00      	cmp	r3, #0
    4264:	dbfb      	blt.n	425e <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    4266:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    4268:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    426a:	2000      	movs	r0, #0
    426c:	e71a      	b.n	40a4 <tc_init+0x58>
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	00004015 	.word	0x00004015
    4274:	20000d24 	.word	0x20000d24
    4278:	40000400 	.word	0x40000400
    427c:	00005189 	.word	0x00005189
    4280:	000050fd 	.word	0x000050fd
    4284:	000052b1 	.word	0x000052b1

00004288 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4288:	1c93      	adds	r3, r2, #2
    428a:	009b      	lsls	r3, r3, #2
    428c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    428e:	2a02      	cmp	r2, #2
    4290:	d009      	beq.n	42a6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4292:	2a03      	cmp	r2, #3
    4294:	d00c      	beq.n	42b0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    4296:	2301      	movs	r3, #1
    4298:	4093      	lsls	r3, r2
    429a:	001a      	movs	r2, r3
    429c:	7e03      	ldrb	r3, [r0, #24]
    429e:	4313      	orrs	r3, r2
    42a0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    42a2:	2000      	movs	r0, #0
    42a4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    42a6:	7e03      	ldrb	r3, [r0, #24]
    42a8:	2210      	movs	r2, #16
    42aa:	4313      	orrs	r3, r2
    42ac:	7603      	strb	r3, [r0, #24]
    42ae:	e7f8      	b.n	42a2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    42b0:	7e03      	ldrb	r3, [r0, #24]
    42b2:	2220      	movs	r2, #32
    42b4:	4313      	orrs	r3, r2
    42b6:	7603      	strb	r3, [r0, #24]
    42b8:	e7f3      	b.n	42a2 <tc_register_callback+0x1a>
	...

000042bc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    42bc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    42be:	0080      	lsls	r0, r0, #2
    42c0:	4b16      	ldr	r3, [pc, #88]	; (431c <_tc_interrupt_handler+0x60>)
    42c2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    42c4:	6823      	ldr	r3, [r4, #0]
    42c6:	7b9d      	ldrb	r5, [r3, #14]
    42c8:	7e22      	ldrb	r2, [r4, #24]
    42ca:	7e63      	ldrb	r3, [r4, #25]
    42cc:	4013      	ands	r3, r2
    42ce:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    42d0:	07eb      	lsls	r3, r5, #31
    42d2:	d406      	bmi.n	42e2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    42d4:	07ab      	lsls	r3, r5, #30
    42d6:	d40b      	bmi.n	42f0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    42d8:	06eb      	lsls	r3, r5, #27
    42da:	d410      	bmi.n	42fe <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    42dc:	06ab      	lsls	r3, r5, #26
    42de:	d415      	bmi.n	430c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    42e0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    42e2:	0020      	movs	r0, r4
    42e4:	68a3      	ldr	r3, [r4, #8]
    42e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    42e8:	2301      	movs	r3, #1
    42ea:	6822      	ldr	r2, [r4, #0]
    42ec:	7393      	strb	r3, [r2, #14]
    42ee:	e7f1      	b.n	42d4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    42f0:	0020      	movs	r0, r4
    42f2:	68e3      	ldr	r3, [r4, #12]
    42f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    42f6:	2302      	movs	r3, #2
    42f8:	6822      	ldr	r2, [r4, #0]
    42fa:	7393      	strb	r3, [r2, #14]
    42fc:	e7ec      	b.n	42d8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    42fe:	0020      	movs	r0, r4
    4300:	6923      	ldr	r3, [r4, #16]
    4302:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4304:	2310      	movs	r3, #16
    4306:	6822      	ldr	r2, [r4, #0]
    4308:	7393      	strb	r3, [r2, #14]
    430a:	e7e7      	b.n	42dc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    430c:	0020      	movs	r0, r4
    430e:	6963      	ldr	r3, [r4, #20]
    4310:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4312:	6823      	ldr	r3, [r4, #0]
    4314:	2220      	movs	r2, #32
    4316:	739a      	strb	r2, [r3, #14]
}
    4318:	e7e2      	b.n	42e0 <_tc_interrupt_handler+0x24>
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	20000d24 	.word	0x20000d24

00004320 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4320:	b510      	push	{r4, lr}
    4322:	2000      	movs	r0, #0
    4324:	4b01      	ldr	r3, [pc, #4]	; (432c <TC3_Handler+0xc>)
    4326:	4798      	blx	r3
    4328:	bd10      	pop	{r4, pc}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	000042bd 	.word	0x000042bd

00004330 <TC4_Handler>:
    4330:	b510      	push	{r4, lr}
    4332:	2001      	movs	r0, #1
    4334:	4b01      	ldr	r3, [pc, #4]	; (433c <TC4_Handler+0xc>)
    4336:	4798      	blx	r3
    4338:	bd10      	pop	{r4, pc}
    433a:	46c0      	nop			; (mov r8, r8)
    433c:	000042bd 	.word	0x000042bd

00004340 <TC5_Handler>:
    4340:	b510      	push	{r4, lr}
    4342:	2002      	movs	r0, #2
    4344:	4b01      	ldr	r3, [pc, #4]	; (434c <TC5_Handler+0xc>)
    4346:	4798      	blx	r3
    4348:	bd10      	pop	{r4, pc}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	000042bd 	.word	0x000042bd

00004350 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4350:	b5f0      	push	{r4, r5, r6, r7, lr}
    4352:	46de      	mov	lr, fp
    4354:	4657      	mov	r7, sl
    4356:	464e      	mov	r6, r9
    4358:	4645      	mov	r5, r8
    435a:	b5e0      	push	{r5, r6, r7, lr}
    435c:	b091      	sub	sp, #68	; 0x44
    435e:	0005      	movs	r5, r0
    4360:	000c      	movs	r4, r1
    4362:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4364:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4366:	0008      	movs	r0, r1
    4368:	4bba      	ldr	r3, [pc, #744]	; (4654 <usart_init+0x304>)
    436a:	4798      	blx	r3
    436c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    436e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4370:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4372:	07db      	lsls	r3, r3, #31
    4374:	d506      	bpl.n	4384 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4376:	b011      	add	sp, #68	; 0x44
    4378:	bc3c      	pop	{r2, r3, r4, r5}
    437a:	4690      	mov	r8, r2
    437c:	4699      	mov	r9, r3
    437e:	46a2      	mov	sl, r4
    4380:	46ab      	mov	fp, r5
    4382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4384:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4386:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4388:	079b      	lsls	r3, r3, #30
    438a:	d4f4      	bmi.n	4376 <usart_init+0x26>
    438c:	49b2      	ldr	r1, [pc, #712]	; (4658 <usart_init+0x308>)
    438e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4390:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4392:	2301      	movs	r3, #1
    4394:	40bb      	lsls	r3, r7
    4396:	4303      	orrs	r3, r0
    4398:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    439a:	a90f      	add	r1, sp, #60	; 0x3c
    439c:	272d      	movs	r7, #45	; 0x2d
    439e:	5df3      	ldrb	r3, [r6, r7]
    43a0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    43a2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    43a4:	b2d3      	uxtb	r3, r2
    43a6:	9302      	str	r3, [sp, #8]
    43a8:	0018      	movs	r0, r3
    43aa:	4bac      	ldr	r3, [pc, #688]	; (465c <usart_init+0x30c>)
    43ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    43ae:	9802      	ldr	r0, [sp, #8]
    43b0:	4bab      	ldr	r3, [pc, #684]	; (4660 <usart_init+0x310>)
    43b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    43b4:	5df0      	ldrb	r0, [r6, r7]
    43b6:	2100      	movs	r1, #0
    43b8:	4baa      	ldr	r3, [pc, #680]	; (4664 <usart_init+0x314>)
    43ba:	4798      	blx	r3
	module->character_size = config->character_size;
    43bc:	7af3      	ldrb	r3, [r6, #11]
    43be:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    43c0:	2324      	movs	r3, #36	; 0x24
    43c2:	5cf3      	ldrb	r3, [r6, r3]
    43c4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    43c6:	2325      	movs	r3, #37	; 0x25
    43c8:	5cf3      	ldrb	r3, [r6, r3]
    43ca:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    43cc:	7ef3      	ldrb	r3, [r6, #27]
    43ce:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    43d0:	7f33      	ldrb	r3, [r6, #28]
    43d2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    43d4:	682b      	ldr	r3, [r5, #0]
    43d6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    43d8:	0018      	movs	r0, r3
    43da:	4b9e      	ldr	r3, [pc, #632]	; (4654 <usart_init+0x304>)
    43dc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    43de:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    43e0:	2200      	movs	r2, #0
    43e2:	230e      	movs	r3, #14
    43e4:	a906      	add	r1, sp, #24
    43e6:	468c      	mov	ip, r1
    43e8:	4463      	add	r3, ip
    43ea:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    43ec:	8a32      	ldrh	r2, [r6, #16]
    43ee:	9202      	str	r2, [sp, #8]
    43f0:	2380      	movs	r3, #128	; 0x80
    43f2:	01db      	lsls	r3, r3, #7
    43f4:	429a      	cmp	r2, r3
    43f6:	d100      	bne.n	43fa <usart_init+0xaa>
    43f8:	e09a      	b.n	4530 <usart_init+0x1e0>
    43fa:	d90f      	bls.n	441c <usart_init+0xcc>
    43fc:	23c0      	movs	r3, #192	; 0xc0
    43fe:	01db      	lsls	r3, r3, #7
    4400:	9a02      	ldr	r2, [sp, #8]
    4402:	429a      	cmp	r2, r3
    4404:	d100      	bne.n	4408 <usart_init+0xb8>
    4406:	e08e      	b.n	4526 <usart_init+0x1d6>
    4408:	2380      	movs	r3, #128	; 0x80
    440a:	021b      	lsls	r3, r3, #8
    440c:	429a      	cmp	r2, r3
    440e:	d000      	beq.n	4412 <usart_init+0xc2>
    4410:	e11b      	b.n	464a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4412:	2303      	movs	r3, #3
    4414:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4416:	2300      	movs	r3, #0
    4418:	9307      	str	r3, [sp, #28]
    441a:	e008      	b.n	442e <usart_init+0xde>
	switch (config->sample_rate) {
    441c:	2380      	movs	r3, #128	; 0x80
    441e:	019b      	lsls	r3, r3, #6
    4420:	429a      	cmp	r2, r3
    4422:	d000      	beq.n	4426 <usart_init+0xd6>
    4424:	e111      	b.n	464a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4426:	2310      	movs	r3, #16
    4428:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    442a:	3b0f      	subs	r3, #15
    442c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    442e:	6833      	ldr	r3, [r6, #0]
    4430:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4432:	68f3      	ldr	r3, [r6, #12]
    4434:	469b      	mov	fp, r3
		config->sample_adjustment |
    4436:	6973      	ldr	r3, [r6, #20]
    4438:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    443a:	7e33      	ldrb	r3, [r6, #24]
    443c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    443e:	2326      	movs	r3, #38	; 0x26
    4440:	5cf3      	ldrb	r3, [r6, r3]
    4442:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4444:	6873      	ldr	r3, [r6, #4]
    4446:	4699      	mov	r9, r3
	switch (transfer_mode)
    4448:	2b00      	cmp	r3, #0
    444a:	d100      	bne.n	444e <usart_init+0xfe>
    444c:	e09c      	b.n	4588 <usart_init+0x238>
    444e:	2380      	movs	r3, #128	; 0x80
    4450:	055b      	lsls	r3, r3, #21
    4452:	4599      	cmp	r9, r3
    4454:	d100      	bne.n	4458 <usart_init+0x108>
    4456:	e080      	b.n	455a <usart_init+0x20a>
	if(config->encoding_format_enable) {
    4458:	7e73      	ldrb	r3, [r6, #25]
    445a:	2b00      	cmp	r3, #0
    445c:	d002      	beq.n	4464 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    445e:	7eb3      	ldrb	r3, [r6, #26]
    4460:	4642      	mov	r2, r8
    4462:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    4464:	230e      	movs	r3, #14
    4466:	aa06      	add	r2, sp, #24
    4468:	4694      	mov	ip, r2
    446a:	4463      	add	r3, ip
    446c:	881b      	ldrh	r3, [r3, #0]
    446e:	4642      	mov	r2, r8
    4470:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4472:	9b05      	ldr	r3, [sp, #20]
    4474:	465a      	mov	r2, fp
    4476:	4313      	orrs	r3, r2
    4478:	9a03      	ldr	r2, [sp, #12]
    447a:	4313      	orrs	r3, r2
    447c:	464a      	mov	r2, r9
    447e:	4313      	orrs	r3, r2
    4480:	9f02      	ldr	r7, [sp, #8]
    4482:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4484:	9b04      	ldr	r3, [sp, #16]
    4486:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4488:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    448a:	4653      	mov	r3, sl
    448c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    448e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4490:	2327      	movs	r3, #39	; 0x27
    4492:	5cf3      	ldrb	r3, [r6, r3]
    4494:	2b00      	cmp	r3, #0
    4496:	d101      	bne.n	449c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4498:	3304      	adds	r3, #4
    449a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    449c:	7e73      	ldrb	r3, [r6, #25]
    449e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    44a0:	7f32      	ldrb	r2, [r6, #28]
    44a2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    44a4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    44a6:	7f72      	ldrb	r2, [r6, #29]
    44a8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    44aa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    44ac:	2224      	movs	r2, #36	; 0x24
    44ae:	5cb2      	ldrb	r2, [r6, r2]
    44b0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    44b2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    44b4:	2225      	movs	r2, #37	; 0x25
    44b6:	5cb2      	ldrb	r2, [r6, r2]
    44b8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    44ba:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    44bc:	7ab1      	ldrb	r1, [r6, #10]
    44be:	7af2      	ldrb	r2, [r6, #11]
    44c0:	4311      	orrs	r1, r2
    44c2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    44c4:	8933      	ldrh	r3, [r6, #8]
    44c6:	2bff      	cmp	r3, #255	; 0xff
    44c8:	d100      	bne.n	44cc <usart_init+0x17c>
    44ca:	e081      	b.n	45d0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    44cc:	2280      	movs	r2, #128	; 0x80
    44ce:	0452      	lsls	r2, r2, #17
    44d0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    44d2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    44d4:	232c      	movs	r3, #44	; 0x2c
    44d6:	5cf3      	ldrb	r3, [r6, r3]
    44d8:	2b00      	cmp	r3, #0
    44da:	d103      	bne.n	44e4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    44dc:	4b62      	ldr	r3, [pc, #392]	; (4668 <usart_init+0x318>)
    44de:	789b      	ldrb	r3, [r3, #2]
    44e0:	079b      	lsls	r3, r3, #30
    44e2:	d501      	bpl.n	44e8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    44e4:	2380      	movs	r3, #128	; 0x80
    44e6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    44e8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    44ea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    44ec:	2b00      	cmp	r3, #0
    44ee:	d1fc      	bne.n	44ea <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    44f0:	4643      	mov	r3, r8
    44f2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    44f4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    44f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    44f8:	2b00      	cmp	r3, #0
    44fa:	d1fc      	bne.n	44f6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    44fc:	4643      	mov	r3, r8
    44fe:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4500:	ab0e      	add	r3, sp, #56	; 0x38
    4502:	2280      	movs	r2, #128	; 0x80
    4504:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4506:	2200      	movs	r2, #0
    4508:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    450a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    450c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    450e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4510:	930a      	str	r3, [sp, #40]	; 0x28
    4512:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4514:	930b      	str	r3, [sp, #44]	; 0x2c
    4516:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4518:	930c      	str	r3, [sp, #48]	; 0x30
    451a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    451c:	9302      	str	r3, [sp, #8]
    451e:	930d      	str	r3, [sp, #52]	; 0x34
    4520:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4522:	ae0a      	add	r6, sp, #40	; 0x28
    4524:	e063      	b.n	45ee <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4526:	2308      	movs	r3, #8
    4528:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    452a:	3b07      	subs	r3, #7
    452c:	9307      	str	r3, [sp, #28]
    452e:	e77e      	b.n	442e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4530:	6833      	ldr	r3, [r6, #0]
    4532:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4534:	68f3      	ldr	r3, [r6, #12]
    4536:	469b      	mov	fp, r3
		config->sample_adjustment |
    4538:	6973      	ldr	r3, [r6, #20]
    453a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    453c:	7e33      	ldrb	r3, [r6, #24]
    453e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4540:	2326      	movs	r3, #38	; 0x26
    4542:	5cf3      	ldrb	r3, [r6, r3]
    4544:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4546:	6873      	ldr	r3, [r6, #4]
    4548:	4699      	mov	r9, r3
	switch (transfer_mode)
    454a:	2b00      	cmp	r3, #0
    454c:	d018      	beq.n	4580 <usart_init+0x230>
    454e:	2380      	movs	r3, #128	; 0x80
    4550:	055b      	lsls	r3, r3, #21
    4552:	4599      	cmp	r9, r3
    4554:	d001      	beq.n	455a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    4556:	2000      	movs	r0, #0
    4558:	e025      	b.n	45a6 <usart_init+0x256>
			if (!config->use_external_clock) {
    455a:	2327      	movs	r3, #39	; 0x27
    455c:	5cf3      	ldrb	r3, [r6, r3]
    455e:	2b00      	cmp	r3, #0
    4560:	d000      	beq.n	4564 <usart_init+0x214>
    4562:	e779      	b.n	4458 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4564:	6a33      	ldr	r3, [r6, #32]
    4566:	001f      	movs	r7, r3
    4568:	b2c0      	uxtb	r0, r0
    456a:	4b40      	ldr	r3, [pc, #256]	; (466c <usart_init+0x31c>)
    456c:	4798      	blx	r3
    456e:	0001      	movs	r1, r0
    4570:	220e      	movs	r2, #14
    4572:	ab06      	add	r3, sp, #24
    4574:	469c      	mov	ip, r3
    4576:	4462      	add	r2, ip
    4578:	0038      	movs	r0, r7
    457a:	4b3d      	ldr	r3, [pc, #244]	; (4670 <usart_init+0x320>)
    457c:	4798      	blx	r3
    457e:	e012      	b.n	45a6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4580:	2308      	movs	r3, #8
    4582:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4584:	2300      	movs	r3, #0
    4586:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4588:	2327      	movs	r3, #39	; 0x27
    458a:	5cf3      	ldrb	r3, [r6, r3]
    458c:	2b00      	cmp	r3, #0
    458e:	d00e      	beq.n	45ae <usart_init+0x25e>
				status_code =
    4590:	9b06      	ldr	r3, [sp, #24]
    4592:	9300      	str	r3, [sp, #0]
    4594:	9b07      	ldr	r3, [sp, #28]
    4596:	220e      	movs	r2, #14
    4598:	a906      	add	r1, sp, #24
    459a:	468c      	mov	ip, r1
    459c:	4462      	add	r2, ip
    459e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    45a0:	6a30      	ldr	r0, [r6, #32]
    45a2:	4f34      	ldr	r7, [pc, #208]	; (4674 <usart_init+0x324>)
    45a4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    45a6:	2800      	cmp	r0, #0
    45a8:	d000      	beq.n	45ac <usart_init+0x25c>
    45aa:	e6e4      	b.n	4376 <usart_init+0x26>
    45ac:	e754      	b.n	4458 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    45ae:	6a33      	ldr	r3, [r6, #32]
    45b0:	001f      	movs	r7, r3
    45b2:	b2c0      	uxtb	r0, r0
    45b4:	4b2d      	ldr	r3, [pc, #180]	; (466c <usart_init+0x31c>)
    45b6:	4798      	blx	r3
    45b8:	0001      	movs	r1, r0
				status_code =
    45ba:	9b06      	ldr	r3, [sp, #24]
    45bc:	9300      	str	r3, [sp, #0]
    45be:	9b07      	ldr	r3, [sp, #28]
    45c0:	220e      	movs	r2, #14
    45c2:	a806      	add	r0, sp, #24
    45c4:	4684      	mov	ip, r0
    45c6:	4462      	add	r2, ip
    45c8:	0038      	movs	r0, r7
    45ca:	4f2a      	ldr	r7, [pc, #168]	; (4674 <usart_init+0x324>)
    45cc:	47b8      	blx	r7
    45ce:	e7ea      	b.n	45a6 <usart_init+0x256>
		if(config->lin_slave_enable) {
    45d0:	7ef3      	ldrb	r3, [r6, #27]
    45d2:	2b00      	cmp	r3, #0
    45d4:	d100      	bne.n	45d8 <usart_init+0x288>
    45d6:	e77d      	b.n	44d4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    45d8:	2380      	movs	r3, #128	; 0x80
    45da:	04db      	lsls	r3, r3, #19
    45dc:	431f      	orrs	r7, r3
    45de:	e779      	b.n	44d4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    45e0:	0020      	movs	r0, r4
    45e2:	4b25      	ldr	r3, [pc, #148]	; (4678 <usart_init+0x328>)
    45e4:	4798      	blx	r3
    45e6:	e007      	b.n	45f8 <usart_init+0x2a8>
    45e8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    45ea:	2f04      	cmp	r7, #4
    45ec:	d00d      	beq.n	460a <usart_init+0x2ba>
    45ee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    45f0:	00bb      	lsls	r3, r7, #2
    45f2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    45f4:	2800      	cmp	r0, #0
    45f6:	d0f3      	beq.n	45e0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    45f8:	1c43      	adds	r3, r0, #1
    45fa:	d0f5      	beq.n	45e8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    45fc:	a90e      	add	r1, sp, #56	; 0x38
    45fe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4600:	0c00      	lsrs	r0, r0, #16
    4602:	b2c0      	uxtb	r0, r0
    4604:	4b1d      	ldr	r3, [pc, #116]	; (467c <usart_init+0x32c>)
    4606:	4798      	blx	r3
    4608:	e7ee      	b.n	45e8 <usart_init+0x298>
		module->callback[i]            = NULL;
    460a:	2300      	movs	r3, #0
    460c:	60eb      	str	r3, [r5, #12]
    460e:	612b      	str	r3, [r5, #16]
    4610:	616b      	str	r3, [r5, #20]
    4612:	61ab      	str	r3, [r5, #24]
    4614:	61eb      	str	r3, [r5, #28]
    4616:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4618:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    461a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    461c:	2200      	movs	r2, #0
    461e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4620:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4622:	3330      	adds	r3, #48	; 0x30
    4624:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4626:	3301      	adds	r3, #1
    4628:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    462a:	3301      	adds	r3, #1
    462c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    462e:	3301      	adds	r3, #1
    4630:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4632:	6828      	ldr	r0, [r5, #0]
    4634:	4b07      	ldr	r3, [pc, #28]	; (4654 <usart_init+0x304>)
    4636:	4798      	blx	r3
    4638:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    463a:	4911      	ldr	r1, [pc, #68]	; (4680 <usart_init+0x330>)
    463c:	4b11      	ldr	r3, [pc, #68]	; (4684 <usart_init+0x334>)
    463e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4640:	00a4      	lsls	r4, r4, #2
    4642:	4b11      	ldr	r3, [pc, #68]	; (4688 <usart_init+0x338>)
    4644:	50e5      	str	r5, [r4, r3]
	return status_code;
    4646:	2000      	movs	r0, #0
    4648:	e695      	b.n	4376 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    464a:	2310      	movs	r3, #16
    464c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    464e:	2300      	movs	r3, #0
    4650:	9307      	str	r3, [sp, #28]
    4652:	e6ec      	b.n	442e <usart_init+0xde>
    4654:	00002d71 	.word	0x00002d71
    4658:	40000400 	.word	0x40000400
    465c:	00005189 	.word	0x00005189
    4660:	000050fd 	.word	0x000050fd
    4664:	00002c29 	.word	0x00002c29
    4668:	41002000 	.word	0x41002000
    466c:	000051d5 	.word	0x000051d5
    4670:	00002b6d 	.word	0x00002b6d
    4674:	00002b95 	.word	0x00002b95
    4678:	00002c75 	.word	0x00002c75
    467c:	000052b1 	.word	0x000052b1
    4680:	000047f1 	.word	0x000047f1
    4684:	00004989 	.word	0x00004989
    4688:	20000d30 	.word	0x20000d30

0000468c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    468c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    468e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4690:	2a00      	cmp	r2, #0
    4692:	d101      	bne.n	4698 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4694:	0018      	movs	r0, r3
    4696:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4698:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    469a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    469c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    469e:	2a00      	cmp	r2, #0
    46a0:	d1f8      	bne.n	4694 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    46a2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    46a4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    46a6:	2102      	movs	r1, #2
    46a8:	7e13      	ldrb	r3, [r2, #24]
    46aa:	420b      	tst	r3, r1
    46ac:	d0fc      	beq.n	46a8 <usart_write_wait+0x1c>
	return STATUS_OK;
    46ae:	2300      	movs	r3, #0
    46b0:	e7f0      	b.n	4694 <usart_write_wait+0x8>

000046b2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    46b2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    46b4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    46b6:	2a00      	cmp	r2, #0
    46b8:	d101      	bne.n	46be <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    46ba:	0018      	movs	r0, r3
    46bc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    46be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    46c0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    46c2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    46c4:	2a00      	cmp	r2, #0
    46c6:	d1f8      	bne.n	46ba <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    46c8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    46ca:	7e10      	ldrb	r0, [r2, #24]
    46cc:	0740      	lsls	r0, r0, #29
    46ce:	d5f4      	bpl.n	46ba <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    46d0:	8b53      	ldrh	r3, [r2, #26]
    46d2:	b2db      	uxtb	r3, r3
	if (error_code) {
    46d4:	0698      	lsls	r0, r3, #26
    46d6:	d01d      	beq.n	4714 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    46d8:	0798      	lsls	r0, r3, #30
    46da:	d503      	bpl.n	46e4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    46dc:	2302      	movs	r3, #2
    46de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    46e0:	3318      	adds	r3, #24
    46e2:	e7ea      	b.n	46ba <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    46e4:	0758      	lsls	r0, r3, #29
    46e6:	d503      	bpl.n	46f0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    46e8:	2304      	movs	r3, #4
    46ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    46ec:	331a      	adds	r3, #26
    46ee:	e7e4      	b.n	46ba <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    46f0:	07d8      	lsls	r0, r3, #31
    46f2:	d503      	bpl.n	46fc <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    46f4:	2301      	movs	r3, #1
    46f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    46f8:	3312      	adds	r3, #18
    46fa:	e7de      	b.n	46ba <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    46fc:	06d8      	lsls	r0, r3, #27
    46fe:	d503      	bpl.n	4708 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4700:	2310      	movs	r3, #16
    4702:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4704:	3332      	adds	r3, #50	; 0x32
    4706:	e7d8      	b.n	46ba <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4708:	069b      	lsls	r3, r3, #26
    470a:	d503      	bpl.n	4714 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    470c:	2320      	movs	r3, #32
    470e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4710:	3321      	adds	r3, #33	; 0x21
    4712:	e7d2      	b.n	46ba <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4714:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4716:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4718:	2300      	movs	r3, #0
    471a:	e7ce      	b.n	46ba <usart_read_wait+0x8>

0000471c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    471c:	b5f0      	push	{r4, r5, r6, r7, lr}
    471e:	46ce      	mov	lr, r9
    4720:	4647      	mov	r7, r8
    4722:	b580      	push	{r7, lr}
    4724:	b083      	sub	sp, #12
    4726:	0005      	movs	r5, r0
    4728:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    472a:	2017      	movs	r0, #23
	if (length == 0) {
    472c:	2a00      	cmp	r2, #0
    472e:	d104      	bne.n	473a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    4730:	b003      	add	sp, #12
    4732:	bc0c      	pop	{r2, r3}
    4734:	4690      	mov	r8, r2
    4736:	4699      	mov	r9, r3
    4738:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    473a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    473c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    473e:	2b00      	cmp	r3, #0
    4740:	d0f6      	beq.n	4730 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4742:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    4744:	3a01      	subs	r2, #1
    4746:	b293      	uxth	r3, r2
    4748:	4699      	mov	r9, r3
    474a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    474c:	2701      	movs	r7, #1
	while (length--) {
    474e:	4b20      	ldr	r3, [pc, #128]	; (47d0 <usart_write_buffer_wait+0xb4>)
    4750:	4698      	mov	r8, r3
    4752:	e011      	b.n	4778 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    4754:	1c73      	adds	r3, r6, #1
    4756:	b29b      	uxth	r3, r3
    4758:	9a01      	ldr	r2, [sp, #4]
    475a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    475c:	796a      	ldrb	r2, [r5, #5]
    475e:	2a01      	cmp	r2, #1
    4760:	d017      	beq.n	4792 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    4762:	b289      	uxth	r1, r1
    4764:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    4766:	0028      	movs	r0, r5
    4768:	4b1a      	ldr	r3, [pc, #104]	; (47d4 <usart_write_buffer_wait+0xb8>)
    476a:	4798      	blx	r3
	while (length--) {
    476c:	464b      	mov	r3, r9
    476e:	3b01      	subs	r3, #1
    4770:	b29b      	uxth	r3, r3
    4772:	4699      	mov	r9, r3
    4774:	4543      	cmp	r3, r8
    4776:	d013      	beq.n	47a0 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    4778:	7e23      	ldrb	r3, [r4, #24]
    477a:	423b      	tst	r3, r7
    477c:	d1ea      	bne.n	4754 <usart_write_buffer_wait+0x38>
    477e:	4b14      	ldr	r3, [pc, #80]	; (47d0 <usart_write_buffer_wait+0xb4>)
    4780:	7e22      	ldrb	r2, [r4, #24]
    4782:	423a      	tst	r2, r7
    4784:	d1e6      	bne.n	4754 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    4786:	2b01      	cmp	r3, #1
    4788:	d019      	beq.n	47be <usart_write_buffer_wait+0xa2>
    478a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    478c:	2b00      	cmp	r3, #0
    478e:	d1f7      	bne.n	4780 <usart_write_buffer_wait+0x64>
    4790:	e7e0      	b.n	4754 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4792:	3602      	adds	r6, #2
    4794:	b2b6      	uxth	r6, r6
    4796:	9a01      	ldr	r2, [sp, #4]
    4798:	5cd3      	ldrb	r3, [r2, r3]
    479a:	021b      	lsls	r3, r3, #8
    479c:	4319      	orrs	r1, r3
    479e:	e7e2      	b.n	4766 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    47a0:	7e23      	ldrb	r3, [r4, #24]
    47a2:	079b      	lsls	r3, r3, #30
    47a4:	d40d      	bmi.n	47c2 <usart_write_buffer_wait+0xa6>
    47a6:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <usart_write_buffer_wait+0xb4>)
    47a8:	2102      	movs	r1, #2
    47aa:	7e22      	ldrb	r2, [r4, #24]
    47ac:	420a      	tst	r2, r1
    47ae:	d10a      	bne.n	47c6 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    47b0:	2b01      	cmp	r3, #1
    47b2:	d00a      	beq.n	47ca <usart_write_buffer_wait+0xae>
    47b4:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    47b6:	2b00      	cmp	r3, #0
    47b8:	d1f7      	bne.n	47aa <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    47ba:	2000      	movs	r0, #0
    47bc:	e7b8      	b.n	4730 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    47be:	2012      	movs	r0, #18
    47c0:	e7b6      	b.n	4730 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    47c2:	2000      	movs	r0, #0
    47c4:	e7b4      	b.n	4730 <usart_write_buffer_wait+0x14>
    47c6:	2000      	movs	r0, #0
    47c8:	e7b2      	b.n	4730 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    47ca:	2012      	movs	r0, #18
    47cc:	e7b0      	b.n	4730 <usart_write_buffer_wait+0x14>
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	0000ffff 	.word	0x0000ffff
    47d4:	0000468d 	.word	0x0000468d

000047d8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    47d8:	1c93      	adds	r3, r2, #2
    47da:	009b      	lsls	r3, r3, #2
    47dc:	18c3      	adds	r3, r0, r3
    47de:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    47e0:	2130      	movs	r1, #48	; 0x30
    47e2:	2301      	movs	r3, #1
    47e4:	4093      	lsls	r3, r2
    47e6:	001a      	movs	r2, r3
    47e8:	5c43      	ldrb	r3, [r0, r1]
    47ea:	4313      	orrs	r3, r2
    47ec:	5443      	strb	r3, [r0, r1]
}
    47ee:	4770      	bx	lr

000047f0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    47f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    47f2:	0080      	lsls	r0, r0, #2
    47f4:	4b62      	ldr	r3, [pc, #392]	; (4980 <_usart_interrupt_handler+0x190>)
    47f6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    47f8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    47fa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    47fc:	2b00      	cmp	r3, #0
    47fe:	d1fc      	bne.n	47fa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4800:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4802:	7da6      	ldrb	r6, [r4, #22]
    4804:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4806:	2330      	movs	r3, #48	; 0x30
    4808:	5ceb      	ldrb	r3, [r5, r3]
    480a:	2231      	movs	r2, #49	; 0x31
    480c:	5caf      	ldrb	r7, [r5, r2]
    480e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4810:	07f3      	lsls	r3, r6, #31
    4812:	d522      	bpl.n	485a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4814:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4816:	b29b      	uxth	r3, r3
    4818:	2b00      	cmp	r3, #0
    481a:	d01c      	beq.n	4856 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    481c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    481e:	7813      	ldrb	r3, [r2, #0]
    4820:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4822:	1c51      	adds	r1, r2, #1
    4824:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4826:	7969      	ldrb	r1, [r5, #5]
    4828:	2901      	cmp	r1, #1
    482a:	d00e      	beq.n	484a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    482c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    482e:	05db      	lsls	r3, r3, #23
    4830:	0ddb      	lsrs	r3, r3, #23
    4832:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4834:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4836:	3b01      	subs	r3, #1
    4838:	b29b      	uxth	r3, r3
    483a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    483c:	2b00      	cmp	r3, #0
    483e:	d10c      	bne.n	485a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4840:	3301      	adds	r3, #1
    4842:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4844:	3301      	adds	r3, #1
    4846:	75a3      	strb	r3, [r4, #22]
    4848:	e007      	b.n	485a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    484a:	7851      	ldrb	r1, [r2, #1]
    484c:	0209      	lsls	r1, r1, #8
    484e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4850:	3202      	adds	r2, #2
    4852:	62aa      	str	r2, [r5, #40]	; 0x28
    4854:	e7eb      	b.n	482e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4856:	2301      	movs	r3, #1
    4858:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    485a:	07b3      	lsls	r3, r6, #30
    485c:	d506      	bpl.n	486c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    485e:	2302      	movs	r3, #2
    4860:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4862:	2200      	movs	r2, #0
    4864:	3331      	adds	r3, #49	; 0x31
    4866:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4868:	07fb      	lsls	r3, r7, #31
    486a:	d41a      	bmi.n	48a2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    486c:	0773      	lsls	r3, r6, #29
    486e:	d565      	bpl.n	493c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4870:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4872:	b29b      	uxth	r3, r3
    4874:	2b00      	cmp	r3, #0
    4876:	d05f      	beq.n	4938 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4878:	8b63      	ldrh	r3, [r4, #26]
    487a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    487c:	071a      	lsls	r2, r3, #28
    487e:	d414      	bmi.n	48aa <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4880:	223f      	movs	r2, #63	; 0x3f
    4882:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4884:	2b00      	cmp	r3, #0
    4886:	d034      	beq.n	48f2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4888:	079a      	lsls	r2, r3, #30
    488a:	d511      	bpl.n	48b0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    488c:	221a      	movs	r2, #26
    488e:	2332      	movs	r3, #50	; 0x32
    4890:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4892:	3b30      	subs	r3, #48	; 0x30
    4894:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4896:	077b      	lsls	r3, r7, #29
    4898:	d550      	bpl.n	493c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    489a:	0028      	movs	r0, r5
    489c:	696b      	ldr	r3, [r5, #20]
    489e:	4798      	blx	r3
    48a0:	e04c      	b.n	493c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    48a2:	0028      	movs	r0, r5
    48a4:	68eb      	ldr	r3, [r5, #12]
    48a6:	4798      	blx	r3
    48a8:	e7e0      	b.n	486c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    48aa:	2237      	movs	r2, #55	; 0x37
    48ac:	4013      	ands	r3, r2
    48ae:	e7e9      	b.n	4884 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    48b0:	075a      	lsls	r2, r3, #29
    48b2:	d505      	bpl.n	48c0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    48b4:	221e      	movs	r2, #30
    48b6:	2332      	movs	r3, #50	; 0x32
    48b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    48ba:	3b2e      	subs	r3, #46	; 0x2e
    48bc:	8363      	strh	r3, [r4, #26]
    48be:	e7ea      	b.n	4896 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    48c0:	07da      	lsls	r2, r3, #31
    48c2:	d505      	bpl.n	48d0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    48c4:	2213      	movs	r2, #19
    48c6:	2332      	movs	r3, #50	; 0x32
    48c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    48ca:	3b31      	subs	r3, #49	; 0x31
    48cc:	8363      	strh	r3, [r4, #26]
    48ce:	e7e2      	b.n	4896 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    48d0:	06da      	lsls	r2, r3, #27
    48d2:	d505      	bpl.n	48e0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    48d4:	2242      	movs	r2, #66	; 0x42
    48d6:	2332      	movs	r3, #50	; 0x32
    48d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    48da:	3b22      	subs	r3, #34	; 0x22
    48dc:	8363      	strh	r3, [r4, #26]
    48de:	e7da      	b.n	4896 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    48e0:	2220      	movs	r2, #32
    48e2:	421a      	tst	r2, r3
    48e4:	d0d7      	beq.n	4896 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    48e6:	3221      	adds	r2, #33	; 0x21
    48e8:	2332      	movs	r3, #50	; 0x32
    48ea:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    48ec:	3b12      	subs	r3, #18
    48ee:	8363      	strh	r3, [r4, #26]
    48f0:	e7d1      	b.n	4896 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    48f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    48f4:	05db      	lsls	r3, r3, #23
    48f6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    48f8:	b2da      	uxtb	r2, r3
    48fa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    48fc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    48fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4900:	1c51      	adds	r1, r2, #1
    4902:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4904:	7969      	ldrb	r1, [r5, #5]
    4906:	2901      	cmp	r1, #1
    4908:	d010      	beq.n	492c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    490a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    490c:	3b01      	subs	r3, #1
    490e:	b29b      	uxth	r3, r3
    4910:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4912:	2b00      	cmp	r3, #0
    4914:	d112      	bne.n	493c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4916:	3304      	adds	r3, #4
    4918:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    491a:	2200      	movs	r2, #0
    491c:	332e      	adds	r3, #46	; 0x2e
    491e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4920:	07bb      	lsls	r3, r7, #30
    4922:	d50b      	bpl.n	493c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4924:	0028      	movs	r0, r5
    4926:	692b      	ldr	r3, [r5, #16]
    4928:	4798      	blx	r3
    492a:	e007      	b.n	493c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    492c:	0a1b      	lsrs	r3, r3, #8
    492e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4930:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4932:	3301      	adds	r3, #1
    4934:	626b      	str	r3, [r5, #36]	; 0x24
    4936:	e7e8      	b.n	490a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4938:	2304      	movs	r3, #4
    493a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    493c:	06f3      	lsls	r3, r6, #27
    493e:	d504      	bpl.n	494a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4940:	2310      	movs	r3, #16
    4942:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4944:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4946:	06fb      	lsls	r3, r7, #27
    4948:	d40e      	bmi.n	4968 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    494a:	06b3      	lsls	r3, r6, #26
    494c:	d504      	bpl.n	4958 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    494e:	2320      	movs	r3, #32
    4950:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4952:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4954:	073b      	lsls	r3, r7, #28
    4956:	d40b      	bmi.n	4970 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4958:	0733      	lsls	r3, r6, #28
    495a:	d504      	bpl.n	4966 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    495c:	2308      	movs	r3, #8
    495e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4960:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4962:	06bb      	lsls	r3, r7, #26
    4964:	d408      	bmi.n	4978 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4968:	0028      	movs	r0, r5
    496a:	69eb      	ldr	r3, [r5, #28]
    496c:	4798      	blx	r3
    496e:	e7ec      	b.n	494a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4970:	0028      	movs	r0, r5
    4972:	69ab      	ldr	r3, [r5, #24]
    4974:	4798      	blx	r3
    4976:	e7ef      	b.n	4958 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4978:	6a2b      	ldr	r3, [r5, #32]
    497a:	0028      	movs	r0, r5
    497c:	4798      	blx	r3
}
    497e:	e7f2      	b.n	4966 <_usart_interrupt_handler+0x176>
    4980:	20000d30 	.word	0x20000d30

00004984 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4984:	4770      	bx	lr
	...

00004988 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4988:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    498a:	4b0b      	ldr	r3, [pc, #44]	; (49b8 <_sercom_set_handler+0x30>)
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	2b00      	cmp	r3, #0
    4990:	d10e      	bne.n	49b0 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4992:	4c0a      	ldr	r4, [pc, #40]	; (49bc <_sercom_set_handler+0x34>)
    4994:	4d0a      	ldr	r5, [pc, #40]	; (49c0 <_sercom_set_handler+0x38>)
    4996:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    4998:	4b0a      	ldr	r3, [pc, #40]	; (49c4 <_sercom_set_handler+0x3c>)
    499a:	2200      	movs	r2, #0
    499c:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    499e:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    49a0:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    49a2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    49a4:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    49a6:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    49a8:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    49aa:	3201      	adds	r2, #1
    49ac:	4b02      	ldr	r3, [pc, #8]	; (49b8 <_sercom_set_handler+0x30>)
    49ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    49b0:	0080      	lsls	r0, r0, #2
    49b2:	4b02      	ldr	r3, [pc, #8]	; (49bc <_sercom_set_handler+0x34>)
    49b4:	50c1      	str	r1, [r0, r3]
}
    49b6:	bd30      	pop	{r4, r5, pc}
    49b8:	200009b8 	.word	0x200009b8
    49bc:	200009bc 	.word	0x200009bc
    49c0:	00004985 	.word	0x00004985
    49c4:	20000d30 	.word	0x20000d30

000049c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    49c8:	b510      	push	{r4, lr}
    49ca:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    49cc:	ac01      	add	r4, sp, #4
    49ce:	2309      	movs	r3, #9
    49d0:	7023      	strb	r3, [r4, #0]
    49d2:	3301      	adds	r3, #1
    49d4:	7063      	strb	r3, [r4, #1]
    49d6:	3301      	adds	r3, #1
    49d8:	70a3      	strb	r3, [r4, #2]
    49da:	3301      	adds	r3, #1
    49dc:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    49de:	4b02      	ldr	r3, [pc, #8]	; (49e8 <_sercom_get_interrupt_vector+0x20>)
    49e0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    49e2:	5620      	ldrsb	r0, [r4, r0]
}
    49e4:	b002      	add	sp, #8
    49e6:	bd10      	pop	{r4, pc}
    49e8:	00002d71 	.word	0x00002d71

000049ec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    49ec:	b510      	push	{r4, lr}
    49ee:	4b02      	ldr	r3, [pc, #8]	; (49f8 <SERCOM0_Handler+0xc>)
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	2000      	movs	r0, #0
    49f4:	4798      	blx	r3
    49f6:	bd10      	pop	{r4, pc}
    49f8:	200009bc 	.word	0x200009bc

000049fc <SERCOM1_Handler>:
    49fc:	b510      	push	{r4, lr}
    49fe:	4b02      	ldr	r3, [pc, #8]	; (4a08 <SERCOM1_Handler+0xc>)
    4a00:	685b      	ldr	r3, [r3, #4]
    4a02:	2001      	movs	r0, #1
    4a04:	4798      	blx	r3
    4a06:	bd10      	pop	{r4, pc}
    4a08:	200009bc 	.word	0x200009bc

00004a0c <SERCOM2_Handler>:
    4a0c:	b510      	push	{r4, lr}
    4a0e:	4b02      	ldr	r3, [pc, #8]	; (4a18 <SERCOM2_Handler+0xc>)
    4a10:	689b      	ldr	r3, [r3, #8]
    4a12:	2002      	movs	r0, #2
    4a14:	4798      	blx	r3
    4a16:	bd10      	pop	{r4, pc}
    4a18:	200009bc 	.word	0x200009bc

00004a1c <SERCOM3_Handler>:
    4a1c:	b510      	push	{r4, lr}
    4a1e:	4b02      	ldr	r3, [pc, #8]	; (4a28 <SERCOM3_Handler+0xc>)
    4a20:	68db      	ldr	r3, [r3, #12]
    4a22:	2003      	movs	r0, #3
    4a24:	4798      	blx	r3
    4a26:	bd10      	pop	{r4, pc}
    4a28:	200009bc 	.word	0x200009bc

00004a2c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    4a2c:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
    4a2e:	4b0b      	ldr	r3, [pc, #44]	; (4a5c <EVSYS_Handler+0x30>)
    4a30:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    4a32:	490b      	ldr	r1, [pc, #44]	; (4a60 <EVSYS_Handler+0x34>)
    4a34:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
    4a36:	6898      	ldr	r0, [r3, #8]
    4a38:	4302      	orrs	r2, r0
    4a3a:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    4a3c:	4b09      	ldr	r3, [pc, #36]	; (4a64 <EVSYS_Handler+0x38>)
    4a3e:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    4a40:	2c00      	cmp	r4, #0
    4a42:	d005      	beq.n	4a50 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
    4a44:	6820      	ldr	r0, [r4, #0]
    4a46:	6863      	ldr	r3, [r4, #4]
    4a48:	4798      	blx	r3
		current_hook = current_hook->next;
    4a4a:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
    4a4c:	2c00      	cmp	r4, #0
    4a4e:	d1f9      	bne.n	4a44 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    4a50:	4b02      	ldr	r3, [pc, #8]	; (4a5c <EVSYS_Handler+0x30>)
    4a52:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
    4a54:	689a      	ldr	r2, [r3, #8]
    4a56:	438a      	bics	r2, r1
    4a58:	609a      	str	r2, [r3, #8]
}
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	200001e8 	.word	0x200001e8
    4a60:	42000400 	.word	0x42000400
    4a64:	0f0fffff 	.word	0x0f0fffff

00004a68 <_system_events_init>:
    4a68:	4a06      	ldr	r2, [pc, #24]	; (4a84 <_system_events_init+0x1c>)
    4a6a:	6a13      	ldr	r3, [r2, #32]
    4a6c:	2102      	movs	r1, #2
    4a6e:	430b      	orrs	r3, r1
    4a70:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    4a72:	2201      	movs	r2, #1
    4a74:	4b04      	ldr	r3, [pc, #16]	; (4a88 <_system_events_init+0x20>)
    4a76:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    4a78:	0019      	movs	r1, r3
    4a7a:	780b      	ldrb	r3, [r1, #0]
    4a7c:	4213      	tst	r3, r2
    4a7e:	d1fc      	bne.n	4a7a <_system_events_init+0x12>
	}
}
    4a80:	4770      	bx	lr
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	40000400 	.word	0x40000400
    4a88:	42000400 	.word	0x42000400

00004a8c <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    4a8c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    4a8e:	0080      	lsls	r0, r0, #2
    4a90:	4b11      	ldr	r3, [pc, #68]	; (4ad8 <_ac_interrupt_handler+0x4c>)
    4a92:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    4a94:	6823      	ldr	r3, [r4, #0]
    4a96:	799d      	ldrb	r5, [r3, #6]
	interrupt_and_callback_status_mask =
    4a98:	7e22      	ldrb	r2, [r4, #24]
    4a9a:	7e63      	ldrb	r3, [r4, #25]
    4a9c:	4013      	ands	r3, r2
    4a9e:	401d      	ands	r5, r3
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    4aa0:	07eb      	lsls	r3, r5, #31
    4aa2:	d404      	bmi.n	4aae <_ac_interrupt_handler+0x22>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    4aa4:	07ab      	lsls	r3, r5, #30
    4aa6:	d409      	bmi.n	4abc <_ac_interrupt_handler+0x30>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    4aa8:	06eb      	lsls	r3, r5, #27
    4aaa:	d40e      	bmi.n	4aca <_ac_interrupt_handler+0x3e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    4aac:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    4aae:	0020      	movs	r0, r4
    4ab0:	6863      	ldr	r3, [r4, #4]
    4ab2:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    4ab4:	2301      	movs	r3, #1
    4ab6:	6822      	ldr	r2, [r4, #0]
    4ab8:	7193      	strb	r3, [r2, #6]
    4aba:	e7f3      	b.n	4aa4 <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    4abc:	0020      	movs	r0, r4
    4abe:	68a3      	ldr	r3, [r4, #8]
    4ac0:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    4ac2:	2302      	movs	r3, #2
    4ac4:	6822      	ldr	r2, [r4, #0]
    4ac6:	7193      	strb	r3, [r2, #6]
    4ac8:	e7ee      	b.n	4aa8 <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    4aca:	0020      	movs	r0, r4
    4acc:	6963      	ldr	r3, [r4, #20]
    4ace:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    4ad0:	6823      	ldr	r3, [r4, #0]
    4ad2:	2210      	movs	r2, #16
    4ad4:	719a      	strb	r2, [r3, #6]
}
    4ad6:	e7e9      	b.n	4aac <_ac_interrupt_handler+0x20>
    4ad8:	20000d40 	.word	0x20000d40

00004adc <AC_Handler>:
{
    4adc:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
    4ade:	2000      	movs	r0, #0
    4ae0:	4b01      	ldr	r3, [pc, #4]	; (4ae8 <AC_Handler+0xc>)
    4ae2:	4798      	blx	r3
}
    4ae4:	bd10      	pop	{r4, pc}
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	00004a8d 	.word	0x00004a8d

00004aec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4aec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4aee:	2000      	movs	r0, #0
    4af0:	4b08      	ldr	r3, [pc, #32]	; (4b14 <delay_init+0x28>)
    4af2:	4798      	blx	r3
    4af4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    4af6:	4c08      	ldr	r4, [pc, #32]	; (4b18 <delay_init+0x2c>)
    4af8:	21fa      	movs	r1, #250	; 0xfa
    4afa:	0089      	lsls	r1, r1, #2
    4afc:	47a0      	blx	r4
    4afe:	4b07      	ldr	r3, [pc, #28]	; (4b1c <delay_init+0x30>)
    4b00:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4b02:	4907      	ldr	r1, [pc, #28]	; (4b20 <delay_init+0x34>)
    4b04:	0028      	movs	r0, r5
    4b06:	47a0      	blx	r4
    4b08:	4b06      	ldr	r3, [pc, #24]	; (4b24 <delay_init+0x38>)
    4b0a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4b0c:	2205      	movs	r2, #5
    4b0e:	4b06      	ldr	r3, [pc, #24]	; (4b28 <delay_init+0x3c>)
    4b10:	601a      	str	r2, [r3, #0]
}
    4b12:	bd70      	pop	{r4, r5, r6, pc}
    4b14:	00005071 	.word	0x00005071
    4b18:	000054d9 	.word	0x000054d9
    4b1c:	200001fc 	.word	0x200001fc
    4b20:	000f4240 	.word	0x000f4240
    4b24:	20000200 	.word	0x20000200
    4b28:	e000e010 	.word	0xe000e010

00004b2c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4b2c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    4b2e:	4b08      	ldr	r3, [pc, #32]	; (4b50 <delay_cycles_ms+0x24>)
    4b30:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    4b32:	4a08      	ldr	r2, [pc, #32]	; (4b54 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4b34:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4b36:	2180      	movs	r1, #128	; 0x80
    4b38:	0249      	lsls	r1, r1, #9
	while (n--) {
    4b3a:	3801      	subs	r0, #1
    4b3c:	d307      	bcc.n	4b4e <delay_cycles_ms+0x22>
	if (n > 0) {
    4b3e:	2c00      	cmp	r4, #0
    4b40:	d0fb      	beq.n	4b3a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4b42:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4b44:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4b46:	6813      	ldr	r3, [r2, #0]
    4b48:	420b      	tst	r3, r1
    4b4a:	d0fc      	beq.n	4b46 <delay_cycles_ms+0x1a>
    4b4c:	e7f5      	b.n	4b3a <delay_cycles_ms+0xe>
	}
}
    4b4e:	bd30      	pop	{r4, r5, pc}
    4b50:	200001fc 	.word	0x200001fc
    4b54:	e000e010 	.word	0xe000e010

00004b58 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4b58:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b5a:	4b18      	ldr	r3, [pc, #96]	; (4bbc <nvm_read_buffer+0x64>)
    4b5c:	881d      	ldrh	r5, [r3, #0]
    4b5e:	885b      	ldrh	r3, [r3, #2]
    4b60:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    4b62:	2418      	movs	r4, #24
	if (source_address >
    4b64:	4283      	cmp	r3, r0
    4b66:	d201      	bcs.n	4b6c <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4b68:	0020      	movs	r0, r4
    4b6a:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    4b6c:	1e6b      	subs	r3, r5, #1
    4b6e:	4218      	tst	r0, r3
    4b70:	d1fa      	bne.n	4b68 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    4b72:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    4b74:	4295      	cmp	r5, r2
    4b76:	d3f7      	bcc.n	4b68 <nvm_read_buffer+0x10>
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4b78:	4b11      	ldr	r3, [pc, #68]	; (4bc0 <nvm_read_buffer+0x68>)
    4b7a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b7c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    4b7e:	07db      	lsls	r3, r3, #31
    4b80:	d5f2      	bpl.n	4b68 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b82:	2420      	movs	r4, #32
    4b84:	34ff      	adds	r4, #255	; 0xff
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <nvm_read_buffer+0x68>)
    4b88:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4b8a:	2a00      	cmp	r2, #0
    4b8c:	d014      	beq.n	4bb8 <nvm_read_buffer+0x60>
    4b8e:	2301      	movs	r3, #1
    4b90:	4398      	bics	r0, r3
    4b92:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4b94:	1e56      	subs	r6, r2, #1
    4b96:	e004      	b.n	4ba2 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    4b98:	3302      	adds	r3, #2
    4b9a:	b29b      	uxth	r3, r3
    4b9c:	3002      	adds	r0, #2
    4b9e:	429a      	cmp	r2, r3
    4ba0:	d908      	bls.n	4bb4 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    4ba2:	8804      	ldrh	r4, [r0, #0]
    4ba4:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    4ba6:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    4ba8:	42b3      	cmp	r3, r6
    4baa:	daf5      	bge.n	4b98 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    4bac:	18cd      	adds	r5, r1, r3
    4bae:	0a24      	lsrs	r4, r4, #8
    4bb0:	706c      	strb	r4, [r5, #1]
    4bb2:	e7f1      	b.n	4b98 <nvm_read_buffer+0x40>
	return STATUS_OK;
    4bb4:	2400      	movs	r4, #0
    4bb6:	e7d7      	b.n	4b68 <nvm_read_buffer+0x10>
    4bb8:	2400      	movs	r4, #0
    4bba:	e7d5      	b.n	4b68 <nvm_read_buffer+0x10>
    4bbc:	200009cc 	.word	0x200009cc
    4bc0:	41004000 	.word	0x41004000

00004bc4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4bc4:	b500      	push	{lr}
    4bc6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bc8:	ab01      	add	r3, sp, #4
    4bca:	2280      	movs	r2, #128	; 0x80
    4bcc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4bce:	780a      	ldrb	r2, [r1, #0]
    4bd0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4bd2:	784a      	ldrb	r2, [r1, #1]
    4bd4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4bd6:	788a      	ldrb	r2, [r1, #2]
    4bd8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4bda:	0019      	movs	r1, r3
    4bdc:	4b01      	ldr	r3, [pc, #4]	; (4be4 <port_pin_set_config+0x20>)
    4bde:	4798      	blx	r3
}
    4be0:	b003      	add	sp, #12
    4be2:	bd00      	pop	{pc}
    4be4:	000052b1 	.word	0x000052b1

00004be8 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
    4be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bea:	000d      	movs	r5, r1
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    4bec:	0184      	lsls	r4, r0, #6
    4bee:	4f05      	ldr	r7, [pc, #20]	; (4c04 <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    4bf0:	4e05      	ldr	r6, [pc, #20]	; (4c08 <_eeprom_emulator_nvm_read_page+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	1918      	adds	r0, r3, r4
		error_code = nvm_read_buffer(
    4bf6:	2240      	movs	r2, #64	; 0x40
    4bf8:	0029      	movs	r1, r5
    4bfa:	47b0      	blx	r6
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    4bfc:	2805      	cmp	r0, #5
    4bfe:	d0f8      	beq.n	4bf2 <_eeprom_emulator_nvm_read_page+0xa>
}
    4c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	200009d4 	.word	0x200009d4
    4c08:	00004b59 	.word	0x00004b59

00004c0c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    4c0c:	b510      	push	{r4, lr}
    4c0e:	b090      	sub	sp, #64	; 0x40
    4c10:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    4c12:	4b15      	ldr	r3, [pc, #84]	; (4c68 <eeprom_emulator_read_page+0x5c>)
    4c14:	781a      	ldrb	r2, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    4c16:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    4c18:	2a00      	cmp	r2, #0
    4c1a:	d102      	bne.n	4c22 <eeprom_emulator_read_page+0x16>
		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
	}

	return STATUS_OK;
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	b010      	add	sp, #64	; 0x40
    4c20:	bd10      	pop	{r4, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    4c22:	4b11      	ldr	r3, [pc, #68]	; (4c68 <eeprom_emulator_read_page+0x5c>)
    4c24:	7a9a      	ldrb	r2, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    4c26:	2318      	movs	r3, #24
	if (logical_page >= _eeprom_instance.logical_pages) {
    4c28:	4282      	cmp	r2, r0
    4c2a:	d9f7      	bls.n	4c1c <eeprom_emulator_read_page+0x10>
	if ((_eeprom_instance.cache_active == true) &&
    4c2c:	33b0      	adds	r3, #176	; 0xb0
    4c2e:	4a0e      	ldr	r2, [pc, #56]	; (4c68 <eeprom_emulator_read_page+0x5c>)
    4c30:	5cd3      	ldrb	r3, [r2, r3]
    4c32:	2b00      	cmp	r3, #0
    4c34:	d003      	beq.n	4c3e <eeprom_emulator_read_page+0x32>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    4c36:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    4c38:	5cd3      	ldrb	r3, [r2, r3]
    4c3a:	4283      	cmp	r3, r0
    4c3c:	d00c      	beq.n	4c58 <eeprom_emulator_read_page+0x4c>
				_eeprom_instance.page_map[logical_page], &temp);
    4c3e:	4b0a      	ldr	r3, [pc, #40]	; (4c68 <eeprom_emulator_read_page+0x5c>)
    4c40:	1818      	adds	r0, r3, r0
		_eeprom_emulator_nvm_read_page(
    4c42:	7ac0      	ldrb	r0, [r0, #11]
    4c44:	4669      	mov	r1, sp
    4c46:	4b09      	ldr	r3, [pc, #36]	; (4c6c <eeprom_emulator_read_page+0x60>)
    4c48:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    4c4a:	223c      	movs	r2, #60	; 0x3c
    4c4c:	a901      	add	r1, sp, #4
    4c4e:	0020      	movs	r0, r4
    4c50:	4b07      	ldr	r3, [pc, #28]	; (4c70 <eeprom_emulator_read_page+0x64>)
    4c52:	4798      	blx	r3
	return STATUS_OK;
    4c54:	2300      	movs	r3, #0
    4c56:	e7e1      	b.n	4c1c <eeprom_emulator_read_page+0x10>
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    4c58:	223c      	movs	r2, #60	; 0x3c
    4c5a:	4903      	ldr	r1, [pc, #12]	; (4c68 <eeprom_emulator_read_page+0x5c>)
    4c5c:	318c      	adds	r1, #140	; 0x8c
    4c5e:	0020      	movs	r0, r4
    4c60:	4b03      	ldr	r3, [pc, #12]	; (4c70 <eeprom_emulator_read_page+0x64>)
    4c62:	4798      	blx	r3
	return STATUS_OK;
    4c64:	2300      	movs	r3, #0
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    4c66:	e7d9      	b.n	4c1c <eeprom_emulator_read_page+0x10>
    4c68:	200009d4 	.word	0x200009d4
    4c6c:	00004be9 	.word	0x00004be9
    4c70:	00005707 	.word	0x00005707

00004c74 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4c74:	4770      	bx	lr
	...

00004c78 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4c78:	4b0c      	ldr	r3, [pc, #48]	; (4cac <cpu_irq_enter_critical+0x34>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d106      	bne.n	4c8e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4c80:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4c84:	2b00      	cmp	r3, #0
    4c86:	d007      	beq.n	4c98 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4c88:	2200      	movs	r2, #0
    4c8a:	4b09      	ldr	r3, [pc, #36]	; (4cb0 <cpu_irq_enter_critical+0x38>)
    4c8c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4c8e:	4a07      	ldr	r2, [pc, #28]	; (4cac <cpu_irq_enter_critical+0x34>)
    4c90:	6813      	ldr	r3, [r2, #0]
    4c92:	3301      	adds	r3, #1
    4c94:	6013      	str	r3, [r2, #0]
}
    4c96:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4c98:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4c9a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4c9e:	2200      	movs	r2, #0
    4ca0:	4b04      	ldr	r3, [pc, #16]	; (4cb4 <cpu_irq_enter_critical+0x3c>)
    4ca2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4ca4:	3201      	adds	r2, #1
    4ca6:	4b02      	ldr	r3, [pc, #8]	; (4cb0 <cpu_irq_enter_critical+0x38>)
    4ca8:	701a      	strb	r2, [r3, #0]
    4caa:	e7f0      	b.n	4c8e <cpu_irq_enter_critical+0x16>
    4cac:	20000aa0 	.word	0x20000aa0
    4cb0:	20000aa4 	.word	0x20000aa4
    4cb4:	20000204 	.word	0x20000204

00004cb8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4cb8:	4b08      	ldr	r3, [pc, #32]	; (4cdc <cpu_irq_leave_critical+0x24>)
    4cba:	681a      	ldr	r2, [r3, #0]
    4cbc:	3a01      	subs	r2, #1
    4cbe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4cc0:	681b      	ldr	r3, [r3, #0]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d109      	bne.n	4cda <cpu_irq_leave_critical+0x22>
    4cc6:	4b06      	ldr	r3, [pc, #24]	; (4ce0 <cpu_irq_leave_critical+0x28>)
    4cc8:	781b      	ldrb	r3, [r3, #0]
    4cca:	2b00      	cmp	r3, #0
    4ccc:	d005      	beq.n	4cda <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4cce:	2201      	movs	r2, #1
    4cd0:	4b04      	ldr	r3, [pc, #16]	; (4ce4 <cpu_irq_leave_critical+0x2c>)
    4cd2:	701a      	strb	r2, [r3, #0]
    4cd4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4cd8:	b662      	cpsie	i
	}
}
    4cda:	4770      	bx	lr
    4cdc:	20000aa0 	.word	0x20000aa0
    4ce0:	20000aa4 	.word	0x20000aa4
    4ce4:	20000204 	.word	0x20000204

00004ce8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ce8:	b510      	push	{r4, lr}
	switch (clock_source) {
    4cea:	2808      	cmp	r0, #8
    4cec:	d803      	bhi.n	4cf6 <system_clock_source_get_hz+0xe>
    4cee:	0080      	lsls	r0, r0, #2
    4cf0:	4b1c      	ldr	r3, [pc, #112]	; (4d64 <system_clock_source_get_hz+0x7c>)
    4cf2:	581b      	ldr	r3, [r3, r0]
    4cf4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4cf6:	2000      	movs	r0, #0
    4cf8:	e032      	b.n	4d60 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    4cfa:	4b1b      	ldr	r3, [pc, #108]	; (4d68 <system_clock_source_get_hz+0x80>)
    4cfc:	6918      	ldr	r0, [r3, #16]
    4cfe:	e02f      	b.n	4d60 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4d00:	4b1a      	ldr	r3, [pc, #104]	; (4d6c <system_clock_source_get_hz+0x84>)
    4d02:	6a1b      	ldr	r3, [r3, #32]
    4d04:	059b      	lsls	r3, r3, #22
    4d06:	0f9b      	lsrs	r3, r3, #30
    4d08:	4819      	ldr	r0, [pc, #100]	; (4d70 <system_clock_source_get_hz+0x88>)
    4d0a:	40d8      	lsrs	r0, r3
    4d0c:	e028      	b.n	4d60 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    4d0e:	4b16      	ldr	r3, [pc, #88]	; (4d68 <system_clock_source_get_hz+0x80>)
    4d10:	6958      	ldr	r0, [r3, #20]
    4d12:	e025      	b.n	4d60 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4d14:	4b14      	ldr	r3, [pc, #80]	; (4d68 <system_clock_source_get_hz+0x80>)
    4d16:	681b      	ldr	r3, [r3, #0]
			return 0;
    4d18:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4d1a:	079b      	lsls	r3, r3, #30
    4d1c:	d520      	bpl.n	4d60 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4d1e:	4913      	ldr	r1, [pc, #76]	; (4d6c <system_clock_source_get_hz+0x84>)
    4d20:	2210      	movs	r2, #16
    4d22:	68cb      	ldr	r3, [r1, #12]
    4d24:	421a      	tst	r2, r3
    4d26:	d0fc      	beq.n	4d22 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    4d28:	4b0f      	ldr	r3, [pc, #60]	; (4d68 <system_clock_source_get_hz+0x80>)
    4d2a:	681a      	ldr	r2, [r3, #0]
    4d2c:	2324      	movs	r3, #36	; 0x24
    4d2e:	4013      	ands	r3, r2
    4d30:	2b04      	cmp	r3, #4
    4d32:	d001      	beq.n	4d38 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    4d34:	480f      	ldr	r0, [pc, #60]	; (4d74 <system_clock_source_get_hz+0x8c>)
    4d36:	e013      	b.n	4d60 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d38:	2000      	movs	r0, #0
    4d3a:	4b0f      	ldr	r3, [pc, #60]	; (4d78 <system_clock_source_get_hz+0x90>)
    4d3c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4d3e:	4b0a      	ldr	r3, [pc, #40]	; (4d68 <system_clock_source_get_hz+0x80>)
    4d40:	689b      	ldr	r3, [r3, #8]
    4d42:	041b      	lsls	r3, r3, #16
    4d44:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d46:	4358      	muls	r0, r3
    4d48:	e00a      	b.n	4d60 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4d4a:	2350      	movs	r3, #80	; 0x50
    4d4c:	4a07      	ldr	r2, [pc, #28]	; (4d6c <system_clock_source_get_hz+0x84>)
    4d4e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4d50:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4d52:	075b      	lsls	r3, r3, #29
    4d54:	d504      	bpl.n	4d60 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    4d56:	4b04      	ldr	r3, [pc, #16]	; (4d68 <system_clock_source_get_hz+0x80>)
    4d58:	68d8      	ldr	r0, [r3, #12]
    4d5a:	e001      	b.n	4d60 <system_clock_source_get_hz+0x78>
		return 32768UL;
    4d5c:	2080      	movs	r0, #128	; 0x80
    4d5e:	0200      	lsls	r0, r0, #8
	}
}
    4d60:	bd10      	pop	{r4, pc}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	00007f70 	.word	0x00007f70
    4d68:	20000aa8 	.word	0x20000aa8
    4d6c:	40000800 	.word	0x40000800
    4d70:	007a1200 	.word	0x007a1200
    4d74:	02dc6c00 	.word	0x02dc6c00
    4d78:	000051d5 	.word	0x000051d5

00004d7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4d7c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4d7e:	490c      	ldr	r1, [pc, #48]	; (4db0 <system_clock_source_osc8m_set_config+0x34>)
    4d80:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4d82:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4d84:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4d86:	7840      	ldrb	r0, [r0, #1]
    4d88:	2201      	movs	r2, #1
    4d8a:	4010      	ands	r0, r2
    4d8c:	0180      	lsls	r0, r0, #6
    4d8e:	2640      	movs	r6, #64	; 0x40
    4d90:	43b3      	bics	r3, r6
    4d92:	4303      	orrs	r3, r0
    4d94:	402a      	ands	r2, r5
    4d96:	01d2      	lsls	r2, r2, #7
    4d98:	2080      	movs	r0, #128	; 0x80
    4d9a:	4383      	bics	r3, r0
    4d9c:	4313      	orrs	r3, r2
    4d9e:	2203      	movs	r2, #3
    4da0:	4022      	ands	r2, r4
    4da2:	0212      	lsls	r2, r2, #8
    4da4:	4803      	ldr	r0, [pc, #12]	; (4db4 <system_clock_source_osc8m_set_config+0x38>)
    4da6:	4003      	ands	r3, r0
    4da8:	4313      	orrs	r3, r2
    4daa:	620b      	str	r3, [r1, #32]
}
    4dac:	bd70      	pop	{r4, r5, r6, pc}
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	40000800 	.word	0x40000800
    4db4:	fffffcff 	.word	0xfffffcff

00004db8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4db8:	2808      	cmp	r0, #8
    4dba:	d803      	bhi.n	4dc4 <system_clock_source_enable+0xc>
    4dbc:	0080      	lsls	r0, r0, #2
    4dbe:	4b25      	ldr	r3, [pc, #148]	; (4e54 <system_clock_source_enable+0x9c>)
    4dc0:	581b      	ldr	r3, [r3, r0]
    4dc2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4dc4:	2017      	movs	r0, #23
    4dc6:	e044      	b.n	4e52 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4dc8:	4a23      	ldr	r2, [pc, #140]	; (4e58 <system_clock_source_enable+0xa0>)
    4dca:	6a13      	ldr	r3, [r2, #32]
    4dcc:	2102      	movs	r1, #2
    4dce:	430b      	orrs	r3, r1
    4dd0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4dd2:	2000      	movs	r0, #0
    4dd4:	e03d      	b.n	4e52 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4dd6:	4a20      	ldr	r2, [pc, #128]	; (4e58 <system_clock_source_enable+0xa0>)
    4dd8:	6993      	ldr	r3, [r2, #24]
    4dda:	2102      	movs	r1, #2
    4ddc:	430b      	orrs	r3, r1
    4dde:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4de0:	2000      	movs	r0, #0
		break;
    4de2:	e036      	b.n	4e52 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4de4:	4a1c      	ldr	r2, [pc, #112]	; (4e58 <system_clock_source_enable+0xa0>)
    4de6:	8a13      	ldrh	r3, [r2, #16]
    4de8:	2102      	movs	r1, #2
    4dea:	430b      	orrs	r3, r1
    4dec:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4dee:	2000      	movs	r0, #0
		break;
    4df0:	e02f      	b.n	4e52 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4df2:	4a19      	ldr	r2, [pc, #100]	; (4e58 <system_clock_source_enable+0xa0>)
    4df4:	8a93      	ldrh	r3, [r2, #20]
    4df6:	2102      	movs	r1, #2
    4df8:	430b      	orrs	r3, r1
    4dfa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4dfc:	2000      	movs	r0, #0
		break;
    4dfe:	e028      	b.n	4e52 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4e00:	4916      	ldr	r1, [pc, #88]	; (4e5c <system_clock_source_enable+0xa4>)
    4e02:	680b      	ldr	r3, [r1, #0]
    4e04:	2202      	movs	r2, #2
    4e06:	4313      	orrs	r3, r2
    4e08:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4e0a:	4b13      	ldr	r3, [pc, #76]	; (4e58 <system_clock_source_enable+0xa0>)
    4e0c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4e0e:	0019      	movs	r1, r3
    4e10:	320e      	adds	r2, #14
    4e12:	68cb      	ldr	r3, [r1, #12]
    4e14:	421a      	tst	r2, r3
    4e16:	d0fc      	beq.n	4e12 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4e18:	4a10      	ldr	r2, [pc, #64]	; (4e5c <system_clock_source_enable+0xa4>)
    4e1a:	6891      	ldr	r1, [r2, #8]
    4e1c:	4b0e      	ldr	r3, [pc, #56]	; (4e58 <system_clock_source_enable+0xa0>)
    4e1e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4e20:	6852      	ldr	r2, [r2, #4]
    4e22:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4e24:	2200      	movs	r2, #0
    4e26:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4e28:	0019      	movs	r1, r3
    4e2a:	3210      	adds	r2, #16
    4e2c:	68cb      	ldr	r3, [r1, #12]
    4e2e:	421a      	tst	r2, r3
    4e30:	d0fc      	beq.n	4e2c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4e32:	4b0a      	ldr	r3, [pc, #40]	; (4e5c <system_clock_source_enable+0xa4>)
    4e34:	681b      	ldr	r3, [r3, #0]
    4e36:	b29b      	uxth	r3, r3
    4e38:	4a07      	ldr	r2, [pc, #28]	; (4e58 <system_clock_source_enable+0xa0>)
    4e3a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4e3c:	2000      	movs	r0, #0
    4e3e:	e008      	b.n	4e52 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4e40:	4905      	ldr	r1, [pc, #20]	; (4e58 <system_clock_source_enable+0xa0>)
    4e42:	2244      	movs	r2, #68	; 0x44
    4e44:	5c8b      	ldrb	r3, [r1, r2]
    4e46:	2002      	movs	r0, #2
    4e48:	4303      	orrs	r3, r0
    4e4a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4e4c:	2000      	movs	r0, #0
		break;
    4e4e:	e000      	b.n	4e52 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4e50:	2000      	movs	r0, #0
}
    4e52:	4770      	bx	lr
    4e54:	00007f94 	.word	0x00007f94
    4e58:	40000800 	.word	0x40000800
    4e5c:	20000aa8 	.word	0x20000aa8

00004e60 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e62:	46c6      	mov	lr, r8
    4e64:	b500      	push	{lr}
    4e66:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4e68:	22c2      	movs	r2, #194	; 0xc2
    4e6a:	00d2      	lsls	r2, r2, #3
    4e6c:	4b2f      	ldr	r3, [pc, #188]	; (4f2c <system_clock_init+0xcc>)
    4e6e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4e70:	4a2f      	ldr	r2, [pc, #188]	; (4f30 <system_clock_init+0xd0>)
    4e72:	6853      	ldr	r3, [r2, #4]
    4e74:	211e      	movs	r1, #30
    4e76:	438b      	bics	r3, r1
    4e78:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4e7a:	2301      	movs	r3, #1
    4e7c:	466a      	mov	r2, sp
    4e7e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4e80:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4e82:	4d2c      	ldr	r5, [pc, #176]	; (4f34 <system_clock_init+0xd4>)
    4e84:	b2e0      	uxtb	r0, r4
    4e86:	4669      	mov	r1, sp
    4e88:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4e8a:	3401      	adds	r4, #1
    4e8c:	2c25      	cmp	r4, #37	; 0x25
    4e8e:	d1f9      	bne.n	4e84 <system_clock_init+0x24>
	config->on_demand       = true;
    4e90:	a803      	add	r0, sp, #12
    4e92:	2501      	movs	r5, #1
    4e94:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4e96:	2400      	movs	r4, #0
    4e98:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4e9a:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4e9c:	4b26      	ldr	r3, [pc, #152]	; (4f38 <system_clock_init+0xd8>)
    4e9e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4ea0:	2006      	movs	r0, #6
    4ea2:	4b26      	ldr	r3, [pc, #152]	; (4f3c <system_clock_init+0xdc>)
    4ea4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4ea6:	4b26      	ldr	r3, [pc, #152]	; (4f40 <system_clock_init+0xe0>)
    4ea8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    4eaa:	466b      	mov	r3, sp
    4eac:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4eae:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4eb0:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4eb2:	2303      	movs	r3, #3
    4eb4:	466a      	mov	r2, sp
    4eb6:	7013      	strb	r3, [r2, #0]
    4eb8:	3301      	adds	r3, #1
    4eba:	9301      	str	r3, [sp, #4]
    4ebc:	4669      	mov	r1, sp
    4ebe:	2003      	movs	r0, #3
    4ec0:	4f20      	ldr	r7, [pc, #128]	; (4f44 <system_clock_init+0xe4>)
    4ec2:	47b8      	blx	r7
    4ec4:	2003      	movs	r0, #3
    4ec6:	4e20      	ldr	r6, [pc, #128]	; (4f48 <system_clock_init+0xe8>)
    4ec8:	47b0      	blx	r6
	config->high_when_disabled = false;
    4eca:	466b      	mov	r3, sp
    4ecc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4ece:	2306      	movs	r3, #6
    4ed0:	4698      	mov	r8, r3
    4ed2:	466b      	mov	r3, sp
    4ed4:	4642      	mov	r2, r8
    4ed6:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4ed8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4eda:	725c      	strb	r4, [r3, #9]
    4edc:	2380      	movs	r3, #128	; 0x80
    4ede:	9301      	str	r3, [sp, #4]
    4ee0:	4669      	mov	r1, sp
    4ee2:	2004      	movs	r0, #4
    4ee4:	47b8      	blx	r7
    4ee6:	2004      	movs	r0, #4
    4ee8:	47b0      	blx	r6
	config->division_factor    = 1;
    4eea:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4eec:	466b      	mov	r3, sp
    4eee:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4ef0:	4642      	mov	r2, r8
    4ef2:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4ef4:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4ef6:	725c      	strb	r4, [r3, #9]
    4ef8:	4669      	mov	r1, sp
    4efa:	2005      	movs	r0, #5
    4efc:	47b8      	blx	r7
    4efe:	2005      	movs	r0, #5
    4f00:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    4f02:	4b12      	ldr	r3, [pc, #72]	; (4f4c <system_clock_init+0xec>)
    4f04:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4f06:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4f08:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4f0a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    4f0c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4f0e:	466b      	mov	r3, sp
    4f10:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4f12:	4642      	mov	r2, r8
    4f14:	701a      	strb	r2, [r3, #0]
	config->output_enable      = false;
    4f16:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4f18:	721d      	strb	r5, [r3, #8]
    4f1a:	4669      	mov	r1, sp
    4f1c:	2000      	movs	r0, #0
    4f1e:	47b8      	blx	r7
    4f20:	2000      	movs	r0, #0
    4f22:	47b0      	blx	r6
#endif
}
    4f24:	b004      	add	sp, #16
    4f26:	bc04      	pop	{r2}
    4f28:	4690      	mov	r8, r2
    4f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f2c:	40000800 	.word	0x40000800
    4f30:	41004000 	.word	0x41004000
    4f34:	00005189 	.word	0x00005189
    4f38:	00004d7d 	.word	0x00004d7d
    4f3c:	00004db9 	.word	0x00004db9
    4f40:	00004f51 	.word	0x00004f51
    4f44:	00004f75 	.word	0x00004f75
    4f48:	0000502d 	.word	0x0000502d
    4f4c:	40000400 	.word	0x40000400

00004f50 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4f50:	4a06      	ldr	r2, [pc, #24]	; (4f6c <system_gclk_init+0x1c>)
    4f52:	6993      	ldr	r3, [r2, #24]
    4f54:	2108      	movs	r1, #8
    4f56:	430b      	orrs	r3, r1
    4f58:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4f5a:	2201      	movs	r2, #1
    4f5c:	4b04      	ldr	r3, [pc, #16]	; (4f70 <system_gclk_init+0x20>)
    4f5e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4f60:	0019      	movs	r1, r3
    4f62:	780b      	ldrb	r3, [r1, #0]
    4f64:	4213      	tst	r3, r2
    4f66:	d1fc      	bne.n	4f62 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4f68:	4770      	bx	lr
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	40000400 	.word	0x40000400
    4f70:	40000c00 	.word	0x40000c00

00004f74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4f74:	b570      	push	{r4, r5, r6, lr}
    4f76:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4f78:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4f7a:	780d      	ldrb	r5, [r1, #0]
    4f7c:	022d      	lsls	r5, r5, #8
    4f7e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4f80:	784b      	ldrb	r3, [r1, #1]
    4f82:	2b00      	cmp	r3, #0
    4f84:	d002      	beq.n	4f8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4f86:	2380      	movs	r3, #128	; 0x80
    4f88:	02db      	lsls	r3, r3, #11
    4f8a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4f8c:	7a4b      	ldrb	r3, [r1, #9]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d002      	beq.n	4f98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4f92:	2380      	movs	r3, #128	; 0x80
    4f94:	031b      	lsls	r3, r3, #12
    4f96:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4f98:	6848      	ldr	r0, [r1, #4]
    4f9a:	2801      	cmp	r0, #1
    4f9c:	d910      	bls.n	4fc0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4f9e:	1e43      	subs	r3, r0, #1
    4fa0:	4218      	tst	r0, r3
    4fa2:	d134      	bne.n	500e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4fa4:	2802      	cmp	r0, #2
    4fa6:	d930      	bls.n	500a <system_gclk_gen_set_config+0x96>
    4fa8:	2302      	movs	r3, #2
    4faa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4fac:	3201      	adds	r2, #1
						mask <<= 1) {
    4fae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4fb0:	4298      	cmp	r0, r3
    4fb2:	d8fb      	bhi.n	4fac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4fb4:	0212      	lsls	r2, r2, #8
    4fb6:	4332      	orrs	r2, r6
    4fb8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4fba:	2380      	movs	r3, #128	; 0x80
    4fbc:	035b      	lsls	r3, r3, #13
    4fbe:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4fc0:	7a0b      	ldrb	r3, [r1, #8]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d002      	beq.n	4fcc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4fc6:	2380      	movs	r3, #128	; 0x80
    4fc8:	039b      	lsls	r3, r3, #14
    4fca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fcc:	4a13      	ldr	r2, [pc, #76]	; (501c <system_gclk_gen_set_config+0xa8>)
    4fce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4fd0:	b25b      	sxtb	r3, r3
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	dbfb      	blt.n	4fce <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    4fd6:	4b12      	ldr	r3, [pc, #72]	; (5020 <system_gclk_gen_set_config+0xac>)
    4fd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4fda:	4b12      	ldr	r3, [pc, #72]	; (5024 <system_gclk_gen_set_config+0xb0>)
    4fdc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fde:	4a0f      	ldr	r2, [pc, #60]	; (501c <system_gclk_gen_set_config+0xa8>)
    4fe0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4fe2:	b25b      	sxtb	r3, r3
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	dbfb      	blt.n	4fe0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4fe8:	4b0c      	ldr	r3, [pc, #48]	; (501c <system_gclk_gen_set_config+0xa8>)
    4fea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fec:	001a      	movs	r2, r3
    4fee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4ff0:	b25b      	sxtb	r3, r3
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	dbfb      	blt.n	4fee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4ff6:	4a09      	ldr	r2, [pc, #36]	; (501c <system_gclk_gen_set_config+0xa8>)
    4ff8:	6853      	ldr	r3, [r2, #4]
    4ffa:	2180      	movs	r1, #128	; 0x80
    4ffc:	0249      	lsls	r1, r1, #9
    4ffe:	400b      	ands	r3, r1
    5000:	431d      	orrs	r5, r3
    5002:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5004:	4b08      	ldr	r3, [pc, #32]	; (5028 <system_gclk_gen_set_config+0xb4>)
    5006:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5008:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    500a:	2200      	movs	r2, #0
    500c:	e7d2      	b.n	4fb4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    500e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5010:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5012:	2380      	movs	r3, #128	; 0x80
    5014:	029b      	lsls	r3, r3, #10
    5016:	431d      	orrs	r5, r3
    5018:	e7d2      	b.n	4fc0 <system_gclk_gen_set_config+0x4c>
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	40000c00 	.word	0x40000c00
    5020:	00004c79 	.word	0x00004c79
    5024:	40000c08 	.word	0x40000c08
    5028:	00004cb9 	.word	0x00004cb9

0000502c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    502c:	b510      	push	{r4, lr}
    502e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5030:	4a0b      	ldr	r2, [pc, #44]	; (5060 <system_gclk_gen_enable+0x34>)
    5032:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5034:	b25b      	sxtb	r3, r3
    5036:	2b00      	cmp	r3, #0
    5038:	dbfb      	blt.n	5032 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    503a:	4b0a      	ldr	r3, [pc, #40]	; (5064 <system_gclk_gen_enable+0x38>)
    503c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    503e:	4b0a      	ldr	r3, [pc, #40]	; (5068 <system_gclk_gen_enable+0x3c>)
    5040:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5042:	4a07      	ldr	r2, [pc, #28]	; (5060 <system_gclk_gen_enable+0x34>)
    5044:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5046:	b25b      	sxtb	r3, r3
    5048:	2b00      	cmp	r3, #0
    504a:	dbfb      	blt.n	5044 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    504c:	4a04      	ldr	r2, [pc, #16]	; (5060 <system_gclk_gen_enable+0x34>)
    504e:	6851      	ldr	r1, [r2, #4]
    5050:	2380      	movs	r3, #128	; 0x80
    5052:	025b      	lsls	r3, r3, #9
    5054:	430b      	orrs	r3, r1
    5056:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5058:	4b04      	ldr	r3, [pc, #16]	; (506c <system_gclk_gen_enable+0x40>)
    505a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    505c:	bd10      	pop	{r4, pc}
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	40000c00 	.word	0x40000c00
    5064:	00004c79 	.word	0x00004c79
    5068:	40000c04 	.word	0x40000c04
    506c:	00004cb9 	.word	0x00004cb9

00005070 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5070:	b570      	push	{r4, r5, r6, lr}
    5072:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5074:	4a1a      	ldr	r2, [pc, #104]	; (50e0 <system_gclk_gen_get_hz+0x70>)
    5076:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5078:	b25b      	sxtb	r3, r3
    507a:	2b00      	cmp	r3, #0
    507c:	dbfb      	blt.n	5076 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    507e:	4b19      	ldr	r3, [pc, #100]	; (50e4 <system_gclk_gen_get_hz+0x74>)
    5080:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5082:	4b19      	ldr	r3, [pc, #100]	; (50e8 <system_gclk_gen_get_hz+0x78>)
    5084:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5086:	4a16      	ldr	r2, [pc, #88]	; (50e0 <system_gclk_gen_get_hz+0x70>)
    5088:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    508a:	b25b      	sxtb	r3, r3
    508c:	2b00      	cmp	r3, #0
    508e:	dbfb      	blt.n	5088 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5090:	4e13      	ldr	r6, [pc, #76]	; (50e0 <system_gclk_gen_get_hz+0x70>)
    5092:	6870      	ldr	r0, [r6, #4]
    5094:	04c0      	lsls	r0, r0, #19
    5096:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5098:	4b14      	ldr	r3, [pc, #80]	; (50ec <system_gclk_gen_get_hz+0x7c>)
    509a:	4798      	blx	r3
    509c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    509e:	4b12      	ldr	r3, [pc, #72]	; (50e8 <system_gclk_gen_get_hz+0x78>)
    50a0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    50a2:	6876      	ldr	r6, [r6, #4]
    50a4:	02f6      	lsls	r6, r6, #11
    50a6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    50a8:	4b11      	ldr	r3, [pc, #68]	; (50f0 <system_gclk_gen_get_hz+0x80>)
    50aa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    50ac:	4a0c      	ldr	r2, [pc, #48]	; (50e0 <system_gclk_gen_get_hz+0x70>)
    50ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    50b0:	b25b      	sxtb	r3, r3
    50b2:	2b00      	cmp	r3, #0
    50b4:	dbfb      	blt.n	50ae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    50b6:	4b0a      	ldr	r3, [pc, #40]	; (50e0 <system_gclk_gen_get_hz+0x70>)
    50b8:	689c      	ldr	r4, [r3, #8]
    50ba:	0224      	lsls	r4, r4, #8
    50bc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    50be:	4b0d      	ldr	r3, [pc, #52]	; (50f4 <system_gclk_gen_get_hz+0x84>)
    50c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    50c2:	2e00      	cmp	r6, #0
    50c4:	d107      	bne.n	50d6 <system_gclk_gen_get_hz+0x66>
    50c6:	2c01      	cmp	r4, #1
    50c8:	d907      	bls.n	50da <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    50ca:	0021      	movs	r1, r4
    50cc:	0028      	movs	r0, r5
    50ce:	4b0a      	ldr	r3, [pc, #40]	; (50f8 <system_gclk_gen_get_hz+0x88>)
    50d0:	4798      	blx	r3
    50d2:	0005      	movs	r5, r0
    50d4:	e001      	b.n	50da <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    50d6:	3401      	adds	r4, #1
    50d8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    50da:	0028      	movs	r0, r5
    50dc:	bd70      	pop	{r4, r5, r6, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	40000c00 	.word	0x40000c00
    50e4:	00004c79 	.word	0x00004c79
    50e8:	40000c04 	.word	0x40000c04
    50ec:	00004ce9 	.word	0x00004ce9
    50f0:	40000c08 	.word	0x40000c08
    50f4:	00004cb9 	.word	0x00004cb9
    50f8:	000054d9 	.word	0x000054d9

000050fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    50fc:	b510      	push	{r4, lr}
    50fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5100:	4b06      	ldr	r3, [pc, #24]	; (511c <system_gclk_chan_enable+0x20>)
    5102:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5104:	4b06      	ldr	r3, [pc, #24]	; (5120 <system_gclk_chan_enable+0x24>)
    5106:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5108:	4a06      	ldr	r2, [pc, #24]	; (5124 <system_gclk_chan_enable+0x28>)
    510a:	8853      	ldrh	r3, [r2, #2]
    510c:	2180      	movs	r1, #128	; 0x80
    510e:	01c9      	lsls	r1, r1, #7
    5110:	430b      	orrs	r3, r1
    5112:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5114:	4b04      	ldr	r3, [pc, #16]	; (5128 <system_gclk_chan_enable+0x2c>)
    5116:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5118:	bd10      	pop	{r4, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	00004c79 	.word	0x00004c79
    5120:	40000c02 	.word	0x40000c02
    5124:	40000c00 	.word	0x40000c00
    5128:	00004cb9 	.word	0x00004cb9

0000512c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    512c:	b510      	push	{r4, lr}
    512e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5130:	4b0f      	ldr	r3, [pc, #60]	; (5170 <system_gclk_chan_disable+0x44>)
    5132:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5134:	4b0f      	ldr	r3, [pc, #60]	; (5174 <system_gclk_chan_disable+0x48>)
    5136:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5138:	4a0f      	ldr	r2, [pc, #60]	; (5178 <system_gclk_chan_disable+0x4c>)
    513a:	8853      	ldrh	r3, [r2, #2]
    513c:	051b      	lsls	r3, r3, #20
    513e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5140:	8853      	ldrh	r3, [r2, #2]
    5142:	490e      	ldr	r1, [pc, #56]	; (517c <system_gclk_chan_disable+0x50>)
    5144:	400b      	ands	r3, r1
    5146:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5148:	8853      	ldrh	r3, [r2, #2]
    514a:	490d      	ldr	r1, [pc, #52]	; (5180 <system_gclk_chan_disable+0x54>)
    514c:	400b      	ands	r3, r1
    514e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5150:	0011      	movs	r1, r2
    5152:	2280      	movs	r2, #128	; 0x80
    5154:	01d2      	lsls	r2, r2, #7
    5156:	884b      	ldrh	r3, [r1, #2]
    5158:	4213      	tst	r3, r2
    515a:	d1fc      	bne.n	5156 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    515c:	4906      	ldr	r1, [pc, #24]	; (5178 <system_gclk_chan_disable+0x4c>)
    515e:	884a      	ldrh	r2, [r1, #2]
    5160:	0203      	lsls	r3, r0, #8
    5162:	4806      	ldr	r0, [pc, #24]	; (517c <system_gclk_chan_disable+0x50>)
    5164:	4002      	ands	r2, r0
    5166:	4313      	orrs	r3, r2
    5168:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    516a:	4b06      	ldr	r3, [pc, #24]	; (5184 <system_gclk_chan_disable+0x58>)
    516c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    516e:	bd10      	pop	{r4, pc}
    5170:	00004c79 	.word	0x00004c79
    5174:	40000c02 	.word	0x40000c02
    5178:	40000c00 	.word	0x40000c00
    517c:	fffff0ff 	.word	0xfffff0ff
    5180:	ffffbfff 	.word	0xffffbfff
    5184:	00004cb9 	.word	0x00004cb9

00005188 <system_gclk_chan_set_config>:
{
    5188:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    518a:	780c      	ldrb	r4, [r1, #0]
    518c:	0224      	lsls	r4, r4, #8
    518e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5190:	4b02      	ldr	r3, [pc, #8]	; (519c <system_gclk_chan_set_config+0x14>)
    5192:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5194:	b2a4      	uxth	r4, r4
    5196:	4b02      	ldr	r3, [pc, #8]	; (51a0 <system_gclk_chan_set_config+0x18>)
    5198:	805c      	strh	r4, [r3, #2]
}
    519a:	bd10      	pop	{r4, pc}
    519c:	0000512d 	.word	0x0000512d
    51a0:	40000c00 	.word	0x40000c00

000051a4 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    51a4:	b510      	push	{r4, lr}
    51a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    51a8:	4b06      	ldr	r3, [pc, #24]	; (51c4 <system_gclk_chan_lock+0x20>)
    51aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    51ac:	4b06      	ldr	r3, [pc, #24]	; (51c8 <system_gclk_chan_lock+0x24>)
    51ae:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    51b0:	4a06      	ldr	r2, [pc, #24]	; (51cc <system_gclk_chan_lock+0x28>)
    51b2:	8853      	ldrh	r3, [r2, #2]
    51b4:	21c0      	movs	r1, #192	; 0xc0
    51b6:	0209      	lsls	r1, r1, #8
    51b8:	430b      	orrs	r3, r1
    51ba:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    51bc:	4b04      	ldr	r3, [pc, #16]	; (51d0 <system_gclk_chan_lock+0x2c>)
    51be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    51c0:	bd10      	pop	{r4, pc}
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	00004c79 	.word	0x00004c79
    51c8:	40000c02 	.word	0x40000c02
    51cc:	40000c00 	.word	0x40000c00
    51d0:	00004cb9 	.word	0x00004cb9

000051d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    51d4:	b510      	push	{r4, lr}
    51d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    51d8:	4b06      	ldr	r3, [pc, #24]	; (51f4 <system_gclk_chan_get_hz+0x20>)
    51da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    51dc:	4b06      	ldr	r3, [pc, #24]	; (51f8 <system_gclk_chan_get_hz+0x24>)
    51de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    51e0:	4b06      	ldr	r3, [pc, #24]	; (51fc <system_gclk_chan_get_hz+0x28>)
    51e2:	885c      	ldrh	r4, [r3, #2]
    51e4:	0524      	lsls	r4, r4, #20
    51e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    51e8:	4b05      	ldr	r3, [pc, #20]	; (5200 <system_gclk_chan_get_hz+0x2c>)
    51ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    51ec:	0020      	movs	r0, r4
    51ee:	4b05      	ldr	r3, [pc, #20]	; (5204 <system_gclk_chan_get_hz+0x30>)
    51f0:	4798      	blx	r3
}
    51f2:	bd10      	pop	{r4, pc}
    51f4:	00004c79 	.word	0x00004c79
    51f8:	40000c02 	.word	0x40000c02
    51fc:	40000c00 	.word	0x40000c00
    5200:	00004cb9 	.word	0x00004cb9
    5204:	00005071 	.word	0x00005071

00005208 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5208:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    520a:	78d3      	ldrb	r3, [r2, #3]
    520c:	2b00      	cmp	r3, #0
    520e:	d135      	bne.n	527c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5210:	7813      	ldrb	r3, [r2, #0]
    5212:	2b80      	cmp	r3, #128	; 0x80
    5214:	d029      	beq.n	526a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5216:	061b      	lsls	r3, r3, #24
    5218:	2480      	movs	r4, #128	; 0x80
    521a:	0264      	lsls	r4, r4, #9
    521c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    521e:	7854      	ldrb	r4, [r2, #1]
    5220:	2502      	movs	r5, #2
    5222:	43ac      	bics	r4, r5
    5224:	d106      	bne.n	5234 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5226:	7894      	ldrb	r4, [r2, #2]
    5228:	2c00      	cmp	r4, #0
    522a:	d120      	bne.n	526e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    522c:	2480      	movs	r4, #128	; 0x80
    522e:	02a4      	lsls	r4, r4, #10
    5230:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5232:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5234:	7854      	ldrb	r4, [r2, #1]
    5236:	3c01      	subs	r4, #1
    5238:	2c01      	cmp	r4, #1
    523a:	d91c      	bls.n	5276 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    523c:	040d      	lsls	r5, r1, #16
    523e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5240:	24a0      	movs	r4, #160	; 0xa0
    5242:	05e4      	lsls	r4, r4, #23
    5244:	432c      	orrs	r4, r5
    5246:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5248:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    524a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    524c:	24d0      	movs	r4, #208	; 0xd0
    524e:	0624      	lsls	r4, r4, #24
    5250:	432c      	orrs	r4, r5
    5252:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5254:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5256:	78d4      	ldrb	r4, [r2, #3]
    5258:	2c00      	cmp	r4, #0
    525a:	d122      	bne.n	52a2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    525c:	035b      	lsls	r3, r3, #13
    525e:	d51c      	bpl.n	529a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5260:	7893      	ldrb	r3, [r2, #2]
    5262:	2b01      	cmp	r3, #1
    5264:	d01e      	beq.n	52a4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5266:	6141      	str	r1, [r0, #20]
    5268:	e017      	b.n	529a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    526a:	2300      	movs	r3, #0
    526c:	e7d7      	b.n	521e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    526e:	24c0      	movs	r4, #192	; 0xc0
    5270:	02e4      	lsls	r4, r4, #11
    5272:	4323      	orrs	r3, r4
    5274:	e7dd      	b.n	5232 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5276:	4c0d      	ldr	r4, [pc, #52]	; (52ac <_system_pinmux_config+0xa4>)
    5278:	4023      	ands	r3, r4
    527a:	e7df      	b.n	523c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    527c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    527e:	040c      	lsls	r4, r1, #16
    5280:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5282:	23a0      	movs	r3, #160	; 0xa0
    5284:	05db      	lsls	r3, r3, #23
    5286:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5288:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    528a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    528c:	23d0      	movs	r3, #208	; 0xd0
    528e:	061b      	lsls	r3, r3, #24
    5290:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5292:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5294:	78d3      	ldrb	r3, [r2, #3]
    5296:	2b00      	cmp	r3, #0
    5298:	d103      	bne.n	52a2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    529a:	7853      	ldrb	r3, [r2, #1]
    529c:	3b01      	subs	r3, #1
    529e:	2b01      	cmp	r3, #1
    52a0:	d902      	bls.n	52a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    52a2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    52a4:	6181      	str	r1, [r0, #24]
    52a6:	e7f8      	b.n	529a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    52a8:	6081      	str	r1, [r0, #8]
}
    52aa:	e7fa      	b.n	52a2 <_system_pinmux_config+0x9a>
    52ac:	fffbffff 	.word	0xfffbffff

000052b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    52b0:	b510      	push	{r4, lr}
    52b2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    52b4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    52b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    52b8:	2900      	cmp	r1, #0
    52ba:	d104      	bne.n	52c6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    52bc:	0943      	lsrs	r3, r0, #5
    52be:	01db      	lsls	r3, r3, #7
    52c0:	4905      	ldr	r1, [pc, #20]	; (52d8 <system_pinmux_pin_set_config+0x28>)
    52c2:	468c      	mov	ip, r1
    52c4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    52c6:	241f      	movs	r4, #31
    52c8:	4020      	ands	r0, r4
    52ca:	2101      	movs	r1, #1
    52cc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    52ce:	0018      	movs	r0, r3
    52d0:	4b02      	ldr	r3, [pc, #8]	; (52dc <system_pinmux_pin_set_config+0x2c>)
    52d2:	4798      	blx	r3
}
    52d4:	bd10      	pop	{r4, pc}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	41004400 	.word	0x41004400
    52dc:	00005209 	.word	0x00005209

000052e0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    52e0:	4770      	bx	lr
	...

000052e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    52e4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    52e6:	4b05      	ldr	r3, [pc, #20]	; (52fc <system_init+0x18>)
    52e8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    52ea:	4b05      	ldr	r3, [pc, #20]	; (5300 <system_init+0x1c>)
    52ec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    52ee:	4b05      	ldr	r3, [pc, #20]	; (5304 <system_init+0x20>)
    52f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    52f2:	4b05      	ldr	r3, [pc, #20]	; (5308 <system_init+0x24>)
    52f4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    52f6:	4b05      	ldr	r3, [pc, #20]	; (530c <system_init+0x28>)
    52f8:	4798      	blx	r3
}
    52fa:	bd10      	pop	{r4, pc}
    52fc:	00004e61 	.word	0x00004e61
    5300:	00004c75 	.word	0x00004c75
    5304:	00004a69 	.word	0x00004a69
    5308:	00002449 	.word	0x00002449
    530c:	000052e1 	.word	0x000052e1

00005310 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5310:	e7fe      	b.n	5310 <Dummy_Handler>
	...

00005314 <Reset_Handler>:
{
    5314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    5316:	4a2a      	ldr	r2, [pc, #168]	; (53c0 <Reset_Handler+0xac>)
    5318:	4b2a      	ldr	r3, [pc, #168]	; (53c4 <Reset_Handler+0xb0>)
    531a:	429a      	cmp	r2, r3
    531c:	d011      	beq.n	5342 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    531e:	001a      	movs	r2, r3
    5320:	4b29      	ldr	r3, [pc, #164]	; (53c8 <Reset_Handler+0xb4>)
    5322:	429a      	cmp	r2, r3
    5324:	d20d      	bcs.n	5342 <Reset_Handler+0x2e>
    5326:	4a29      	ldr	r2, [pc, #164]	; (53cc <Reset_Handler+0xb8>)
    5328:	3303      	adds	r3, #3
    532a:	1a9b      	subs	r3, r3, r2
    532c:	089b      	lsrs	r3, r3, #2
    532e:	3301      	adds	r3, #1
    5330:	009b      	lsls	r3, r3, #2
    5332:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5334:	4823      	ldr	r0, [pc, #140]	; (53c4 <Reset_Handler+0xb0>)
    5336:	4922      	ldr	r1, [pc, #136]	; (53c0 <Reset_Handler+0xac>)
    5338:	588c      	ldr	r4, [r1, r2]
    533a:	5084      	str	r4, [r0, r2]
    533c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    533e:	429a      	cmp	r2, r3
    5340:	d1fa      	bne.n	5338 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5342:	4a23      	ldr	r2, [pc, #140]	; (53d0 <Reset_Handler+0xbc>)
    5344:	4b23      	ldr	r3, [pc, #140]	; (53d4 <Reset_Handler+0xc0>)
    5346:	429a      	cmp	r2, r3
    5348:	d20a      	bcs.n	5360 <Reset_Handler+0x4c>
    534a:	43d3      	mvns	r3, r2
    534c:	4921      	ldr	r1, [pc, #132]	; (53d4 <Reset_Handler+0xc0>)
    534e:	185b      	adds	r3, r3, r1
    5350:	2103      	movs	r1, #3
    5352:	438b      	bics	r3, r1
    5354:	3304      	adds	r3, #4
    5356:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5358:	2100      	movs	r1, #0
    535a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    535c:	4293      	cmp	r3, r2
    535e:	d1fc      	bne.n	535a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5360:	4a1d      	ldr	r2, [pc, #116]	; (53d8 <Reset_Handler+0xc4>)
    5362:	21ff      	movs	r1, #255	; 0xff
    5364:	4b1d      	ldr	r3, [pc, #116]	; (53dc <Reset_Handler+0xc8>)
    5366:	438b      	bics	r3, r1
    5368:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    536a:	39fd      	subs	r1, #253	; 0xfd
    536c:	2390      	movs	r3, #144	; 0x90
    536e:	005b      	lsls	r3, r3, #1
    5370:	4a1b      	ldr	r2, [pc, #108]	; (53e0 <Reset_Handler+0xcc>)
    5372:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5374:	4a1b      	ldr	r2, [pc, #108]	; (53e4 <Reset_Handler+0xd0>)
    5376:	78d3      	ldrb	r3, [r2, #3]
    5378:	2503      	movs	r5, #3
    537a:	43ab      	bics	r3, r5
    537c:	2402      	movs	r4, #2
    537e:	4323      	orrs	r3, r4
    5380:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5382:	78d3      	ldrb	r3, [r2, #3]
    5384:	270c      	movs	r7, #12
    5386:	43bb      	bics	r3, r7
    5388:	2608      	movs	r6, #8
    538a:	4333      	orrs	r3, r6
    538c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    538e:	4b16      	ldr	r3, [pc, #88]	; (53e8 <Reset_Handler+0xd4>)
    5390:	7b98      	ldrb	r0, [r3, #14]
    5392:	2230      	movs	r2, #48	; 0x30
    5394:	4390      	bics	r0, r2
    5396:	2220      	movs	r2, #32
    5398:	4310      	orrs	r0, r2
    539a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    539c:	7b99      	ldrb	r1, [r3, #14]
    539e:	43b9      	bics	r1, r7
    53a0:	4331      	orrs	r1, r6
    53a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    53a4:	7b9a      	ldrb	r2, [r3, #14]
    53a6:	43aa      	bics	r2, r5
    53a8:	4322      	orrs	r2, r4
    53aa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    53ac:	4a0f      	ldr	r2, [pc, #60]	; (53ec <Reset_Handler+0xd8>)
    53ae:	6853      	ldr	r3, [r2, #4]
    53b0:	2180      	movs	r1, #128	; 0x80
    53b2:	430b      	orrs	r3, r1
    53b4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    53b6:	4b0e      	ldr	r3, [pc, #56]	; (53f0 <Reset_Handler+0xdc>)
    53b8:	4798      	blx	r3
        main();
    53ba:	4b0e      	ldr	r3, [pc, #56]	; (53f4 <Reset_Handler+0xe0>)
    53bc:	4798      	blx	r3
    53be:	e7fe      	b.n	53be <Reset_Handler+0xaa>
    53c0:	000081b8 	.word	0x000081b8
    53c4:	20000000 	.word	0x20000000
    53c8:	200003d8 	.word	0x200003d8
    53cc:	20000004 	.word	0x20000004
    53d0:	200003e0 	.word	0x200003e0
    53d4:	20000d48 	.word	0x20000d48
    53d8:	e000ed00 	.word	0xe000ed00
    53dc:	00000000 	.word	0x00000000
    53e0:	41007000 	.word	0x41007000
    53e4:	41005000 	.word	0x41005000
    53e8:	41004800 	.word	0x41004800
    53ec:	41004000 	.word	0x41004000
    53f0:	000056a1 	.word	0x000056a1
    53f4:	00005441 	.word	0x00005441

000053f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    53f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    53fa:	4a06      	ldr	r2, [pc, #24]	; (5414 <_sbrk+0x1c>)
    53fc:	6812      	ldr	r2, [r2, #0]
    53fe:	2a00      	cmp	r2, #0
    5400:	d004      	beq.n	540c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5402:	4a04      	ldr	r2, [pc, #16]	; (5414 <_sbrk+0x1c>)
    5404:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5406:	18c3      	adds	r3, r0, r3
    5408:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    540a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    540c:	4902      	ldr	r1, [pc, #8]	; (5418 <_sbrk+0x20>)
    540e:	4a01      	ldr	r2, [pc, #4]	; (5414 <_sbrk+0x1c>)
    5410:	6011      	str	r1, [r2, #0]
    5412:	e7f6      	b.n	5402 <_sbrk+0xa>
    5414:	20000ac0 	.word	0x20000ac0
    5418:	20001d48 	.word	0x20001d48

0000541c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    541c:	2001      	movs	r0, #1
    541e:	4240      	negs	r0, r0
    5420:	4770      	bx	lr

00005422 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5422:	2380      	movs	r3, #128	; 0x80
    5424:	019b      	lsls	r3, r3, #6
    5426:	604b      	str	r3, [r1, #4]

	return 0;
}
    5428:	2000      	movs	r0, #0
    542a:	4770      	bx	lr

0000542c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    542c:	2001      	movs	r0, #1
    542e:	4770      	bx	lr

00005430 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5430:	2000      	movs	r0, #0
    5432:	4770      	bx	lr

00005434 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    5434:	be00      	bkpt	0x0000
    5436:	e7fe      	b.n	5436 <_exit+0x2>

00005438 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    5438:	4770      	bx	lr

0000543a <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    543a:	2001      	movs	r0, #1
    543c:	4240      	negs	r0, r0
    543e:	4770      	bx	lr

00005440 <main>:
#include "config.h"
#include "slpTimer.h"
#include "sysTimer.h"

int main (void)
{
    5440:	b570      	push	{r4, r5, r6, lr}
	system_init();
    5442:	4b15      	ldr	r3, [pc, #84]	; (5498 <main+0x58>)
    5444:	4798      	blx	r3
    delay_init();
    5446:	4b15      	ldr	r3, [pc, #84]	; (549c <main+0x5c>)
    5448:	4798      	blx	r3
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    544a:	4b15      	ldr	r3, [pc, #84]	; (54a0 <main+0x60>)
    544c:	2200      	movs	r2, #0
    544e:	701a      	strb	r2, [r3, #0]
    5450:	705a      	strb	r2, [r3, #1]
    5452:	709a      	strb	r2, [r3, #2]
    5454:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5456:	2401      	movs	r4, #1
    5458:	711c      	strb	r4, [r3, #4]
    sleepmgr_init();
    SYS_TimerInit();
    545a:	4b12      	ldr	r3, [pc, #72]	; (54a4 <main+0x64>)
    545c:	4798      	blx	r3
    SLP_TimerInit();
    545e:	4b12      	ldr	r3, [pc, #72]	; (54a8 <main+0x68>)
    5460:	4798      	blx	r3
 
//    app_eeprom_init();
    app_gen_io_init();  // Need to start the timers before we start the IO
    5462:	4b12      	ldr	r3, [pc, #72]	; (54ac <main+0x6c>)
    5464:	4798      	blx	r3
//     app_LED_init();
    app_daisychain_init();
    5466:	4b12      	ldr	r3, [pc, #72]	; (54b0 <main+0x70>)
    5468:	4798      	blx	r3
    app_uart_enable();
    546a:	4b12      	ldr	r3, [pc, #72]	; (54b4 <main+0x74>)
    546c:	4798      	blx	r3
    app_buzzer_init();
    546e:	4b12      	ldr	r3, [pc, #72]	; (54b8 <main+0x78>)
    5470:	4798      	blx	r3
// //    app_user_options_init();
    app_arm_init();
    5472:	4b12      	ldr	r3, [pc, #72]	; (54bc <main+0x7c>)
    5474:	4798      	blx	r3
//     app_bbu_init();
    cpu_irq_enable();
    5476:	4b12      	ldr	r3, [pc, #72]	; (54c0 <main+0x80>)
    5478:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    547a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    547e:	b662      	cpsie	i
    app_wdt_enable();
    5480:	4b10      	ldr	r3, [pc, #64]	; (54c4 <main+0x84>)
    5482:	4798      	blx	r3
    // After all the rest of the initialization, start the auto-arm
    // timer, just in case everything is ready.
    app_arm_reset_auto_arm_timer();
    5484:	4b10      	ldr	r3, [pc, #64]	; (54c8 <main+0x88>)
    5486:	4798      	blx	r3
    
    while(true)
    {
        app_wdt_kick();
    5488:	4e10      	ldr	r6, [pc, #64]	; (54cc <main+0x8c>)
        SYS_TimerTaskHandler();
    548a:	4d11      	ldr	r5, [pc, #68]	; (54d0 <main+0x90>)
        app_uart_task();
    548c:	4c11      	ldr	r4, [pc, #68]	; (54d4 <main+0x94>)
        app_wdt_kick();
    548e:	47b0      	blx	r6
        SYS_TimerTaskHandler();
    5490:	47a8      	blx	r5
        app_uart_task();
    5492:	47a0      	blx	r4
    5494:	e7fb      	b.n	548e <main+0x4e>
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	000052e5 	.word	0x000052e5
    549c:	00004aed 	.word	0x00004aed
    54a0:	20000c0c 	.word	0x20000c0c
    54a4:	000030a1 	.word	0x000030a1
    54a8:	00002f75 	.word	0x00002f75
    54ac:	00001419 	.word	0x00001419
    54b0:	00000a49 	.word	0x00000a49
    54b4:	00001901 	.word	0x00001901
    54b8:	00000829 	.word	0x00000829
    54bc:	00000381 	.word	0x00000381
    54c0:	20000204 	.word	0x20000204
    54c4:	000023dd 	.word	0x000023dd
    54c8:	0000014d 	.word	0x0000014d
    54cc:	000023c5 	.word	0x000023c5
    54d0:	000031c5 	.word	0x000031c5
    54d4:	00001c15 	.word	0x00001c15

000054d8 <__udivsi3>:
    54d8:	2200      	movs	r2, #0
    54da:	0843      	lsrs	r3, r0, #1
    54dc:	428b      	cmp	r3, r1
    54de:	d374      	bcc.n	55ca <__udivsi3+0xf2>
    54e0:	0903      	lsrs	r3, r0, #4
    54e2:	428b      	cmp	r3, r1
    54e4:	d35f      	bcc.n	55a6 <__udivsi3+0xce>
    54e6:	0a03      	lsrs	r3, r0, #8
    54e8:	428b      	cmp	r3, r1
    54ea:	d344      	bcc.n	5576 <__udivsi3+0x9e>
    54ec:	0b03      	lsrs	r3, r0, #12
    54ee:	428b      	cmp	r3, r1
    54f0:	d328      	bcc.n	5544 <__udivsi3+0x6c>
    54f2:	0c03      	lsrs	r3, r0, #16
    54f4:	428b      	cmp	r3, r1
    54f6:	d30d      	bcc.n	5514 <__udivsi3+0x3c>
    54f8:	22ff      	movs	r2, #255	; 0xff
    54fa:	0209      	lsls	r1, r1, #8
    54fc:	ba12      	rev	r2, r2
    54fe:	0c03      	lsrs	r3, r0, #16
    5500:	428b      	cmp	r3, r1
    5502:	d302      	bcc.n	550a <__udivsi3+0x32>
    5504:	1212      	asrs	r2, r2, #8
    5506:	0209      	lsls	r1, r1, #8
    5508:	d065      	beq.n	55d6 <__udivsi3+0xfe>
    550a:	0b03      	lsrs	r3, r0, #12
    550c:	428b      	cmp	r3, r1
    550e:	d319      	bcc.n	5544 <__udivsi3+0x6c>
    5510:	e000      	b.n	5514 <__udivsi3+0x3c>
    5512:	0a09      	lsrs	r1, r1, #8
    5514:	0bc3      	lsrs	r3, r0, #15
    5516:	428b      	cmp	r3, r1
    5518:	d301      	bcc.n	551e <__udivsi3+0x46>
    551a:	03cb      	lsls	r3, r1, #15
    551c:	1ac0      	subs	r0, r0, r3
    551e:	4152      	adcs	r2, r2
    5520:	0b83      	lsrs	r3, r0, #14
    5522:	428b      	cmp	r3, r1
    5524:	d301      	bcc.n	552a <__udivsi3+0x52>
    5526:	038b      	lsls	r3, r1, #14
    5528:	1ac0      	subs	r0, r0, r3
    552a:	4152      	adcs	r2, r2
    552c:	0b43      	lsrs	r3, r0, #13
    552e:	428b      	cmp	r3, r1
    5530:	d301      	bcc.n	5536 <__udivsi3+0x5e>
    5532:	034b      	lsls	r3, r1, #13
    5534:	1ac0      	subs	r0, r0, r3
    5536:	4152      	adcs	r2, r2
    5538:	0b03      	lsrs	r3, r0, #12
    553a:	428b      	cmp	r3, r1
    553c:	d301      	bcc.n	5542 <__udivsi3+0x6a>
    553e:	030b      	lsls	r3, r1, #12
    5540:	1ac0      	subs	r0, r0, r3
    5542:	4152      	adcs	r2, r2
    5544:	0ac3      	lsrs	r3, r0, #11
    5546:	428b      	cmp	r3, r1
    5548:	d301      	bcc.n	554e <__udivsi3+0x76>
    554a:	02cb      	lsls	r3, r1, #11
    554c:	1ac0      	subs	r0, r0, r3
    554e:	4152      	adcs	r2, r2
    5550:	0a83      	lsrs	r3, r0, #10
    5552:	428b      	cmp	r3, r1
    5554:	d301      	bcc.n	555a <__udivsi3+0x82>
    5556:	028b      	lsls	r3, r1, #10
    5558:	1ac0      	subs	r0, r0, r3
    555a:	4152      	adcs	r2, r2
    555c:	0a43      	lsrs	r3, r0, #9
    555e:	428b      	cmp	r3, r1
    5560:	d301      	bcc.n	5566 <__udivsi3+0x8e>
    5562:	024b      	lsls	r3, r1, #9
    5564:	1ac0      	subs	r0, r0, r3
    5566:	4152      	adcs	r2, r2
    5568:	0a03      	lsrs	r3, r0, #8
    556a:	428b      	cmp	r3, r1
    556c:	d301      	bcc.n	5572 <__udivsi3+0x9a>
    556e:	020b      	lsls	r3, r1, #8
    5570:	1ac0      	subs	r0, r0, r3
    5572:	4152      	adcs	r2, r2
    5574:	d2cd      	bcs.n	5512 <__udivsi3+0x3a>
    5576:	09c3      	lsrs	r3, r0, #7
    5578:	428b      	cmp	r3, r1
    557a:	d301      	bcc.n	5580 <__udivsi3+0xa8>
    557c:	01cb      	lsls	r3, r1, #7
    557e:	1ac0      	subs	r0, r0, r3
    5580:	4152      	adcs	r2, r2
    5582:	0983      	lsrs	r3, r0, #6
    5584:	428b      	cmp	r3, r1
    5586:	d301      	bcc.n	558c <__udivsi3+0xb4>
    5588:	018b      	lsls	r3, r1, #6
    558a:	1ac0      	subs	r0, r0, r3
    558c:	4152      	adcs	r2, r2
    558e:	0943      	lsrs	r3, r0, #5
    5590:	428b      	cmp	r3, r1
    5592:	d301      	bcc.n	5598 <__udivsi3+0xc0>
    5594:	014b      	lsls	r3, r1, #5
    5596:	1ac0      	subs	r0, r0, r3
    5598:	4152      	adcs	r2, r2
    559a:	0903      	lsrs	r3, r0, #4
    559c:	428b      	cmp	r3, r1
    559e:	d301      	bcc.n	55a4 <__udivsi3+0xcc>
    55a0:	010b      	lsls	r3, r1, #4
    55a2:	1ac0      	subs	r0, r0, r3
    55a4:	4152      	adcs	r2, r2
    55a6:	08c3      	lsrs	r3, r0, #3
    55a8:	428b      	cmp	r3, r1
    55aa:	d301      	bcc.n	55b0 <__udivsi3+0xd8>
    55ac:	00cb      	lsls	r3, r1, #3
    55ae:	1ac0      	subs	r0, r0, r3
    55b0:	4152      	adcs	r2, r2
    55b2:	0883      	lsrs	r3, r0, #2
    55b4:	428b      	cmp	r3, r1
    55b6:	d301      	bcc.n	55bc <__udivsi3+0xe4>
    55b8:	008b      	lsls	r3, r1, #2
    55ba:	1ac0      	subs	r0, r0, r3
    55bc:	4152      	adcs	r2, r2
    55be:	0843      	lsrs	r3, r0, #1
    55c0:	428b      	cmp	r3, r1
    55c2:	d301      	bcc.n	55c8 <__udivsi3+0xf0>
    55c4:	004b      	lsls	r3, r1, #1
    55c6:	1ac0      	subs	r0, r0, r3
    55c8:	4152      	adcs	r2, r2
    55ca:	1a41      	subs	r1, r0, r1
    55cc:	d200      	bcs.n	55d0 <__udivsi3+0xf8>
    55ce:	4601      	mov	r1, r0
    55d0:	4152      	adcs	r2, r2
    55d2:	4610      	mov	r0, r2
    55d4:	4770      	bx	lr
    55d6:	e7ff      	b.n	55d8 <__udivsi3+0x100>
    55d8:	b501      	push	{r0, lr}
    55da:	2000      	movs	r0, #0
    55dc:	f000 f806 	bl	55ec <__aeabi_idiv0>
    55e0:	bd02      	pop	{r1, pc}
    55e2:	46c0      	nop			; (mov r8, r8)

000055e4 <__aeabi_uidivmod>:
    55e4:	2900      	cmp	r1, #0
    55e6:	d0f7      	beq.n	55d8 <__udivsi3+0x100>
    55e8:	e776      	b.n	54d8 <__udivsi3>
    55ea:	4770      	bx	lr

000055ec <__aeabi_idiv0>:
    55ec:	4770      	bx	lr
    55ee:	46c0      	nop			; (mov r8, r8)

000055f0 <__aeabi_lmul>:
    55f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55f2:	46ce      	mov	lr, r9
    55f4:	4647      	mov	r7, r8
    55f6:	0415      	lsls	r5, r2, #16
    55f8:	0c2d      	lsrs	r5, r5, #16
    55fa:	002e      	movs	r6, r5
    55fc:	b580      	push	{r7, lr}
    55fe:	0407      	lsls	r7, r0, #16
    5600:	0c14      	lsrs	r4, r2, #16
    5602:	0c3f      	lsrs	r7, r7, #16
    5604:	4699      	mov	r9, r3
    5606:	0c03      	lsrs	r3, r0, #16
    5608:	437e      	muls	r6, r7
    560a:	435d      	muls	r5, r3
    560c:	4367      	muls	r7, r4
    560e:	4363      	muls	r3, r4
    5610:	197f      	adds	r7, r7, r5
    5612:	0c34      	lsrs	r4, r6, #16
    5614:	19e4      	adds	r4, r4, r7
    5616:	469c      	mov	ip, r3
    5618:	42a5      	cmp	r5, r4
    561a:	d903      	bls.n	5624 <__aeabi_lmul+0x34>
    561c:	2380      	movs	r3, #128	; 0x80
    561e:	025b      	lsls	r3, r3, #9
    5620:	4698      	mov	r8, r3
    5622:	44c4      	add	ip, r8
    5624:	464b      	mov	r3, r9
    5626:	4351      	muls	r1, r2
    5628:	4343      	muls	r3, r0
    562a:	0436      	lsls	r6, r6, #16
    562c:	0c36      	lsrs	r6, r6, #16
    562e:	0c25      	lsrs	r5, r4, #16
    5630:	0424      	lsls	r4, r4, #16
    5632:	4465      	add	r5, ip
    5634:	19a4      	adds	r4, r4, r6
    5636:	1859      	adds	r1, r3, r1
    5638:	1949      	adds	r1, r1, r5
    563a:	0020      	movs	r0, r4
    563c:	bc0c      	pop	{r2, r3}
    563e:	4690      	mov	r8, r2
    5640:	4699      	mov	r9, r3
    5642:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005644 <__assert_func>:
    5644:	b530      	push	{r4, r5, lr}
    5646:	001c      	movs	r4, r3
    5648:	4b09      	ldr	r3, [pc, #36]	; (5670 <__assert_func+0x2c>)
    564a:	0005      	movs	r5, r0
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	b085      	sub	sp, #20
    5650:	68d8      	ldr	r0, [r3, #12]
    5652:	4b08      	ldr	r3, [pc, #32]	; (5674 <__assert_func+0x30>)
    5654:	2a00      	cmp	r2, #0
    5656:	d101      	bne.n	565c <__assert_func+0x18>
    5658:	4b07      	ldr	r3, [pc, #28]	; (5678 <__assert_func+0x34>)
    565a:	001a      	movs	r2, r3
    565c:	9202      	str	r2, [sp, #8]
    565e:	9301      	str	r3, [sp, #4]
    5660:	9100      	str	r1, [sp, #0]
    5662:	002b      	movs	r3, r5
    5664:	0022      	movs	r2, r4
    5666:	4905      	ldr	r1, [pc, #20]	; (567c <__assert_func+0x38>)
    5668:	f000 f80a 	bl	5680 <fiprintf>
    566c:	f000 fda4 	bl	61b8 <abort>
    5670:	20000208 	.word	0x20000208
    5674:	00007fb8 	.word	0x00007fb8
    5678:	00007ff3 	.word	0x00007ff3
    567c:	00007fc5 	.word	0x00007fc5

00005680 <fiprintf>:
    5680:	b40e      	push	{r1, r2, r3}
    5682:	b503      	push	{r0, r1, lr}
    5684:	0001      	movs	r1, r0
    5686:	ab03      	add	r3, sp, #12
    5688:	4804      	ldr	r0, [pc, #16]	; (569c <fiprintf+0x1c>)
    568a:	cb04      	ldmia	r3!, {r2}
    568c:	6800      	ldr	r0, [r0, #0]
    568e:	9301      	str	r3, [sp, #4]
    5690:	f000 f872 	bl	5778 <_vfiprintf_r>
    5694:	b002      	add	sp, #8
    5696:	bc08      	pop	{r3}
    5698:	b003      	add	sp, #12
    569a:	4718      	bx	r3
    569c:	20000208 	.word	0x20000208

000056a0 <__libc_init_array>:
    56a0:	b570      	push	{r4, r5, r6, lr}
    56a2:	2600      	movs	r6, #0
    56a4:	4d0c      	ldr	r5, [pc, #48]	; (56d8 <__libc_init_array+0x38>)
    56a6:	4c0d      	ldr	r4, [pc, #52]	; (56dc <__libc_init_array+0x3c>)
    56a8:	1b64      	subs	r4, r4, r5
    56aa:	10a4      	asrs	r4, r4, #2
    56ac:	42a6      	cmp	r6, r4
    56ae:	d109      	bne.n	56c4 <__libc_init_array+0x24>
    56b0:	2600      	movs	r6, #0
    56b2:	f002 fd71 	bl	8198 <_init>
    56b6:	4d0a      	ldr	r5, [pc, #40]	; (56e0 <__libc_init_array+0x40>)
    56b8:	4c0a      	ldr	r4, [pc, #40]	; (56e4 <__libc_init_array+0x44>)
    56ba:	1b64      	subs	r4, r4, r5
    56bc:	10a4      	asrs	r4, r4, #2
    56be:	42a6      	cmp	r6, r4
    56c0:	d105      	bne.n	56ce <__libc_init_array+0x2e>
    56c2:	bd70      	pop	{r4, r5, r6, pc}
    56c4:	00b3      	lsls	r3, r6, #2
    56c6:	58eb      	ldr	r3, [r5, r3]
    56c8:	4798      	blx	r3
    56ca:	3601      	adds	r6, #1
    56cc:	e7ee      	b.n	56ac <__libc_init_array+0xc>
    56ce:	00b3      	lsls	r3, r6, #2
    56d0:	58eb      	ldr	r3, [r5, r3]
    56d2:	4798      	blx	r3
    56d4:	3601      	adds	r6, #1
    56d6:	e7f2      	b.n	56be <__libc_init_array+0x1e>
    56d8:	000081a4 	.word	0x000081a4
    56dc:	000081a4 	.word	0x000081a4
    56e0:	000081a4 	.word	0x000081a4
    56e4:	000081a8 	.word	0x000081a8

000056e8 <memcmp>:
    56e8:	b530      	push	{r4, r5, lr}
    56ea:	2400      	movs	r4, #0
    56ec:	42a2      	cmp	r2, r4
    56ee:	d101      	bne.n	56f4 <memcmp+0xc>
    56f0:	2000      	movs	r0, #0
    56f2:	e005      	b.n	5700 <memcmp+0x18>
    56f4:	5d03      	ldrb	r3, [r0, r4]
    56f6:	1c65      	adds	r5, r4, #1
    56f8:	5d0c      	ldrb	r4, [r1, r4]
    56fa:	42a3      	cmp	r3, r4
    56fc:	d001      	beq.n	5702 <memcmp+0x1a>
    56fe:	1b18      	subs	r0, r3, r4
    5700:	bd30      	pop	{r4, r5, pc}
    5702:	002c      	movs	r4, r5
    5704:	e7f2      	b.n	56ec <memcmp+0x4>

00005706 <memcpy>:
    5706:	2300      	movs	r3, #0
    5708:	b510      	push	{r4, lr}
    570a:	429a      	cmp	r2, r3
    570c:	d100      	bne.n	5710 <memcpy+0xa>
    570e:	bd10      	pop	{r4, pc}
    5710:	5ccc      	ldrb	r4, [r1, r3]
    5712:	54c4      	strb	r4, [r0, r3]
    5714:	3301      	adds	r3, #1
    5716:	e7f8      	b.n	570a <memcpy+0x4>

00005718 <memset>:
    5718:	0003      	movs	r3, r0
    571a:	1882      	adds	r2, r0, r2
    571c:	4293      	cmp	r3, r2
    571e:	d100      	bne.n	5722 <memset+0xa>
    5720:	4770      	bx	lr
    5722:	7019      	strb	r1, [r3, #0]
    5724:	3301      	adds	r3, #1
    5726:	e7f9      	b.n	571c <memset+0x4>

00005728 <__sfputc_r>:
    5728:	6893      	ldr	r3, [r2, #8]
    572a:	b510      	push	{r4, lr}
    572c:	3b01      	subs	r3, #1
    572e:	6093      	str	r3, [r2, #8]
    5730:	2b00      	cmp	r3, #0
    5732:	da05      	bge.n	5740 <__sfputc_r+0x18>
    5734:	6994      	ldr	r4, [r2, #24]
    5736:	42a3      	cmp	r3, r4
    5738:	db08      	blt.n	574c <__sfputc_r+0x24>
    573a:	b2cb      	uxtb	r3, r1
    573c:	2b0a      	cmp	r3, #10
    573e:	d005      	beq.n	574c <__sfputc_r+0x24>
    5740:	6813      	ldr	r3, [r2, #0]
    5742:	1c58      	adds	r0, r3, #1
    5744:	6010      	str	r0, [r2, #0]
    5746:	7019      	strb	r1, [r3, #0]
    5748:	b2c8      	uxtb	r0, r1
    574a:	bd10      	pop	{r4, pc}
    574c:	f000 fc68 	bl	6020 <__swbuf_r>
    5750:	e7fb      	b.n	574a <__sfputc_r+0x22>

00005752 <__sfputs_r>:
    5752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5754:	0006      	movs	r6, r0
    5756:	000f      	movs	r7, r1
    5758:	0014      	movs	r4, r2
    575a:	18d5      	adds	r5, r2, r3
    575c:	42ac      	cmp	r4, r5
    575e:	d101      	bne.n	5764 <__sfputs_r+0x12>
    5760:	2000      	movs	r0, #0
    5762:	e007      	b.n	5774 <__sfputs_r+0x22>
    5764:	7821      	ldrb	r1, [r4, #0]
    5766:	003a      	movs	r2, r7
    5768:	0030      	movs	r0, r6
    576a:	f7ff ffdd 	bl	5728 <__sfputc_r>
    576e:	3401      	adds	r4, #1
    5770:	1c43      	adds	r3, r0, #1
    5772:	d1f3      	bne.n	575c <__sfputs_r+0xa>
    5774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005778 <_vfiprintf_r>:
    5778:	b5f0      	push	{r4, r5, r6, r7, lr}
    577a:	b09f      	sub	sp, #124	; 0x7c
    577c:	0006      	movs	r6, r0
    577e:	000f      	movs	r7, r1
    5780:	0014      	movs	r4, r2
    5782:	9305      	str	r3, [sp, #20]
    5784:	2800      	cmp	r0, #0
    5786:	d004      	beq.n	5792 <_vfiprintf_r+0x1a>
    5788:	6983      	ldr	r3, [r0, #24]
    578a:	2b00      	cmp	r3, #0
    578c:	d101      	bne.n	5792 <_vfiprintf_r+0x1a>
    578e:	f000 fe13 	bl	63b8 <__sinit>
    5792:	4b7f      	ldr	r3, [pc, #508]	; (5990 <_vfiprintf_r+0x218>)
    5794:	429f      	cmp	r7, r3
    5796:	d15c      	bne.n	5852 <_vfiprintf_r+0xda>
    5798:	6877      	ldr	r7, [r6, #4]
    579a:	89bb      	ldrh	r3, [r7, #12]
    579c:	071b      	lsls	r3, r3, #28
    579e:	d562      	bpl.n	5866 <_vfiprintf_r+0xee>
    57a0:	693b      	ldr	r3, [r7, #16]
    57a2:	2b00      	cmp	r3, #0
    57a4:	d05f      	beq.n	5866 <_vfiprintf_r+0xee>
    57a6:	2300      	movs	r3, #0
    57a8:	ad06      	add	r5, sp, #24
    57aa:	616b      	str	r3, [r5, #20]
    57ac:	3320      	adds	r3, #32
    57ae:	766b      	strb	r3, [r5, #25]
    57b0:	3310      	adds	r3, #16
    57b2:	76ab      	strb	r3, [r5, #26]
    57b4:	9402      	str	r4, [sp, #8]
    57b6:	9c02      	ldr	r4, [sp, #8]
    57b8:	7823      	ldrb	r3, [r4, #0]
    57ba:	2b00      	cmp	r3, #0
    57bc:	d15d      	bne.n	587a <_vfiprintf_r+0x102>
    57be:	9b02      	ldr	r3, [sp, #8]
    57c0:	1ae3      	subs	r3, r4, r3
    57c2:	9304      	str	r3, [sp, #16]
    57c4:	d00d      	beq.n	57e2 <_vfiprintf_r+0x6a>
    57c6:	9b04      	ldr	r3, [sp, #16]
    57c8:	9a02      	ldr	r2, [sp, #8]
    57ca:	0039      	movs	r1, r7
    57cc:	0030      	movs	r0, r6
    57ce:	f7ff ffc0 	bl	5752 <__sfputs_r>
    57d2:	1c43      	adds	r3, r0, #1
    57d4:	d100      	bne.n	57d8 <_vfiprintf_r+0x60>
    57d6:	e0cc      	b.n	5972 <_vfiprintf_r+0x1fa>
    57d8:	696a      	ldr	r2, [r5, #20]
    57da:	9b04      	ldr	r3, [sp, #16]
    57dc:	4694      	mov	ip, r2
    57de:	4463      	add	r3, ip
    57e0:	616b      	str	r3, [r5, #20]
    57e2:	7823      	ldrb	r3, [r4, #0]
    57e4:	2b00      	cmp	r3, #0
    57e6:	d100      	bne.n	57ea <_vfiprintf_r+0x72>
    57e8:	e0c3      	b.n	5972 <_vfiprintf_r+0x1fa>
    57ea:	2201      	movs	r2, #1
    57ec:	2300      	movs	r3, #0
    57ee:	4252      	negs	r2, r2
    57f0:	606a      	str	r2, [r5, #4]
    57f2:	a902      	add	r1, sp, #8
    57f4:	3254      	adds	r2, #84	; 0x54
    57f6:	1852      	adds	r2, r2, r1
    57f8:	3401      	adds	r4, #1
    57fa:	602b      	str	r3, [r5, #0]
    57fc:	60eb      	str	r3, [r5, #12]
    57fe:	60ab      	str	r3, [r5, #8]
    5800:	7013      	strb	r3, [r2, #0]
    5802:	65ab      	str	r3, [r5, #88]	; 0x58
    5804:	7821      	ldrb	r1, [r4, #0]
    5806:	2205      	movs	r2, #5
    5808:	4862      	ldr	r0, [pc, #392]	; (5994 <_vfiprintf_r+0x21c>)
    580a:	f000 fef5 	bl	65f8 <memchr>
    580e:	1c63      	adds	r3, r4, #1
    5810:	469c      	mov	ip, r3
    5812:	2800      	cmp	r0, #0
    5814:	d135      	bne.n	5882 <_vfiprintf_r+0x10a>
    5816:	6829      	ldr	r1, [r5, #0]
    5818:	06cb      	lsls	r3, r1, #27
    581a:	d504      	bpl.n	5826 <_vfiprintf_r+0xae>
    581c:	2353      	movs	r3, #83	; 0x53
    581e:	aa02      	add	r2, sp, #8
    5820:	3020      	adds	r0, #32
    5822:	189b      	adds	r3, r3, r2
    5824:	7018      	strb	r0, [r3, #0]
    5826:	070b      	lsls	r3, r1, #28
    5828:	d504      	bpl.n	5834 <_vfiprintf_r+0xbc>
    582a:	2353      	movs	r3, #83	; 0x53
    582c:	202b      	movs	r0, #43	; 0x2b
    582e:	aa02      	add	r2, sp, #8
    5830:	189b      	adds	r3, r3, r2
    5832:	7018      	strb	r0, [r3, #0]
    5834:	7823      	ldrb	r3, [r4, #0]
    5836:	2b2a      	cmp	r3, #42	; 0x2a
    5838:	d02c      	beq.n	5894 <_vfiprintf_r+0x11c>
    583a:	2000      	movs	r0, #0
    583c:	210a      	movs	r1, #10
    583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5840:	7822      	ldrb	r2, [r4, #0]
    5842:	3a30      	subs	r2, #48	; 0x30
    5844:	2a09      	cmp	r2, #9
    5846:	d800      	bhi.n	584a <_vfiprintf_r+0xd2>
    5848:	e06b      	b.n	5922 <_vfiprintf_r+0x1aa>
    584a:	2800      	cmp	r0, #0
    584c:	d02a      	beq.n	58a4 <_vfiprintf_r+0x12c>
    584e:	9309      	str	r3, [sp, #36]	; 0x24
    5850:	e028      	b.n	58a4 <_vfiprintf_r+0x12c>
    5852:	4b51      	ldr	r3, [pc, #324]	; (5998 <_vfiprintf_r+0x220>)
    5854:	429f      	cmp	r7, r3
    5856:	d101      	bne.n	585c <_vfiprintf_r+0xe4>
    5858:	68b7      	ldr	r7, [r6, #8]
    585a:	e79e      	b.n	579a <_vfiprintf_r+0x22>
    585c:	4b4f      	ldr	r3, [pc, #316]	; (599c <_vfiprintf_r+0x224>)
    585e:	429f      	cmp	r7, r3
    5860:	d19b      	bne.n	579a <_vfiprintf_r+0x22>
    5862:	68f7      	ldr	r7, [r6, #12]
    5864:	e799      	b.n	579a <_vfiprintf_r+0x22>
    5866:	0039      	movs	r1, r7
    5868:	0030      	movs	r0, r6
    586a:	f000 fc2f 	bl	60cc <__swsetup_r>
    586e:	2800      	cmp	r0, #0
    5870:	d099      	beq.n	57a6 <_vfiprintf_r+0x2e>
    5872:	2001      	movs	r0, #1
    5874:	4240      	negs	r0, r0
    5876:	b01f      	add	sp, #124	; 0x7c
    5878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    587a:	2b25      	cmp	r3, #37	; 0x25
    587c:	d09f      	beq.n	57be <_vfiprintf_r+0x46>
    587e:	3401      	adds	r4, #1
    5880:	e79a      	b.n	57b8 <_vfiprintf_r+0x40>
    5882:	4b44      	ldr	r3, [pc, #272]	; (5994 <_vfiprintf_r+0x21c>)
    5884:	6829      	ldr	r1, [r5, #0]
    5886:	1ac0      	subs	r0, r0, r3
    5888:	2301      	movs	r3, #1
    588a:	4083      	lsls	r3, r0
    588c:	430b      	orrs	r3, r1
    588e:	602b      	str	r3, [r5, #0]
    5890:	4664      	mov	r4, ip
    5892:	e7b7      	b.n	5804 <_vfiprintf_r+0x8c>
    5894:	9b05      	ldr	r3, [sp, #20]
    5896:	1d18      	adds	r0, r3, #4
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	9005      	str	r0, [sp, #20]
    589c:	2b00      	cmp	r3, #0
    589e:	db3a      	blt.n	5916 <_vfiprintf_r+0x19e>
    58a0:	9309      	str	r3, [sp, #36]	; 0x24
    58a2:	4664      	mov	r4, ip
    58a4:	7823      	ldrb	r3, [r4, #0]
    58a6:	2b2e      	cmp	r3, #46	; 0x2e
    58a8:	d10b      	bne.n	58c2 <_vfiprintf_r+0x14a>
    58aa:	7863      	ldrb	r3, [r4, #1]
    58ac:	1c62      	adds	r2, r4, #1
    58ae:	2b2a      	cmp	r3, #42	; 0x2a
    58b0:	d13f      	bne.n	5932 <_vfiprintf_r+0x1ba>
    58b2:	9b05      	ldr	r3, [sp, #20]
    58b4:	3402      	adds	r4, #2
    58b6:	1d1a      	adds	r2, r3, #4
    58b8:	681b      	ldr	r3, [r3, #0]
    58ba:	9205      	str	r2, [sp, #20]
    58bc:	2b00      	cmp	r3, #0
    58be:	db35      	blt.n	592c <_vfiprintf_r+0x1b4>
    58c0:	9307      	str	r3, [sp, #28]
    58c2:	7821      	ldrb	r1, [r4, #0]
    58c4:	2203      	movs	r2, #3
    58c6:	4836      	ldr	r0, [pc, #216]	; (59a0 <_vfiprintf_r+0x228>)
    58c8:	f000 fe96 	bl	65f8 <memchr>
    58cc:	2800      	cmp	r0, #0
    58ce:	d007      	beq.n	58e0 <_vfiprintf_r+0x168>
    58d0:	4b33      	ldr	r3, [pc, #204]	; (59a0 <_vfiprintf_r+0x228>)
    58d2:	682a      	ldr	r2, [r5, #0]
    58d4:	1ac0      	subs	r0, r0, r3
    58d6:	2340      	movs	r3, #64	; 0x40
    58d8:	4083      	lsls	r3, r0
    58da:	4313      	orrs	r3, r2
    58dc:	602b      	str	r3, [r5, #0]
    58de:	3401      	adds	r4, #1
    58e0:	7821      	ldrb	r1, [r4, #0]
    58e2:	1c63      	adds	r3, r4, #1
    58e4:	2206      	movs	r2, #6
    58e6:	482f      	ldr	r0, [pc, #188]	; (59a4 <_vfiprintf_r+0x22c>)
    58e8:	9302      	str	r3, [sp, #8]
    58ea:	7629      	strb	r1, [r5, #24]
    58ec:	f000 fe84 	bl	65f8 <memchr>
    58f0:	2800      	cmp	r0, #0
    58f2:	d044      	beq.n	597e <_vfiprintf_r+0x206>
    58f4:	4b2c      	ldr	r3, [pc, #176]	; (59a8 <_vfiprintf_r+0x230>)
    58f6:	2b00      	cmp	r3, #0
    58f8:	d12f      	bne.n	595a <_vfiprintf_r+0x1e2>
    58fa:	6829      	ldr	r1, [r5, #0]
    58fc:	9b05      	ldr	r3, [sp, #20]
    58fe:	2207      	movs	r2, #7
    5900:	05c9      	lsls	r1, r1, #23
    5902:	d528      	bpl.n	5956 <_vfiprintf_r+0x1de>
    5904:	189b      	adds	r3, r3, r2
    5906:	4393      	bics	r3, r2
    5908:	3308      	adds	r3, #8
    590a:	9305      	str	r3, [sp, #20]
    590c:	696b      	ldr	r3, [r5, #20]
    590e:	9a03      	ldr	r2, [sp, #12]
    5910:	189b      	adds	r3, r3, r2
    5912:	616b      	str	r3, [r5, #20]
    5914:	e74f      	b.n	57b6 <_vfiprintf_r+0x3e>
    5916:	425b      	negs	r3, r3
    5918:	60eb      	str	r3, [r5, #12]
    591a:	2302      	movs	r3, #2
    591c:	430b      	orrs	r3, r1
    591e:	602b      	str	r3, [r5, #0]
    5920:	e7bf      	b.n	58a2 <_vfiprintf_r+0x12a>
    5922:	434b      	muls	r3, r1
    5924:	3401      	adds	r4, #1
    5926:	189b      	adds	r3, r3, r2
    5928:	2001      	movs	r0, #1
    592a:	e789      	b.n	5840 <_vfiprintf_r+0xc8>
    592c:	2301      	movs	r3, #1
    592e:	425b      	negs	r3, r3
    5930:	e7c6      	b.n	58c0 <_vfiprintf_r+0x148>
    5932:	2300      	movs	r3, #0
    5934:	0014      	movs	r4, r2
    5936:	200a      	movs	r0, #10
    5938:	001a      	movs	r2, r3
    593a:	606b      	str	r3, [r5, #4]
    593c:	7821      	ldrb	r1, [r4, #0]
    593e:	3930      	subs	r1, #48	; 0x30
    5940:	2909      	cmp	r1, #9
    5942:	d903      	bls.n	594c <_vfiprintf_r+0x1d4>
    5944:	2b00      	cmp	r3, #0
    5946:	d0bc      	beq.n	58c2 <_vfiprintf_r+0x14a>
    5948:	9207      	str	r2, [sp, #28]
    594a:	e7ba      	b.n	58c2 <_vfiprintf_r+0x14a>
    594c:	4342      	muls	r2, r0
    594e:	3401      	adds	r4, #1
    5950:	1852      	adds	r2, r2, r1
    5952:	2301      	movs	r3, #1
    5954:	e7f2      	b.n	593c <_vfiprintf_r+0x1c4>
    5956:	3307      	adds	r3, #7
    5958:	e7d5      	b.n	5906 <_vfiprintf_r+0x18e>
    595a:	ab05      	add	r3, sp, #20
    595c:	9300      	str	r3, [sp, #0]
    595e:	003a      	movs	r2, r7
    5960:	4b12      	ldr	r3, [pc, #72]	; (59ac <_vfiprintf_r+0x234>)
    5962:	0029      	movs	r1, r5
    5964:	0030      	movs	r0, r6
    5966:	e000      	b.n	596a <_vfiprintf_r+0x1f2>
    5968:	bf00      	nop
    596a:	9003      	str	r0, [sp, #12]
    596c:	9b03      	ldr	r3, [sp, #12]
    596e:	3301      	adds	r3, #1
    5970:	d1cc      	bne.n	590c <_vfiprintf_r+0x194>
    5972:	89bb      	ldrh	r3, [r7, #12]
    5974:	065b      	lsls	r3, r3, #25
    5976:	d500      	bpl.n	597a <_vfiprintf_r+0x202>
    5978:	e77b      	b.n	5872 <_vfiprintf_r+0xfa>
    597a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    597c:	e77b      	b.n	5876 <_vfiprintf_r+0xfe>
    597e:	ab05      	add	r3, sp, #20
    5980:	9300      	str	r3, [sp, #0]
    5982:	003a      	movs	r2, r7
    5984:	4b09      	ldr	r3, [pc, #36]	; (59ac <_vfiprintf_r+0x234>)
    5986:	0029      	movs	r1, r5
    5988:	0030      	movs	r0, r6
    598a:	f000 f87f 	bl	5a8c <_printf_i>
    598e:	e7ec      	b.n	596a <_vfiprintf_r+0x1f2>
    5990:	0000804c 	.word	0x0000804c
    5994:	00007ff8 	.word	0x00007ff8
    5998:	0000806c 	.word	0x0000806c
    599c:	0000802c 	.word	0x0000802c
    59a0:	00007ffe 	.word	0x00007ffe
    59a4:	00008002 	.word	0x00008002
    59a8:	00000000 	.word	0x00000000
    59ac:	00005753 	.word	0x00005753

000059b0 <_printf_common>:
    59b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    59b2:	0015      	movs	r5, r2
    59b4:	9301      	str	r3, [sp, #4]
    59b6:	688a      	ldr	r2, [r1, #8]
    59b8:	690b      	ldr	r3, [r1, #16]
    59ba:	9000      	str	r0, [sp, #0]
    59bc:	000c      	movs	r4, r1
    59be:	4293      	cmp	r3, r2
    59c0:	da00      	bge.n	59c4 <_printf_common+0x14>
    59c2:	0013      	movs	r3, r2
    59c4:	0022      	movs	r2, r4
    59c6:	602b      	str	r3, [r5, #0]
    59c8:	3243      	adds	r2, #67	; 0x43
    59ca:	7812      	ldrb	r2, [r2, #0]
    59cc:	2a00      	cmp	r2, #0
    59ce:	d001      	beq.n	59d4 <_printf_common+0x24>
    59d0:	3301      	adds	r3, #1
    59d2:	602b      	str	r3, [r5, #0]
    59d4:	6823      	ldr	r3, [r4, #0]
    59d6:	069b      	lsls	r3, r3, #26
    59d8:	d502      	bpl.n	59e0 <_printf_common+0x30>
    59da:	682b      	ldr	r3, [r5, #0]
    59dc:	3302      	adds	r3, #2
    59de:	602b      	str	r3, [r5, #0]
    59e0:	2706      	movs	r7, #6
    59e2:	6823      	ldr	r3, [r4, #0]
    59e4:	401f      	ands	r7, r3
    59e6:	d027      	beq.n	5a38 <_printf_common+0x88>
    59e8:	0023      	movs	r3, r4
    59ea:	3343      	adds	r3, #67	; 0x43
    59ec:	781b      	ldrb	r3, [r3, #0]
    59ee:	1e5a      	subs	r2, r3, #1
    59f0:	4193      	sbcs	r3, r2
    59f2:	6822      	ldr	r2, [r4, #0]
    59f4:	0692      	lsls	r2, r2, #26
    59f6:	d430      	bmi.n	5a5a <_printf_common+0xaa>
    59f8:	0022      	movs	r2, r4
    59fa:	9901      	ldr	r1, [sp, #4]
    59fc:	3243      	adds	r2, #67	; 0x43
    59fe:	9800      	ldr	r0, [sp, #0]
    5a00:	9e08      	ldr	r6, [sp, #32]
    5a02:	47b0      	blx	r6
    5a04:	1c43      	adds	r3, r0, #1
    5a06:	d025      	beq.n	5a54 <_printf_common+0xa4>
    5a08:	2306      	movs	r3, #6
    5a0a:	6820      	ldr	r0, [r4, #0]
    5a0c:	682a      	ldr	r2, [r5, #0]
    5a0e:	68e1      	ldr	r1, [r4, #12]
    5a10:	4003      	ands	r3, r0
    5a12:	2500      	movs	r5, #0
    5a14:	2b04      	cmp	r3, #4
    5a16:	d103      	bne.n	5a20 <_printf_common+0x70>
    5a18:	1a8d      	subs	r5, r1, r2
    5a1a:	43eb      	mvns	r3, r5
    5a1c:	17db      	asrs	r3, r3, #31
    5a1e:	401d      	ands	r5, r3
    5a20:	68a3      	ldr	r3, [r4, #8]
    5a22:	6922      	ldr	r2, [r4, #16]
    5a24:	4293      	cmp	r3, r2
    5a26:	dd01      	ble.n	5a2c <_printf_common+0x7c>
    5a28:	1a9b      	subs	r3, r3, r2
    5a2a:	18ed      	adds	r5, r5, r3
    5a2c:	2700      	movs	r7, #0
    5a2e:	42bd      	cmp	r5, r7
    5a30:	d120      	bne.n	5a74 <_printf_common+0xc4>
    5a32:	2000      	movs	r0, #0
    5a34:	e010      	b.n	5a58 <_printf_common+0xa8>
    5a36:	3701      	adds	r7, #1
    5a38:	68e3      	ldr	r3, [r4, #12]
    5a3a:	682a      	ldr	r2, [r5, #0]
    5a3c:	1a9b      	subs	r3, r3, r2
    5a3e:	429f      	cmp	r7, r3
    5a40:	dad2      	bge.n	59e8 <_printf_common+0x38>
    5a42:	0022      	movs	r2, r4
    5a44:	2301      	movs	r3, #1
    5a46:	3219      	adds	r2, #25
    5a48:	9901      	ldr	r1, [sp, #4]
    5a4a:	9800      	ldr	r0, [sp, #0]
    5a4c:	9e08      	ldr	r6, [sp, #32]
    5a4e:	47b0      	blx	r6
    5a50:	1c43      	adds	r3, r0, #1
    5a52:	d1f0      	bne.n	5a36 <_printf_common+0x86>
    5a54:	2001      	movs	r0, #1
    5a56:	4240      	negs	r0, r0
    5a58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a5a:	2030      	movs	r0, #48	; 0x30
    5a5c:	18e1      	adds	r1, r4, r3
    5a5e:	3143      	adds	r1, #67	; 0x43
    5a60:	7008      	strb	r0, [r1, #0]
    5a62:	0021      	movs	r1, r4
    5a64:	1c5a      	adds	r2, r3, #1
    5a66:	3145      	adds	r1, #69	; 0x45
    5a68:	7809      	ldrb	r1, [r1, #0]
    5a6a:	18a2      	adds	r2, r4, r2
    5a6c:	3243      	adds	r2, #67	; 0x43
    5a6e:	3302      	adds	r3, #2
    5a70:	7011      	strb	r1, [r2, #0]
    5a72:	e7c1      	b.n	59f8 <_printf_common+0x48>
    5a74:	0022      	movs	r2, r4
    5a76:	2301      	movs	r3, #1
    5a78:	321a      	adds	r2, #26
    5a7a:	9901      	ldr	r1, [sp, #4]
    5a7c:	9800      	ldr	r0, [sp, #0]
    5a7e:	9e08      	ldr	r6, [sp, #32]
    5a80:	47b0      	blx	r6
    5a82:	1c43      	adds	r3, r0, #1
    5a84:	d0e6      	beq.n	5a54 <_printf_common+0xa4>
    5a86:	3701      	adds	r7, #1
    5a88:	e7d1      	b.n	5a2e <_printf_common+0x7e>
	...

00005a8c <_printf_i>:
    5a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a8e:	b08b      	sub	sp, #44	; 0x2c
    5a90:	9206      	str	r2, [sp, #24]
    5a92:	000a      	movs	r2, r1
    5a94:	3243      	adds	r2, #67	; 0x43
    5a96:	9307      	str	r3, [sp, #28]
    5a98:	9005      	str	r0, [sp, #20]
    5a9a:	9204      	str	r2, [sp, #16]
    5a9c:	7e0a      	ldrb	r2, [r1, #24]
    5a9e:	000c      	movs	r4, r1
    5aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5aa2:	2a6e      	cmp	r2, #110	; 0x6e
    5aa4:	d100      	bne.n	5aa8 <_printf_i+0x1c>
    5aa6:	e08f      	b.n	5bc8 <_printf_i+0x13c>
    5aa8:	d817      	bhi.n	5ada <_printf_i+0x4e>
    5aaa:	2a63      	cmp	r2, #99	; 0x63
    5aac:	d02c      	beq.n	5b08 <_printf_i+0x7c>
    5aae:	d808      	bhi.n	5ac2 <_printf_i+0x36>
    5ab0:	2a00      	cmp	r2, #0
    5ab2:	d100      	bne.n	5ab6 <_printf_i+0x2a>
    5ab4:	e099      	b.n	5bea <_printf_i+0x15e>
    5ab6:	2a58      	cmp	r2, #88	; 0x58
    5ab8:	d054      	beq.n	5b64 <_printf_i+0xd8>
    5aba:	0026      	movs	r6, r4
    5abc:	3642      	adds	r6, #66	; 0x42
    5abe:	7032      	strb	r2, [r6, #0]
    5ac0:	e029      	b.n	5b16 <_printf_i+0x8a>
    5ac2:	2a64      	cmp	r2, #100	; 0x64
    5ac4:	d001      	beq.n	5aca <_printf_i+0x3e>
    5ac6:	2a69      	cmp	r2, #105	; 0x69
    5ac8:	d1f7      	bne.n	5aba <_printf_i+0x2e>
    5aca:	6821      	ldr	r1, [r4, #0]
    5acc:	681a      	ldr	r2, [r3, #0]
    5ace:	0608      	lsls	r0, r1, #24
    5ad0:	d523      	bpl.n	5b1a <_printf_i+0x8e>
    5ad2:	1d11      	adds	r1, r2, #4
    5ad4:	6019      	str	r1, [r3, #0]
    5ad6:	6815      	ldr	r5, [r2, #0]
    5ad8:	e025      	b.n	5b26 <_printf_i+0x9a>
    5ada:	2a73      	cmp	r2, #115	; 0x73
    5adc:	d100      	bne.n	5ae0 <_printf_i+0x54>
    5ade:	e088      	b.n	5bf2 <_printf_i+0x166>
    5ae0:	d808      	bhi.n	5af4 <_printf_i+0x68>
    5ae2:	2a6f      	cmp	r2, #111	; 0x6f
    5ae4:	d029      	beq.n	5b3a <_printf_i+0xae>
    5ae6:	2a70      	cmp	r2, #112	; 0x70
    5ae8:	d1e7      	bne.n	5aba <_printf_i+0x2e>
    5aea:	2220      	movs	r2, #32
    5aec:	6809      	ldr	r1, [r1, #0]
    5aee:	430a      	orrs	r2, r1
    5af0:	6022      	str	r2, [r4, #0]
    5af2:	e003      	b.n	5afc <_printf_i+0x70>
    5af4:	2a75      	cmp	r2, #117	; 0x75
    5af6:	d020      	beq.n	5b3a <_printf_i+0xae>
    5af8:	2a78      	cmp	r2, #120	; 0x78
    5afa:	d1de      	bne.n	5aba <_printf_i+0x2e>
    5afc:	0022      	movs	r2, r4
    5afe:	2178      	movs	r1, #120	; 0x78
    5b00:	3245      	adds	r2, #69	; 0x45
    5b02:	7011      	strb	r1, [r2, #0]
    5b04:	4a6c      	ldr	r2, [pc, #432]	; (5cb8 <_printf_i+0x22c>)
    5b06:	e030      	b.n	5b6a <_printf_i+0xde>
    5b08:	000e      	movs	r6, r1
    5b0a:	681a      	ldr	r2, [r3, #0]
    5b0c:	3642      	adds	r6, #66	; 0x42
    5b0e:	1d11      	adds	r1, r2, #4
    5b10:	6019      	str	r1, [r3, #0]
    5b12:	6813      	ldr	r3, [r2, #0]
    5b14:	7033      	strb	r3, [r6, #0]
    5b16:	2301      	movs	r3, #1
    5b18:	e079      	b.n	5c0e <_printf_i+0x182>
    5b1a:	0649      	lsls	r1, r1, #25
    5b1c:	d5d9      	bpl.n	5ad2 <_printf_i+0x46>
    5b1e:	1d11      	adds	r1, r2, #4
    5b20:	6019      	str	r1, [r3, #0]
    5b22:	2300      	movs	r3, #0
    5b24:	5ed5      	ldrsh	r5, [r2, r3]
    5b26:	2d00      	cmp	r5, #0
    5b28:	da03      	bge.n	5b32 <_printf_i+0xa6>
    5b2a:	232d      	movs	r3, #45	; 0x2d
    5b2c:	9a04      	ldr	r2, [sp, #16]
    5b2e:	426d      	negs	r5, r5
    5b30:	7013      	strb	r3, [r2, #0]
    5b32:	4b62      	ldr	r3, [pc, #392]	; (5cbc <_printf_i+0x230>)
    5b34:	270a      	movs	r7, #10
    5b36:	9303      	str	r3, [sp, #12]
    5b38:	e02f      	b.n	5b9a <_printf_i+0x10e>
    5b3a:	6820      	ldr	r0, [r4, #0]
    5b3c:	6819      	ldr	r1, [r3, #0]
    5b3e:	0605      	lsls	r5, r0, #24
    5b40:	d503      	bpl.n	5b4a <_printf_i+0xbe>
    5b42:	1d08      	adds	r0, r1, #4
    5b44:	6018      	str	r0, [r3, #0]
    5b46:	680d      	ldr	r5, [r1, #0]
    5b48:	e005      	b.n	5b56 <_printf_i+0xca>
    5b4a:	0640      	lsls	r0, r0, #25
    5b4c:	d5f9      	bpl.n	5b42 <_printf_i+0xb6>
    5b4e:	680d      	ldr	r5, [r1, #0]
    5b50:	1d08      	adds	r0, r1, #4
    5b52:	6018      	str	r0, [r3, #0]
    5b54:	b2ad      	uxth	r5, r5
    5b56:	4b59      	ldr	r3, [pc, #356]	; (5cbc <_printf_i+0x230>)
    5b58:	2708      	movs	r7, #8
    5b5a:	9303      	str	r3, [sp, #12]
    5b5c:	2a6f      	cmp	r2, #111	; 0x6f
    5b5e:	d018      	beq.n	5b92 <_printf_i+0x106>
    5b60:	270a      	movs	r7, #10
    5b62:	e016      	b.n	5b92 <_printf_i+0x106>
    5b64:	3145      	adds	r1, #69	; 0x45
    5b66:	700a      	strb	r2, [r1, #0]
    5b68:	4a54      	ldr	r2, [pc, #336]	; (5cbc <_printf_i+0x230>)
    5b6a:	9203      	str	r2, [sp, #12]
    5b6c:	681a      	ldr	r2, [r3, #0]
    5b6e:	6821      	ldr	r1, [r4, #0]
    5b70:	1d10      	adds	r0, r2, #4
    5b72:	6018      	str	r0, [r3, #0]
    5b74:	6815      	ldr	r5, [r2, #0]
    5b76:	0608      	lsls	r0, r1, #24
    5b78:	d522      	bpl.n	5bc0 <_printf_i+0x134>
    5b7a:	07cb      	lsls	r3, r1, #31
    5b7c:	d502      	bpl.n	5b84 <_printf_i+0xf8>
    5b7e:	2320      	movs	r3, #32
    5b80:	4319      	orrs	r1, r3
    5b82:	6021      	str	r1, [r4, #0]
    5b84:	2710      	movs	r7, #16
    5b86:	2d00      	cmp	r5, #0
    5b88:	d103      	bne.n	5b92 <_printf_i+0x106>
    5b8a:	2320      	movs	r3, #32
    5b8c:	6822      	ldr	r2, [r4, #0]
    5b8e:	439a      	bics	r2, r3
    5b90:	6022      	str	r2, [r4, #0]
    5b92:	0023      	movs	r3, r4
    5b94:	2200      	movs	r2, #0
    5b96:	3343      	adds	r3, #67	; 0x43
    5b98:	701a      	strb	r2, [r3, #0]
    5b9a:	6863      	ldr	r3, [r4, #4]
    5b9c:	60a3      	str	r3, [r4, #8]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	db5c      	blt.n	5c5c <_printf_i+0x1d0>
    5ba2:	2204      	movs	r2, #4
    5ba4:	6821      	ldr	r1, [r4, #0]
    5ba6:	4391      	bics	r1, r2
    5ba8:	6021      	str	r1, [r4, #0]
    5baa:	2d00      	cmp	r5, #0
    5bac:	d158      	bne.n	5c60 <_printf_i+0x1d4>
    5bae:	9e04      	ldr	r6, [sp, #16]
    5bb0:	2b00      	cmp	r3, #0
    5bb2:	d064      	beq.n	5c7e <_printf_i+0x1f2>
    5bb4:	0026      	movs	r6, r4
    5bb6:	9b03      	ldr	r3, [sp, #12]
    5bb8:	3642      	adds	r6, #66	; 0x42
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	7033      	strb	r3, [r6, #0]
    5bbe:	e05e      	b.n	5c7e <_printf_i+0x1f2>
    5bc0:	0648      	lsls	r0, r1, #25
    5bc2:	d5da      	bpl.n	5b7a <_printf_i+0xee>
    5bc4:	b2ad      	uxth	r5, r5
    5bc6:	e7d8      	b.n	5b7a <_printf_i+0xee>
    5bc8:	6809      	ldr	r1, [r1, #0]
    5bca:	681a      	ldr	r2, [r3, #0]
    5bcc:	0608      	lsls	r0, r1, #24
    5bce:	d505      	bpl.n	5bdc <_printf_i+0x150>
    5bd0:	1d11      	adds	r1, r2, #4
    5bd2:	6019      	str	r1, [r3, #0]
    5bd4:	6813      	ldr	r3, [r2, #0]
    5bd6:	6962      	ldr	r2, [r4, #20]
    5bd8:	601a      	str	r2, [r3, #0]
    5bda:	e006      	b.n	5bea <_printf_i+0x15e>
    5bdc:	0649      	lsls	r1, r1, #25
    5bde:	d5f7      	bpl.n	5bd0 <_printf_i+0x144>
    5be0:	1d11      	adds	r1, r2, #4
    5be2:	6019      	str	r1, [r3, #0]
    5be4:	6813      	ldr	r3, [r2, #0]
    5be6:	8aa2      	ldrh	r2, [r4, #20]
    5be8:	801a      	strh	r2, [r3, #0]
    5bea:	2300      	movs	r3, #0
    5bec:	9e04      	ldr	r6, [sp, #16]
    5bee:	6123      	str	r3, [r4, #16]
    5bf0:	e054      	b.n	5c9c <_printf_i+0x210>
    5bf2:	681a      	ldr	r2, [r3, #0]
    5bf4:	1d11      	adds	r1, r2, #4
    5bf6:	6019      	str	r1, [r3, #0]
    5bf8:	6816      	ldr	r6, [r2, #0]
    5bfa:	2100      	movs	r1, #0
    5bfc:	6862      	ldr	r2, [r4, #4]
    5bfe:	0030      	movs	r0, r6
    5c00:	f000 fcfa 	bl	65f8 <memchr>
    5c04:	2800      	cmp	r0, #0
    5c06:	d001      	beq.n	5c0c <_printf_i+0x180>
    5c08:	1b80      	subs	r0, r0, r6
    5c0a:	6060      	str	r0, [r4, #4]
    5c0c:	6863      	ldr	r3, [r4, #4]
    5c0e:	6123      	str	r3, [r4, #16]
    5c10:	2300      	movs	r3, #0
    5c12:	9a04      	ldr	r2, [sp, #16]
    5c14:	7013      	strb	r3, [r2, #0]
    5c16:	e041      	b.n	5c9c <_printf_i+0x210>
    5c18:	6923      	ldr	r3, [r4, #16]
    5c1a:	0032      	movs	r2, r6
    5c1c:	9906      	ldr	r1, [sp, #24]
    5c1e:	9805      	ldr	r0, [sp, #20]
    5c20:	9d07      	ldr	r5, [sp, #28]
    5c22:	47a8      	blx	r5
    5c24:	1c43      	adds	r3, r0, #1
    5c26:	d043      	beq.n	5cb0 <_printf_i+0x224>
    5c28:	6823      	ldr	r3, [r4, #0]
    5c2a:	2500      	movs	r5, #0
    5c2c:	079b      	lsls	r3, r3, #30
    5c2e:	d40f      	bmi.n	5c50 <_printf_i+0x1c4>
    5c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c32:	68e0      	ldr	r0, [r4, #12]
    5c34:	4298      	cmp	r0, r3
    5c36:	da3d      	bge.n	5cb4 <_printf_i+0x228>
    5c38:	0018      	movs	r0, r3
    5c3a:	e03b      	b.n	5cb4 <_printf_i+0x228>
    5c3c:	0022      	movs	r2, r4
    5c3e:	2301      	movs	r3, #1
    5c40:	3219      	adds	r2, #25
    5c42:	9906      	ldr	r1, [sp, #24]
    5c44:	9805      	ldr	r0, [sp, #20]
    5c46:	9e07      	ldr	r6, [sp, #28]
    5c48:	47b0      	blx	r6
    5c4a:	1c43      	adds	r3, r0, #1
    5c4c:	d030      	beq.n	5cb0 <_printf_i+0x224>
    5c4e:	3501      	adds	r5, #1
    5c50:	68e3      	ldr	r3, [r4, #12]
    5c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c54:	1a9b      	subs	r3, r3, r2
    5c56:	429d      	cmp	r5, r3
    5c58:	dbf0      	blt.n	5c3c <_printf_i+0x1b0>
    5c5a:	e7e9      	b.n	5c30 <_printf_i+0x1a4>
    5c5c:	2d00      	cmp	r5, #0
    5c5e:	d0a9      	beq.n	5bb4 <_printf_i+0x128>
    5c60:	9e04      	ldr	r6, [sp, #16]
    5c62:	0028      	movs	r0, r5
    5c64:	0039      	movs	r1, r7
    5c66:	f7ff fcbd 	bl	55e4 <__aeabi_uidivmod>
    5c6a:	9b03      	ldr	r3, [sp, #12]
    5c6c:	3e01      	subs	r6, #1
    5c6e:	5c5b      	ldrb	r3, [r3, r1]
    5c70:	0028      	movs	r0, r5
    5c72:	7033      	strb	r3, [r6, #0]
    5c74:	0039      	movs	r1, r7
    5c76:	f7ff fc2f 	bl	54d8 <__udivsi3>
    5c7a:	1e05      	subs	r5, r0, #0
    5c7c:	d1f1      	bne.n	5c62 <_printf_i+0x1d6>
    5c7e:	2f08      	cmp	r7, #8
    5c80:	d109      	bne.n	5c96 <_printf_i+0x20a>
    5c82:	6823      	ldr	r3, [r4, #0]
    5c84:	07db      	lsls	r3, r3, #31
    5c86:	d506      	bpl.n	5c96 <_printf_i+0x20a>
    5c88:	6863      	ldr	r3, [r4, #4]
    5c8a:	6922      	ldr	r2, [r4, #16]
    5c8c:	4293      	cmp	r3, r2
    5c8e:	dc02      	bgt.n	5c96 <_printf_i+0x20a>
    5c90:	2330      	movs	r3, #48	; 0x30
    5c92:	3e01      	subs	r6, #1
    5c94:	7033      	strb	r3, [r6, #0]
    5c96:	9b04      	ldr	r3, [sp, #16]
    5c98:	1b9b      	subs	r3, r3, r6
    5c9a:	6123      	str	r3, [r4, #16]
    5c9c:	9b07      	ldr	r3, [sp, #28]
    5c9e:	aa09      	add	r2, sp, #36	; 0x24
    5ca0:	9300      	str	r3, [sp, #0]
    5ca2:	0021      	movs	r1, r4
    5ca4:	9b06      	ldr	r3, [sp, #24]
    5ca6:	9805      	ldr	r0, [sp, #20]
    5ca8:	f7ff fe82 	bl	59b0 <_printf_common>
    5cac:	1c43      	adds	r3, r0, #1
    5cae:	d1b3      	bne.n	5c18 <_printf_i+0x18c>
    5cb0:	2001      	movs	r0, #1
    5cb2:	4240      	negs	r0, r0
    5cb4:	b00b      	add	sp, #44	; 0x2c
    5cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cb8:	0000801a 	.word	0x0000801a
    5cbc:	00008009 	.word	0x00008009

00005cc0 <setbuf>:
    5cc0:	424a      	negs	r2, r1
    5cc2:	414a      	adcs	r2, r1
    5cc4:	2380      	movs	r3, #128	; 0x80
    5cc6:	b510      	push	{r4, lr}
    5cc8:	0052      	lsls	r2, r2, #1
    5cca:	00db      	lsls	r3, r3, #3
    5ccc:	f000 f802 	bl	5cd4 <setvbuf>
    5cd0:	bd10      	pop	{r4, pc}
	...

00005cd4 <setvbuf>:
    5cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cd6:	001d      	movs	r5, r3
    5cd8:	4b4f      	ldr	r3, [pc, #316]	; (5e18 <setvbuf+0x144>)
    5cda:	b085      	sub	sp, #20
    5cdc:	681e      	ldr	r6, [r3, #0]
    5cde:	0004      	movs	r4, r0
    5ce0:	000f      	movs	r7, r1
    5ce2:	9200      	str	r2, [sp, #0]
    5ce4:	2e00      	cmp	r6, #0
    5ce6:	d005      	beq.n	5cf4 <setvbuf+0x20>
    5ce8:	69b3      	ldr	r3, [r6, #24]
    5cea:	2b00      	cmp	r3, #0
    5cec:	d102      	bne.n	5cf4 <setvbuf+0x20>
    5cee:	0030      	movs	r0, r6
    5cf0:	f000 fb62 	bl	63b8 <__sinit>
    5cf4:	4b49      	ldr	r3, [pc, #292]	; (5e1c <setvbuf+0x148>)
    5cf6:	429c      	cmp	r4, r3
    5cf8:	d150      	bne.n	5d9c <setvbuf+0xc8>
    5cfa:	6874      	ldr	r4, [r6, #4]
    5cfc:	9b00      	ldr	r3, [sp, #0]
    5cfe:	2b02      	cmp	r3, #2
    5d00:	d005      	beq.n	5d0e <setvbuf+0x3a>
    5d02:	2b01      	cmp	r3, #1
    5d04:	d900      	bls.n	5d08 <setvbuf+0x34>
    5d06:	e084      	b.n	5e12 <setvbuf+0x13e>
    5d08:	2d00      	cmp	r5, #0
    5d0a:	da00      	bge.n	5d0e <setvbuf+0x3a>
    5d0c:	e081      	b.n	5e12 <setvbuf+0x13e>
    5d0e:	0021      	movs	r1, r4
    5d10:	0030      	movs	r0, r6
    5d12:	f000 fae3 	bl	62dc <_fflush_r>
    5d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5d18:	2900      	cmp	r1, #0
    5d1a:	d008      	beq.n	5d2e <setvbuf+0x5a>
    5d1c:	0023      	movs	r3, r4
    5d1e:	3344      	adds	r3, #68	; 0x44
    5d20:	4299      	cmp	r1, r3
    5d22:	d002      	beq.n	5d2a <setvbuf+0x56>
    5d24:	0030      	movs	r0, r6
    5d26:	f000 fc85 	bl	6634 <_free_r>
    5d2a:	2300      	movs	r3, #0
    5d2c:	6363      	str	r3, [r4, #52]	; 0x34
    5d2e:	2300      	movs	r3, #0
    5d30:	61a3      	str	r3, [r4, #24]
    5d32:	6063      	str	r3, [r4, #4]
    5d34:	89a3      	ldrh	r3, [r4, #12]
    5d36:	061b      	lsls	r3, r3, #24
    5d38:	d503      	bpl.n	5d42 <setvbuf+0x6e>
    5d3a:	6921      	ldr	r1, [r4, #16]
    5d3c:	0030      	movs	r0, r6
    5d3e:	f000 fc79 	bl	6634 <_free_r>
    5d42:	89a3      	ldrh	r3, [r4, #12]
    5d44:	4a36      	ldr	r2, [pc, #216]	; (5e20 <setvbuf+0x14c>)
    5d46:	4013      	ands	r3, r2
    5d48:	81a3      	strh	r3, [r4, #12]
    5d4a:	9b00      	ldr	r3, [sp, #0]
    5d4c:	2b02      	cmp	r3, #2
    5d4e:	d05a      	beq.n	5e06 <setvbuf+0x132>
    5d50:	ab03      	add	r3, sp, #12
    5d52:	aa02      	add	r2, sp, #8
    5d54:	0021      	movs	r1, r4
    5d56:	0030      	movs	r0, r6
    5d58:	f000 fbc6 	bl	64e8 <__swhatbuf_r>
    5d5c:	89a3      	ldrh	r3, [r4, #12]
    5d5e:	4318      	orrs	r0, r3
    5d60:	81a0      	strh	r0, [r4, #12]
    5d62:	2d00      	cmp	r5, #0
    5d64:	d124      	bne.n	5db0 <setvbuf+0xdc>
    5d66:	9d02      	ldr	r5, [sp, #8]
    5d68:	0028      	movs	r0, r5
    5d6a:	f000 fc29 	bl	65c0 <malloc>
    5d6e:	9501      	str	r5, [sp, #4]
    5d70:	1e07      	subs	r7, r0, #0
    5d72:	d142      	bne.n	5dfa <setvbuf+0x126>
    5d74:	9b02      	ldr	r3, [sp, #8]
    5d76:	9301      	str	r3, [sp, #4]
    5d78:	42ab      	cmp	r3, r5
    5d7a:	d139      	bne.n	5df0 <setvbuf+0x11c>
    5d7c:	2001      	movs	r0, #1
    5d7e:	4240      	negs	r0, r0
    5d80:	2302      	movs	r3, #2
    5d82:	89a2      	ldrh	r2, [r4, #12]
    5d84:	4313      	orrs	r3, r2
    5d86:	81a3      	strh	r3, [r4, #12]
    5d88:	2300      	movs	r3, #0
    5d8a:	60a3      	str	r3, [r4, #8]
    5d8c:	0023      	movs	r3, r4
    5d8e:	3347      	adds	r3, #71	; 0x47
    5d90:	6023      	str	r3, [r4, #0]
    5d92:	6123      	str	r3, [r4, #16]
    5d94:	2301      	movs	r3, #1
    5d96:	6163      	str	r3, [r4, #20]
    5d98:	b005      	add	sp, #20
    5d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d9c:	4b21      	ldr	r3, [pc, #132]	; (5e24 <setvbuf+0x150>)
    5d9e:	429c      	cmp	r4, r3
    5da0:	d101      	bne.n	5da6 <setvbuf+0xd2>
    5da2:	68b4      	ldr	r4, [r6, #8]
    5da4:	e7aa      	b.n	5cfc <setvbuf+0x28>
    5da6:	4b20      	ldr	r3, [pc, #128]	; (5e28 <setvbuf+0x154>)
    5da8:	429c      	cmp	r4, r3
    5daa:	d1a7      	bne.n	5cfc <setvbuf+0x28>
    5dac:	68f4      	ldr	r4, [r6, #12]
    5dae:	e7a5      	b.n	5cfc <setvbuf+0x28>
    5db0:	2f00      	cmp	r7, #0
    5db2:	d0d9      	beq.n	5d68 <setvbuf+0x94>
    5db4:	69b3      	ldr	r3, [r6, #24]
    5db6:	2b00      	cmp	r3, #0
    5db8:	d102      	bne.n	5dc0 <setvbuf+0xec>
    5dba:	0030      	movs	r0, r6
    5dbc:	f000 fafc 	bl	63b8 <__sinit>
    5dc0:	9b00      	ldr	r3, [sp, #0]
    5dc2:	2b01      	cmp	r3, #1
    5dc4:	d103      	bne.n	5dce <setvbuf+0xfa>
    5dc6:	89a3      	ldrh	r3, [r4, #12]
    5dc8:	9a00      	ldr	r2, [sp, #0]
    5dca:	431a      	orrs	r2, r3
    5dcc:	81a2      	strh	r2, [r4, #12]
    5dce:	2008      	movs	r0, #8
    5dd0:	89a3      	ldrh	r3, [r4, #12]
    5dd2:	6027      	str	r7, [r4, #0]
    5dd4:	6127      	str	r7, [r4, #16]
    5dd6:	6165      	str	r5, [r4, #20]
    5dd8:	4018      	ands	r0, r3
    5dda:	d018      	beq.n	5e0e <setvbuf+0x13a>
    5ddc:	2001      	movs	r0, #1
    5dde:	4018      	ands	r0, r3
    5de0:	2300      	movs	r3, #0
    5de2:	4298      	cmp	r0, r3
    5de4:	d011      	beq.n	5e0a <setvbuf+0x136>
    5de6:	426d      	negs	r5, r5
    5de8:	60a3      	str	r3, [r4, #8]
    5dea:	61a5      	str	r5, [r4, #24]
    5dec:	0018      	movs	r0, r3
    5dee:	e7d3      	b.n	5d98 <setvbuf+0xc4>
    5df0:	9801      	ldr	r0, [sp, #4]
    5df2:	f000 fbe5 	bl	65c0 <malloc>
    5df6:	1e07      	subs	r7, r0, #0
    5df8:	d0c0      	beq.n	5d7c <setvbuf+0xa8>
    5dfa:	2380      	movs	r3, #128	; 0x80
    5dfc:	89a2      	ldrh	r2, [r4, #12]
    5dfe:	9d01      	ldr	r5, [sp, #4]
    5e00:	4313      	orrs	r3, r2
    5e02:	81a3      	strh	r3, [r4, #12]
    5e04:	e7d6      	b.n	5db4 <setvbuf+0xe0>
    5e06:	2000      	movs	r0, #0
    5e08:	e7ba      	b.n	5d80 <setvbuf+0xac>
    5e0a:	60a5      	str	r5, [r4, #8]
    5e0c:	e7c4      	b.n	5d98 <setvbuf+0xc4>
    5e0e:	60a0      	str	r0, [r4, #8]
    5e10:	e7c2      	b.n	5d98 <setvbuf+0xc4>
    5e12:	2001      	movs	r0, #1
    5e14:	4240      	negs	r0, r0
    5e16:	e7bf      	b.n	5d98 <setvbuf+0xc4>
    5e18:	20000208 	.word	0x20000208
    5e1c:	0000804c 	.word	0x0000804c
    5e20:	fffff35c 	.word	0xfffff35c
    5e24:	0000806c 	.word	0x0000806c
    5e28:	0000802c 	.word	0x0000802c

00005e2c <strlen>:
    5e2c:	2300      	movs	r3, #0
    5e2e:	5cc2      	ldrb	r2, [r0, r3]
    5e30:	3301      	adds	r3, #1
    5e32:	2a00      	cmp	r2, #0
    5e34:	d1fb      	bne.n	5e2e <strlen+0x2>
    5e36:	1e58      	subs	r0, r3, #1
    5e38:	4770      	bx	lr

00005e3a <strncpy>:
    5e3a:	b570      	push	{r4, r5, r6, lr}
    5e3c:	0004      	movs	r4, r0
    5e3e:	2a00      	cmp	r2, #0
    5e40:	d100      	bne.n	5e44 <strncpy+0xa>
    5e42:	bd70      	pop	{r4, r5, r6, pc}
    5e44:	780d      	ldrb	r5, [r1, #0]
    5e46:	1e56      	subs	r6, r2, #1
    5e48:	1c63      	adds	r3, r4, #1
    5e4a:	7025      	strb	r5, [r4, #0]
    5e4c:	3101      	adds	r1, #1
    5e4e:	2d00      	cmp	r5, #0
    5e50:	d105      	bne.n	5e5e <strncpy+0x24>
    5e52:	18a4      	adds	r4, r4, r2
    5e54:	429c      	cmp	r4, r3
    5e56:	d0f4      	beq.n	5e42 <strncpy+0x8>
    5e58:	701d      	strb	r5, [r3, #0]
    5e5a:	3301      	adds	r3, #1
    5e5c:	e7fa      	b.n	5e54 <strncpy+0x1a>
    5e5e:	001c      	movs	r4, r3
    5e60:	0032      	movs	r2, r6
    5e62:	e7ec      	b.n	5e3e <strncpy+0x4>

00005e64 <strnlen>:
    5e64:	0003      	movs	r3, r0
    5e66:	1841      	adds	r1, r0, r1
    5e68:	428b      	cmp	r3, r1
    5e6a:	d002      	beq.n	5e72 <strnlen+0xe>
    5e6c:	781a      	ldrb	r2, [r3, #0]
    5e6e:	2a00      	cmp	r2, #0
    5e70:	d101      	bne.n	5e76 <strnlen+0x12>
    5e72:	1a18      	subs	r0, r3, r0
    5e74:	4770      	bx	lr
    5e76:	3301      	adds	r3, #1
    5e78:	e7f6      	b.n	5e68 <strnlen+0x4>

00005e7a <_strtoul_l.isra.0>:
    5e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e7c:	001f      	movs	r7, r3
    5e7e:	000e      	movs	r6, r1
    5e80:	b087      	sub	sp, #28
    5e82:	9005      	str	r0, [sp, #20]
    5e84:	9103      	str	r1, [sp, #12]
    5e86:	9201      	str	r2, [sp, #4]
    5e88:	980c      	ldr	r0, [sp, #48]	; 0x30
    5e8a:	7834      	ldrb	r4, [r6, #0]
    5e8c:	f000 fb29 	bl	64e2 <__locale_ctype_ptr_l>
    5e90:	2208      	movs	r2, #8
    5e92:	1900      	adds	r0, r0, r4
    5e94:	7843      	ldrb	r3, [r0, #1]
    5e96:	1c75      	adds	r5, r6, #1
    5e98:	4013      	ands	r3, r2
    5e9a:	d10c      	bne.n	5eb6 <_strtoul_l.isra.0+0x3c>
    5e9c:	2c2d      	cmp	r4, #45	; 0x2d
    5e9e:	d10c      	bne.n	5eba <_strtoul_l.isra.0+0x40>
    5ea0:	3301      	adds	r3, #1
    5ea2:	782c      	ldrb	r4, [r5, #0]
    5ea4:	9302      	str	r3, [sp, #8]
    5ea6:	1cb5      	adds	r5, r6, #2
    5ea8:	2f00      	cmp	r7, #0
    5eaa:	d00c      	beq.n	5ec6 <_strtoul_l.isra.0+0x4c>
    5eac:	2f10      	cmp	r7, #16
    5eae:	d114      	bne.n	5eda <_strtoul_l.isra.0+0x60>
    5eb0:	2c30      	cmp	r4, #48	; 0x30
    5eb2:	d00a      	beq.n	5eca <_strtoul_l.isra.0+0x50>
    5eb4:	e011      	b.n	5eda <_strtoul_l.isra.0+0x60>
    5eb6:	002e      	movs	r6, r5
    5eb8:	e7e6      	b.n	5e88 <_strtoul_l.isra.0+0xe>
    5eba:	9302      	str	r3, [sp, #8]
    5ebc:	2c2b      	cmp	r4, #43	; 0x2b
    5ebe:	d1f3      	bne.n	5ea8 <_strtoul_l.isra.0+0x2e>
    5ec0:	782c      	ldrb	r4, [r5, #0]
    5ec2:	1cb5      	adds	r5, r6, #2
    5ec4:	e7f0      	b.n	5ea8 <_strtoul_l.isra.0+0x2e>
    5ec6:	2c30      	cmp	r4, #48	; 0x30
    5ec8:	d12f      	bne.n	5f2a <_strtoul_l.isra.0+0xb0>
    5eca:	2220      	movs	r2, #32
    5ecc:	782b      	ldrb	r3, [r5, #0]
    5ece:	4393      	bics	r3, r2
    5ed0:	2b58      	cmp	r3, #88	; 0x58
    5ed2:	d154      	bne.n	5f7e <_strtoul_l.isra.0+0x104>
    5ed4:	2710      	movs	r7, #16
    5ed6:	786c      	ldrb	r4, [r5, #1]
    5ed8:	3502      	adds	r5, #2
    5eda:	2001      	movs	r0, #1
    5edc:	0039      	movs	r1, r7
    5ede:	4240      	negs	r0, r0
    5ee0:	f7ff fafa 	bl	54d8 <__udivsi3>
    5ee4:	0006      	movs	r6, r0
    5ee6:	2001      	movs	r0, #1
    5ee8:	0039      	movs	r1, r7
    5eea:	4240      	negs	r0, r0
    5eec:	f7ff fb7a 	bl	55e4 <__aeabi_uidivmod>
    5ef0:	2300      	movs	r3, #0
    5ef2:	9104      	str	r1, [sp, #16]
    5ef4:	2101      	movs	r1, #1
    5ef6:	2201      	movs	r2, #1
    5ef8:	0018      	movs	r0, r3
    5efa:	468c      	mov	ip, r1
    5efc:	4252      	negs	r2, r2
    5efe:	0021      	movs	r1, r4
    5f00:	3930      	subs	r1, #48	; 0x30
    5f02:	2909      	cmp	r1, #9
    5f04:	d813      	bhi.n	5f2e <_strtoul_l.isra.0+0xb4>
    5f06:	000c      	movs	r4, r1
    5f08:	42a7      	cmp	r7, r4
    5f0a:	dd1e      	ble.n	5f4a <_strtoul_l.isra.0+0xd0>
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	db1a      	blt.n	5f46 <_strtoul_l.isra.0+0xcc>
    5f10:	0013      	movs	r3, r2
    5f12:	4286      	cmp	r6, r0
    5f14:	d306      	bcc.n	5f24 <_strtoul_l.isra.0+0xaa>
    5f16:	d102      	bne.n	5f1e <_strtoul_l.isra.0+0xa4>
    5f18:	9904      	ldr	r1, [sp, #16]
    5f1a:	42a1      	cmp	r1, r4
    5f1c:	db02      	blt.n	5f24 <_strtoul_l.isra.0+0xaa>
    5f1e:	4663      	mov	r3, ip
    5f20:	4378      	muls	r0, r7
    5f22:	1820      	adds	r0, r4, r0
    5f24:	782c      	ldrb	r4, [r5, #0]
    5f26:	3501      	adds	r5, #1
    5f28:	e7e9      	b.n	5efe <_strtoul_l.isra.0+0x84>
    5f2a:	270a      	movs	r7, #10
    5f2c:	e7d5      	b.n	5eda <_strtoul_l.isra.0+0x60>
    5f2e:	0021      	movs	r1, r4
    5f30:	3941      	subs	r1, #65	; 0x41
    5f32:	2919      	cmp	r1, #25
    5f34:	d801      	bhi.n	5f3a <_strtoul_l.isra.0+0xc0>
    5f36:	3c37      	subs	r4, #55	; 0x37
    5f38:	e7e6      	b.n	5f08 <_strtoul_l.isra.0+0x8e>
    5f3a:	0021      	movs	r1, r4
    5f3c:	3961      	subs	r1, #97	; 0x61
    5f3e:	2919      	cmp	r1, #25
    5f40:	d803      	bhi.n	5f4a <_strtoul_l.isra.0+0xd0>
    5f42:	3c57      	subs	r4, #87	; 0x57
    5f44:	e7e0      	b.n	5f08 <_strtoul_l.isra.0+0x8e>
    5f46:	0013      	movs	r3, r2
    5f48:	e7ec      	b.n	5f24 <_strtoul_l.isra.0+0xaa>
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	da09      	bge.n	5f62 <_strtoul_l.isra.0+0xe8>
    5f4e:	2322      	movs	r3, #34	; 0x22
    5f50:	2001      	movs	r0, #1
    5f52:	9a05      	ldr	r2, [sp, #20]
    5f54:	4240      	negs	r0, r0
    5f56:	6013      	str	r3, [r2, #0]
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	d10b      	bne.n	5f76 <_strtoul_l.isra.0+0xfc>
    5f5e:	b007      	add	sp, #28
    5f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f62:	9a02      	ldr	r2, [sp, #8]
    5f64:	2a00      	cmp	r2, #0
    5f66:	d000      	beq.n	5f6a <_strtoul_l.isra.0+0xf0>
    5f68:	4240      	negs	r0, r0
    5f6a:	9a01      	ldr	r2, [sp, #4]
    5f6c:	2a00      	cmp	r2, #0
    5f6e:	d0f6      	beq.n	5f5e <_strtoul_l.isra.0+0xe4>
    5f70:	9a03      	ldr	r2, [sp, #12]
    5f72:	2b00      	cmp	r3, #0
    5f74:	d000      	beq.n	5f78 <_strtoul_l.isra.0+0xfe>
    5f76:	1e6a      	subs	r2, r5, #1
    5f78:	9b01      	ldr	r3, [sp, #4]
    5f7a:	601a      	str	r2, [r3, #0]
    5f7c:	e7ef      	b.n	5f5e <_strtoul_l.isra.0+0xe4>
    5f7e:	2430      	movs	r4, #48	; 0x30
    5f80:	2f00      	cmp	r7, #0
    5f82:	d1aa      	bne.n	5eda <_strtoul_l.isra.0+0x60>
    5f84:	3708      	adds	r7, #8
    5f86:	e7a8      	b.n	5eda <_strtoul_l.isra.0+0x60>

00005f88 <strtoul>:
    5f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5f8a:	0013      	movs	r3, r2
    5f8c:	4a06      	ldr	r2, [pc, #24]	; (5fa8 <strtoul+0x20>)
    5f8e:	0005      	movs	r5, r0
    5f90:	6810      	ldr	r0, [r2, #0]
    5f92:	6a04      	ldr	r4, [r0, #32]
    5f94:	2c00      	cmp	r4, #0
    5f96:	d100      	bne.n	5f9a <strtoul+0x12>
    5f98:	4c04      	ldr	r4, [pc, #16]	; (5fac <strtoul+0x24>)
    5f9a:	000a      	movs	r2, r1
    5f9c:	9400      	str	r4, [sp, #0]
    5f9e:	0029      	movs	r1, r5
    5fa0:	f7ff ff6b 	bl	5e7a <_strtoul_l.isra.0>
    5fa4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    5fa6:	46c0      	nop			; (mov r8, r8)
    5fa8:	20000208 	.word	0x20000208
    5fac:	2000026c 	.word	0x2000026c

00005fb0 <_vsniprintf_r>:
    5fb0:	b530      	push	{r4, r5, lr}
    5fb2:	0014      	movs	r4, r2
    5fb4:	b09b      	sub	sp, #108	; 0x6c
    5fb6:	0005      	movs	r5, r0
    5fb8:	001a      	movs	r2, r3
    5fba:	2c00      	cmp	r4, #0
    5fbc:	da05      	bge.n	5fca <_vsniprintf_r+0x1a>
    5fbe:	238b      	movs	r3, #139	; 0x8b
    5fc0:	6003      	str	r3, [r0, #0]
    5fc2:	2001      	movs	r0, #1
    5fc4:	4240      	negs	r0, r0
    5fc6:	b01b      	add	sp, #108	; 0x6c
    5fc8:	bd30      	pop	{r4, r5, pc}
    5fca:	2382      	movs	r3, #130	; 0x82
    5fcc:	4668      	mov	r0, sp
    5fce:	009b      	lsls	r3, r3, #2
    5fd0:	8183      	strh	r3, [r0, #12]
    5fd2:	2300      	movs	r3, #0
    5fd4:	9100      	str	r1, [sp, #0]
    5fd6:	9104      	str	r1, [sp, #16]
    5fd8:	429c      	cmp	r4, r3
    5fda:	d000      	beq.n	5fde <_vsniprintf_r+0x2e>
    5fdc:	1e63      	subs	r3, r4, #1
    5fde:	9302      	str	r3, [sp, #8]
    5fe0:	9305      	str	r3, [sp, #20]
    5fe2:	2301      	movs	r3, #1
    5fe4:	4669      	mov	r1, sp
    5fe6:	425b      	negs	r3, r3
    5fe8:	81cb      	strh	r3, [r1, #14]
    5fea:	0028      	movs	r0, r5
    5fec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5fee:	f000 fc51 	bl	6894 <_svfiprintf_r>
    5ff2:	1c43      	adds	r3, r0, #1
    5ff4:	da01      	bge.n	5ffa <_vsniprintf_r+0x4a>
    5ff6:	238b      	movs	r3, #139	; 0x8b
    5ff8:	602b      	str	r3, [r5, #0]
    5ffa:	2c00      	cmp	r4, #0
    5ffc:	d0e3      	beq.n	5fc6 <_vsniprintf_r+0x16>
    5ffe:	2300      	movs	r3, #0
    6000:	9a00      	ldr	r2, [sp, #0]
    6002:	7013      	strb	r3, [r2, #0]
    6004:	e7df      	b.n	5fc6 <_vsniprintf_r+0x16>
	...

00006008 <vsniprintf>:
    6008:	b507      	push	{r0, r1, r2, lr}
    600a:	9300      	str	r3, [sp, #0]
    600c:	0013      	movs	r3, r2
    600e:	000a      	movs	r2, r1
    6010:	0001      	movs	r1, r0
    6012:	4802      	ldr	r0, [pc, #8]	; (601c <vsniprintf+0x14>)
    6014:	6800      	ldr	r0, [r0, #0]
    6016:	f7ff ffcb 	bl	5fb0 <_vsniprintf_r>
    601a:	bd0e      	pop	{r1, r2, r3, pc}
    601c:	20000208 	.word	0x20000208

00006020 <__swbuf_r>:
    6020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6022:	0005      	movs	r5, r0
    6024:	000e      	movs	r6, r1
    6026:	0014      	movs	r4, r2
    6028:	2800      	cmp	r0, #0
    602a:	d004      	beq.n	6036 <__swbuf_r+0x16>
    602c:	6983      	ldr	r3, [r0, #24]
    602e:	2b00      	cmp	r3, #0
    6030:	d101      	bne.n	6036 <__swbuf_r+0x16>
    6032:	f000 f9c1 	bl	63b8 <__sinit>
    6036:	4b22      	ldr	r3, [pc, #136]	; (60c0 <__swbuf_r+0xa0>)
    6038:	429c      	cmp	r4, r3
    603a:	d12d      	bne.n	6098 <__swbuf_r+0x78>
    603c:	686c      	ldr	r4, [r5, #4]
    603e:	69a3      	ldr	r3, [r4, #24]
    6040:	60a3      	str	r3, [r4, #8]
    6042:	89a3      	ldrh	r3, [r4, #12]
    6044:	071b      	lsls	r3, r3, #28
    6046:	d531      	bpl.n	60ac <__swbuf_r+0x8c>
    6048:	6923      	ldr	r3, [r4, #16]
    604a:	2b00      	cmp	r3, #0
    604c:	d02e      	beq.n	60ac <__swbuf_r+0x8c>
    604e:	6823      	ldr	r3, [r4, #0]
    6050:	6922      	ldr	r2, [r4, #16]
    6052:	b2f7      	uxtb	r7, r6
    6054:	1a98      	subs	r0, r3, r2
    6056:	6963      	ldr	r3, [r4, #20]
    6058:	b2f6      	uxtb	r6, r6
    605a:	4298      	cmp	r0, r3
    605c:	db05      	blt.n	606a <__swbuf_r+0x4a>
    605e:	0021      	movs	r1, r4
    6060:	0028      	movs	r0, r5
    6062:	f000 f93b 	bl	62dc <_fflush_r>
    6066:	2800      	cmp	r0, #0
    6068:	d126      	bne.n	60b8 <__swbuf_r+0x98>
    606a:	68a3      	ldr	r3, [r4, #8]
    606c:	3001      	adds	r0, #1
    606e:	3b01      	subs	r3, #1
    6070:	60a3      	str	r3, [r4, #8]
    6072:	6823      	ldr	r3, [r4, #0]
    6074:	1c5a      	adds	r2, r3, #1
    6076:	6022      	str	r2, [r4, #0]
    6078:	701f      	strb	r7, [r3, #0]
    607a:	6963      	ldr	r3, [r4, #20]
    607c:	4298      	cmp	r0, r3
    607e:	d004      	beq.n	608a <__swbuf_r+0x6a>
    6080:	89a3      	ldrh	r3, [r4, #12]
    6082:	07db      	lsls	r3, r3, #31
    6084:	d51a      	bpl.n	60bc <__swbuf_r+0x9c>
    6086:	2e0a      	cmp	r6, #10
    6088:	d118      	bne.n	60bc <__swbuf_r+0x9c>
    608a:	0021      	movs	r1, r4
    608c:	0028      	movs	r0, r5
    608e:	f000 f925 	bl	62dc <_fflush_r>
    6092:	2800      	cmp	r0, #0
    6094:	d012      	beq.n	60bc <__swbuf_r+0x9c>
    6096:	e00f      	b.n	60b8 <__swbuf_r+0x98>
    6098:	4b0a      	ldr	r3, [pc, #40]	; (60c4 <__swbuf_r+0xa4>)
    609a:	429c      	cmp	r4, r3
    609c:	d101      	bne.n	60a2 <__swbuf_r+0x82>
    609e:	68ac      	ldr	r4, [r5, #8]
    60a0:	e7cd      	b.n	603e <__swbuf_r+0x1e>
    60a2:	4b09      	ldr	r3, [pc, #36]	; (60c8 <__swbuf_r+0xa8>)
    60a4:	429c      	cmp	r4, r3
    60a6:	d1ca      	bne.n	603e <__swbuf_r+0x1e>
    60a8:	68ec      	ldr	r4, [r5, #12]
    60aa:	e7c8      	b.n	603e <__swbuf_r+0x1e>
    60ac:	0021      	movs	r1, r4
    60ae:	0028      	movs	r0, r5
    60b0:	f000 f80c 	bl	60cc <__swsetup_r>
    60b4:	2800      	cmp	r0, #0
    60b6:	d0ca      	beq.n	604e <__swbuf_r+0x2e>
    60b8:	2601      	movs	r6, #1
    60ba:	4276      	negs	r6, r6
    60bc:	0030      	movs	r0, r6
    60be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60c0:	0000804c 	.word	0x0000804c
    60c4:	0000806c 	.word	0x0000806c
    60c8:	0000802c 	.word	0x0000802c

000060cc <__swsetup_r>:
    60cc:	4b36      	ldr	r3, [pc, #216]	; (61a8 <__swsetup_r+0xdc>)
    60ce:	b570      	push	{r4, r5, r6, lr}
    60d0:	681d      	ldr	r5, [r3, #0]
    60d2:	0006      	movs	r6, r0
    60d4:	000c      	movs	r4, r1
    60d6:	2d00      	cmp	r5, #0
    60d8:	d005      	beq.n	60e6 <__swsetup_r+0x1a>
    60da:	69ab      	ldr	r3, [r5, #24]
    60dc:	2b00      	cmp	r3, #0
    60de:	d102      	bne.n	60e6 <__swsetup_r+0x1a>
    60e0:	0028      	movs	r0, r5
    60e2:	f000 f969 	bl	63b8 <__sinit>
    60e6:	4b31      	ldr	r3, [pc, #196]	; (61ac <__swsetup_r+0xe0>)
    60e8:	429c      	cmp	r4, r3
    60ea:	d10f      	bne.n	610c <__swsetup_r+0x40>
    60ec:	686c      	ldr	r4, [r5, #4]
    60ee:	230c      	movs	r3, #12
    60f0:	5ee2      	ldrsh	r2, [r4, r3]
    60f2:	b293      	uxth	r3, r2
    60f4:	0719      	lsls	r1, r3, #28
    60f6:	d42d      	bmi.n	6154 <__swsetup_r+0x88>
    60f8:	06d9      	lsls	r1, r3, #27
    60fa:	d411      	bmi.n	6120 <__swsetup_r+0x54>
    60fc:	2309      	movs	r3, #9
    60fe:	2001      	movs	r0, #1
    6100:	6033      	str	r3, [r6, #0]
    6102:	3337      	adds	r3, #55	; 0x37
    6104:	4313      	orrs	r3, r2
    6106:	81a3      	strh	r3, [r4, #12]
    6108:	4240      	negs	r0, r0
    610a:	bd70      	pop	{r4, r5, r6, pc}
    610c:	4b28      	ldr	r3, [pc, #160]	; (61b0 <__swsetup_r+0xe4>)
    610e:	429c      	cmp	r4, r3
    6110:	d101      	bne.n	6116 <__swsetup_r+0x4a>
    6112:	68ac      	ldr	r4, [r5, #8]
    6114:	e7eb      	b.n	60ee <__swsetup_r+0x22>
    6116:	4b27      	ldr	r3, [pc, #156]	; (61b4 <__swsetup_r+0xe8>)
    6118:	429c      	cmp	r4, r3
    611a:	d1e8      	bne.n	60ee <__swsetup_r+0x22>
    611c:	68ec      	ldr	r4, [r5, #12]
    611e:	e7e6      	b.n	60ee <__swsetup_r+0x22>
    6120:	075b      	lsls	r3, r3, #29
    6122:	d513      	bpl.n	614c <__swsetup_r+0x80>
    6124:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6126:	2900      	cmp	r1, #0
    6128:	d008      	beq.n	613c <__swsetup_r+0x70>
    612a:	0023      	movs	r3, r4
    612c:	3344      	adds	r3, #68	; 0x44
    612e:	4299      	cmp	r1, r3
    6130:	d002      	beq.n	6138 <__swsetup_r+0x6c>
    6132:	0030      	movs	r0, r6
    6134:	f000 fa7e 	bl	6634 <_free_r>
    6138:	2300      	movs	r3, #0
    613a:	6363      	str	r3, [r4, #52]	; 0x34
    613c:	2224      	movs	r2, #36	; 0x24
    613e:	89a3      	ldrh	r3, [r4, #12]
    6140:	4393      	bics	r3, r2
    6142:	81a3      	strh	r3, [r4, #12]
    6144:	2300      	movs	r3, #0
    6146:	6063      	str	r3, [r4, #4]
    6148:	6923      	ldr	r3, [r4, #16]
    614a:	6023      	str	r3, [r4, #0]
    614c:	2308      	movs	r3, #8
    614e:	89a2      	ldrh	r2, [r4, #12]
    6150:	4313      	orrs	r3, r2
    6152:	81a3      	strh	r3, [r4, #12]
    6154:	6923      	ldr	r3, [r4, #16]
    6156:	2b00      	cmp	r3, #0
    6158:	d10b      	bne.n	6172 <__swsetup_r+0xa6>
    615a:	21a0      	movs	r1, #160	; 0xa0
    615c:	2280      	movs	r2, #128	; 0x80
    615e:	89a3      	ldrh	r3, [r4, #12]
    6160:	0089      	lsls	r1, r1, #2
    6162:	0092      	lsls	r2, r2, #2
    6164:	400b      	ands	r3, r1
    6166:	4293      	cmp	r3, r2
    6168:	d003      	beq.n	6172 <__swsetup_r+0xa6>
    616a:	0021      	movs	r1, r4
    616c:	0030      	movs	r0, r6
    616e:	f000 f9e3 	bl	6538 <__smakebuf_r>
    6172:	2301      	movs	r3, #1
    6174:	89a2      	ldrh	r2, [r4, #12]
    6176:	4013      	ands	r3, r2
    6178:	d011      	beq.n	619e <__swsetup_r+0xd2>
    617a:	2300      	movs	r3, #0
    617c:	60a3      	str	r3, [r4, #8]
    617e:	6963      	ldr	r3, [r4, #20]
    6180:	425b      	negs	r3, r3
    6182:	61a3      	str	r3, [r4, #24]
    6184:	2000      	movs	r0, #0
    6186:	6923      	ldr	r3, [r4, #16]
    6188:	4283      	cmp	r3, r0
    618a:	d1be      	bne.n	610a <__swsetup_r+0x3e>
    618c:	230c      	movs	r3, #12
    618e:	5ee2      	ldrsh	r2, [r4, r3]
    6190:	0613      	lsls	r3, r2, #24
    6192:	d5ba      	bpl.n	610a <__swsetup_r+0x3e>
    6194:	2340      	movs	r3, #64	; 0x40
    6196:	4313      	orrs	r3, r2
    6198:	81a3      	strh	r3, [r4, #12]
    619a:	3801      	subs	r0, #1
    619c:	e7b5      	b.n	610a <__swsetup_r+0x3e>
    619e:	0792      	lsls	r2, r2, #30
    61a0:	d400      	bmi.n	61a4 <__swsetup_r+0xd8>
    61a2:	6963      	ldr	r3, [r4, #20]
    61a4:	60a3      	str	r3, [r4, #8]
    61a6:	e7ed      	b.n	6184 <__swsetup_r+0xb8>
    61a8:	20000208 	.word	0x20000208
    61ac:	0000804c 	.word	0x0000804c
    61b0:	0000806c 	.word	0x0000806c
    61b4:	0000802c 	.word	0x0000802c

000061b8 <abort>:
    61b8:	b510      	push	{r4, lr}
    61ba:	2006      	movs	r0, #6
    61bc:	f000 fcaa 	bl	6b14 <raise>
    61c0:	2001      	movs	r0, #1
    61c2:	f7ff f937 	bl	5434 <_exit>
	...

000061c8 <__sflush_r>:
    61c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61ca:	898a      	ldrh	r2, [r1, #12]
    61cc:	0005      	movs	r5, r0
    61ce:	000c      	movs	r4, r1
    61d0:	0713      	lsls	r3, r2, #28
    61d2:	d460      	bmi.n	6296 <__sflush_r+0xce>
    61d4:	684b      	ldr	r3, [r1, #4]
    61d6:	2b00      	cmp	r3, #0
    61d8:	dc04      	bgt.n	61e4 <__sflush_r+0x1c>
    61da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    61dc:	2b00      	cmp	r3, #0
    61de:	dc01      	bgt.n	61e4 <__sflush_r+0x1c>
    61e0:	2000      	movs	r0, #0
    61e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    61e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    61e6:	2f00      	cmp	r7, #0
    61e8:	d0fa      	beq.n	61e0 <__sflush_r+0x18>
    61ea:	2300      	movs	r3, #0
    61ec:	682e      	ldr	r6, [r5, #0]
    61ee:	602b      	str	r3, [r5, #0]
    61f0:	2380      	movs	r3, #128	; 0x80
    61f2:	015b      	lsls	r3, r3, #5
    61f4:	401a      	ands	r2, r3
    61f6:	d034      	beq.n	6262 <__sflush_r+0x9a>
    61f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    61fa:	89a3      	ldrh	r3, [r4, #12]
    61fc:	075b      	lsls	r3, r3, #29
    61fe:	d506      	bpl.n	620e <__sflush_r+0x46>
    6200:	6863      	ldr	r3, [r4, #4]
    6202:	1ac0      	subs	r0, r0, r3
    6204:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6206:	2b00      	cmp	r3, #0
    6208:	d001      	beq.n	620e <__sflush_r+0x46>
    620a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    620c:	1ac0      	subs	r0, r0, r3
    620e:	0002      	movs	r2, r0
    6210:	6a21      	ldr	r1, [r4, #32]
    6212:	2300      	movs	r3, #0
    6214:	0028      	movs	r0, r5
    6216:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6218:	47b8      	blx	r7
    621a:	89a1      	ldrh	r1, [r4, #12]
    621c:	1c43      	adds	r3, r0, #1
    621e:	d106      	bne.n	622e <__sflush_r+0x66>
    6220:	682b      	ldr	r3, [r5, #0]
    6222:	2b1d      	cmp	r3, #29
    6224:	d831      	bhi.n	628a <__sflush_r+0xc2>
    6226:	4a2c      	ldr	r2, [pc, #176]	; (62d8 <__sflush_r+0x110>)
    6228:	40da      	lsrs	r2, r3
    622a:	07d3      	lsls	r3, r2, #31
    622c:	d52d      	bpl.n	628a <__sflush_r+0xc2>
    622e:	2300      	movs	r3, #0
    6230:	6063      	str	r3, [r4, #4]
    6232:	6923      	ldr	r3, [r4, #16]
    6234:	6023      	str	r3, [r4, #0]
    6236:	04cb      	lsls	r3, r1, #19
    6238:	d505      	bpl.n	6246 <__sflush_r+0x7e>
    623a:	1c43      	adds	r3, r0, #1
    623c:	d102      	bne.n	6244 <__sflush_r+0x7c>
    623e:	682b      	ldr	r3, [r5, #0]
    6240:	2b00      	cmp	r3, #0
    6242:	d100      	bne.n	6246 <__sflush_r+0x7e>
    6244:	6560      	str	r0, [r4, #84]	; 0x54
    6246:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6248:	602e      	str	r6, [r5, #0]
    624a:	2900      	cmp	r1, #0
    624c:	d0c8      	beq.n	61e0 <__sflush_r+0x18>
    624e:	0023      	movs	r3, r4
    6250:	3344      	adds	r3, #68	; 0x44
    6252:	4299      	cmp	r1, r3
    6254:	d002      	beq.n	625c <__sflush_r+0x94>
    6256:	0028      	movs	r0, r5
    6258:	f000 f9ec 	bl	6634 <_free_r>
    625c:	2000      	movs	r0, #0
    625e:	6360      	str	r0, [r4, #52]	; 0x34
    6260:	e7bf      	b.n	61e2 <__sflush_r+0x1a>
    6262:	2301      	movs	r3, #1
    6264:	6a21      	ldr	r1, [r4, #32]
    6266:	0028      	movs	r0, r5
    6268:	47b8      	blx	r7
    626a:	1c43      	adds	r3, r0, #1
    626c:	d1c5      	bne.n	61fa <__sflush_r+0x32>
    626e:	682b      	ldr	r3, [r5, #0]
    6270:	2b00      	cmp	r3, #0
    6272:	d0c2      	beq.n	61fa <__sflush_r+0x32>
    6274:	2b1d      	cmp	r3, #29
    6276:	d001      	beq.n	627c <__sflush_r+0xb4>
    6278:	2b16      	cmp	r3, #22
    627a:	d101      	bne.n	6280 <__sflush_r+0xb8>
    627c:	602e      	str	r6, [r5, #0]
    627e:	e7af      	b.n	61e0 <__sflush_r+0x18>
    6280:	2340      	movs	r3, #64	; 0x40
    6282:	89a2      	ldrh	r2, [r4, #12]
    6284:	4313      	orrs	r3, r2
    6286:	81a3      	strh	r3, [r4, #12]
    6288:	e7ab      	b.n	61e2 <__sflush_r+0x1a>
    628a:	2340      	movs	r3, #64	; 0x40
    628c:	430b      	orrs	r3, r1
    628e:	2001      	movs	r0, #1
    6290:	81a3      	strh	r3, [r4, #12]
    6292:	4240      	negs	r0, r0
    6294:	e7a5      	b.n	61e2 <__sflush_r+0x1a>
    6296:	690f      	ldr	r7, [r1, #16]
    6298:	2f00      	cmp	r7, #0
    629a:	d0a1      	beq.n	61e0 <__sflush_r+0x18>
    629c:	680b      	ldr	r3, [r1, #0]
    629e:	600f      	str	r7, [r1, #0]
    62a0:	1bdb      	subs	r3, r3, r7
    62a2:	9301      	str	r3, [sp, #4]
    62a4:	2300      	movs	r3, #0
    62a6:	0792      	lsls	r2, r2, #30
    62a8:	d100      	bne.n	62ac <__sflush_r+0xe4>
    62aa:	694b      	ldr	r3, [r1, #20]
    62ac:	60a3      	str	r3, [r4, #8]
    62ae:	9b01      	ldr	r3, [sp, #4]
    62b0:	2b00      	cmp	r3, #0
    62b2:	dc00      	bgt.n	62b6 <__sflush_r+0xee>
    62b4:	e794      	b.n	61e0 <__sflush_r+0x18>
    62b6:	9b01      	ldr	r3, [sp, #4]
    62b8:	003a      	movs	r2, r7
    62ba:	6a21      	ldr	r1, [r4, #32]
    62bc:	0028      	movs	r0, r5
    62be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    62c0:	47b0      	blx	r6
    62c2:	2800      	cmp	r0, #0
    62c4:	dc03      	bgt.n	62ce <__sflush_r+0x106>
    62c6:	2340      	movs	r3, #64	; 0x40
    62c8:	89a2      	ldrh	r2, [r4, #12]
    62ca:	4313      	orrs	r3, r2
    62cc:	e7df      	b.n	628e <__sflush_r+0xc6>
    62ce:	9b01      	ldr	r3, [sp, #4]
    62d0:	183f      	adds	r7, r7, r0
    62d2:	1a1b      	subs	r3, r3, r0
    62d4:	9301      	str	r3, [sp, #4]
    62d6:	e7ea      	b.n	62ae <__sflush_r+0xe6>
    62d8:	20400001 	.word	0x20400001

000062dc <_fflush_r>:
    62dc:	690b      	ldr	r3, [r1, #16]
    62de:	b570      	push	{r4, r5, r6, lr}
    62e0:	0005      	movs	r5, r0
    62e2:	000c      	movs	r4, r1
    62e4:	2b00      	cmp	r3, #0
    62e6:	d101      	bne.n	62ec <_fflush_r+0x10>
    62e8:	2000      	movs	r0, #0
    62ea:	bd70      	pop	{r4, r5, r6, pc}
    62ec:	2800      	cmp	r0, #0
    62ee:	d004      	beq.n	62fa <_fflush_r+0x1e>
    62f0:	6983      	ldr	r3, [r0, #24]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d101      	bne.n	62fa <_fflush_r+0x1e>
    62f6:	f000 f85f 	bl	63b8 <__sinit>
    62fa:	4b0b      	ldr	r3, [pc, #44]	; (6328 <_fflush_r+0x4c>)
    62fc:	429c      	cmp	r4, r3
    62fe:	d109      	bne.n	6314 <_fflush_r+0x38>
    6300:	686c      	ldr	r4, [r5, #4]
    6302:	220c      	movs	r2, #12
    6304:	5ea3      	ldrsh	r3, [r4, r2]
    6306:	2b00      	cmp	r3, #0
    6308:	d0ee      	beq.n	62e8 <_fflush_r+0xc>
    630a:	0021      	movs	r1, r4
    630c:	0028      	movs	r0, r5
    630e:	f7ff ff5b 	bl	61c8 <__sflush_r>
    6312:	e7ea      	b.n	62ea <_fflush_r+0xe>
    6314:	4b05      	ldr	r3, [pc, #20]	; (632c <_fflush_r+0x50>)
    6316:	429c      	cmp	r4, r3
    6318:	d101      	bne.n	631e <_fflush_r+0x42>
    631a:	68ac      	ldr	r4, [r5, #8]
    631c:	e7f1      	b.n	6302 <_fflush_r+0x26>
    631e:	4b04      	ldr	r3, [pc, #16]	; (6330 <_fflush_r+0x54>)
    6320:	429c      	cmp	r4, r3
    6322:	d1ee      	bne.n	6302 <_fflush_r+0x26>
    6324:	68ec      	ldr	r4, [r5, #12]
    6326:	e7ec      	b.n	6302 <_fflush_r+0x26>
    6328:	0000804c 	.word	0x0000804c
    632c:	0000806c 	.word	0x0000806c
    6330:	0000802c 	.word	0x0000802c

00006334 <_cleanup_r>:
    6334:	b510      	push	{r4, lr}
    6336:	4902      	ldr	r1, [pc, #8]	; (6340 <_cleanup_r+0xc>)
    6338:	f000 f8b2 	bl	64a0 <_fwalk_reent>
    633c:	bd10      	pop	{r4, pc}
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	000062dd 	.word	0x000062dd

00006344 <std.isra.0>:
    6344:	2300      	movs	r3, #0
    6346:	b510      	push	{r4, lr}
    6348:	0004      	movs	r4, r0
    634a:	6003      	str	r3, [r0, #0]
    634c:	6043      	str	r3, [r0, #4]
    634e:	6083      	str	r3, [r0, #8]
    6350:	8181      	strh	r1, [r0, #12]
    6352:	6643      	str	r3, [r0, #100]	; 0x64
    6354:	81c2      	strh	r2, [r0, #14]
    6356:	6103      	str	r3, [r0, #16]
    6358:	6143      	str	r3, [r0, #20]
    635a:	6183      	str	r3, [r0, #24]
    635c:	0019      	movs	r1, r3
    635e:	2208      	movs	r2, #8
    6360:	305c      	adds	r0, #92	; 0x5c
    6362:	f7ff f9d9 	bl	5718 <memset>
    6366:	4b05      	ldr	r3, [pc, #20]	; (637c <std.isra.0+0x38>)
    6368:	6224      	str	r4, [r4, #32]
    636a:	6263      	str	r3, [r4, #36]	; 0x24
    636c:	4b04      	ldr	r3, [pc, #16]	; (6380 <std.isra.0+0x3c>)
    636e:	62a3      	str	r3, [r4, #40]	; 0x28
    6370:	4b04      	ldr	r3, [pc, #16]	; (6384 <std.isra.0+0x40>)
    6372:	62e3      	str	r3, [r4, #44]	; 0x2c
    6374:	4b04      	ldr	r3, [pc, #16]	; (6388 <std.isra.0+0x44>)
    6376:	6323      	str	r3, [r4, #48]	; 0x30
    6378:	bd10      	pop	{r4, pc}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	00006b55 	.word	0x00006b55
    6380:	00006b7d 	.word	0x00006b7d
    6384:	00006bb5 	.word	0x00006bb5
    6388:	00006be1 	.word	0x00006be1

0000638c <__sfmoreglue>:
    638c:	b570      	push	{r4, r5, r6, lr}
    638e:	2568      	movs	r5, #104	; 0x68
    6390:	1e4a      	subs	r2, r1, #1
    6392:	4355      	muls	r5, r2
    6394:	000e      	movs	r6, r1
    6396:	0029      	movs	r1, r5
    6398:	3174      	adds	r1, #116	; 0x74
    639a:	f000 f995 	bl	66c8 <_malloc_r>
    639e:	1e04      	subs	r4, r0, #0
    63a0:	d008      	beq.n	63b4 <__sfmoreglue+0x28>
    63a2:	2100      	movs	r1, #0
    63a4:	002a      	movs	r2, r5
    63a6:	6001      	str	r1, [r0, #0]
    63a8:	6046      	str	r6, [r0, #4]
    63aa:	300c      	adds	r0, #12
    63ac:	60a0      	str	r0, [r4, #8]
    63ae:	3268      	adds	r2, #104	; 0x68
    63b0:	f7ff f9b2 	bl	5718 <memset>
    63b4:	0020      	movs	r0, r4
    63b6:	bd70      	pop	{r4, r5, r6, pc}

000063b8 <__sinit>:
    63b8:	6983      	ldr	r3, [r0, #24]
    63ba:	b513      	push	{r0, r1, r4, lr}
    63bc:	0004      	movs	r4, r0
    63be:	2b00      	cmp	r3, #0
    63c0:	d128      	bne.n	6414 <__sinit+0x5c>
    63c2:	6483      	str	r3, [r0, #72]	; 0x48
    63c4:	64c3      	str	r3, [r0, #76]	; 0x4c
    63c6:	6503      	str	r3, [r0, #80]	; 0x50
    63c8:	4b13      	ldr	r3, [pc, #76]	; (6418 <__sinit+0x60>)
    63ca:	4a14      	ldr	r2, [pc, #80]	; (641c <__sinit+0x64>)
    63cc:	681b      	ldr	r3, [r3, #0]
    63ce:	6282      	str	r2, [r0, #40]	; 0x28
    63d0:	9301      	str	r3, [sp, #4]
    63d2:	4298      	cmp	r0, r3
    63d4:	d101      	bne.n	63da <__sinit+0x22>
    63d6:	2301      	movs	r3, #1
    63d8:	6183      	str	r3, [r0, #24]
    63da:	0020      	movs	r0, r4
    63dc:	f000 f820 	bl	6420 <__sfp>
    63e0:	6060      	str	r0, [r4, #4]
    63e2:	0020      	movs	r0, r4
    63e4:	f000 f81c 	bl	6420 <__sfp>
    63e8:	60a0      	str	r0, [r4, #8]
    63ea:	0020      	movs	r0, r4
    63ec:	f000 f818 	bl	6420 <__sfp>
    63f0:	2200      	movs	r2, #0
    63f2:	60e0      	str	r0, [r4, #12]
    63f4:	2104      	movs	r1, #4
    63f6:	6860      	ldr	r0, [r4, #4]
    63f8:	f7ff ffa4 	bl	6344 <std.isra.0>
    63fc:	2201      	movs	r2, #1
    63fe:	2109      	movs	r1, #9
    6400:	68a0      	ldr	r0, [r4, #8]
    6402:	f7ff ff9f 	bl	6344 <std.isra.0>
    6406:	2202      	movs	r2, #2
    6408:	2112      	movs	r1, #18
    640a:	68e0      	ldr	r0, [r4, #12]
    640c:	f7ff ff9a 	bl	6344 <std.isra.0>
    6410:	2301      	movs	r3, #1
    6412:	61a3      	str	r3, [r4, #24]
    6414:	bd13      	pop	{r0, r1, r4, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	00007ff4 	.word	0x00007ff4
    641c:	00006335 	.word	0x00006335

00006420 <__sfp>:
    6420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6422:	4b1e      	ldr	r3, [pc, #120]	; (649c <__sfp+0x7c>)
    6424:	0007      	movs	r7, r0
    6426:	681e      	ldr	r6, [r3, #0]
    6428:	69b3      	ldr	r3, [r6, #24]
    642a:	2b00      	cmp	r3, #0
    642c:	d102      	bne.n	6434 <__sfp+0x14>
    642e:	0030      	movs	r0, r6
    6430:	f7ff ffc2 	bl	63b8 <__sinit>
    6434:	3648      	adds	r6, #72	; 0x48
    6436:	68b4      	ldr	r4, [r6, #8]
    6438:	6873      	ldr	r3, [r6, #4]
    643a:	3b01      	subs	r3, #1
    643c:	d504      	bpl.n	6448 <__sfp+0x28>
    643e:	6833      	ldr	r3, [r6, #0]
    6440:	2b00      	cmp	r3, #0
    6442:	d007      	beq.n	6454 <__sfp+0x34>
    6444:	6836      	ldr	r6, [r6, #0]
    6446:	e7f6      	b.n	6436 <__sfp+0x16>
    6448:	220c      	movs	r2, #12
    644a:	5ea5      	ldrsh	r5, [r4, r2]
    644c:	2d00      	cmp	r5, #0
    644e:	d00d      	beq.n	646c <__sfp+0x4c>
    6450:	3468      	adds	r4, #104	; 0x68
    6452:	e7f2      	b.n	643a <__sfp+0x1a>
    6454:	2104      	movs	r1, #4
    6456:	0038      	movs	r0, r7
    6458:	f7ff ff98 	bl	638c <__sfmoreglue>
    645c:	6030      	str	r0, [r6, #0]
    645e:	2800      	cmp	r0, #0
    6460:	d1f0      	bne.n	6444 <__sfp+0x24>
    6462:	230c      	movs	r3, #12
    6464:	0004      	movs	r4, r0
    6466:	603b      	str	r3, [r7, #0]
    6468:	0020      	movs	r0, r4
    646a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    646c:	2301      	movs	r3, #1
    646e:	0020      	movs	r0, r4
    6470:	425b      	negs	r3, r3
    6472:	81e3      	strh	r3, [r4, #14]
    6474:	3302      	adds	r3, #2
    6476:	81a3      	strh	r3, [r4, #12]
    6478:	6665      	str	r5, [r4, #100]	; 0x64
    647a:	6025      	str	r5, [r4, #0]
    647c:	60a5      	str	r5, [r4, #8]
    647e:	6065      	str	r5, [r4, #4]
    6480:	6125      	str	r5, [r4, #16]
    6482:	6165      	str	r5, [r4, #20]
    6484:	61a5      	str	r5, [r4, #24]
    6486:	2208      	movs	r2, #8
    6488:	0029      	movs	r1, r5
    648a:	305c      	adds	r0, #92	; 0x5c
    648c:	f7ff f944 	bl	5718 <memset>
    6490:	6365      	str	r5, [r4, #52]	; 0x34
    6492:	63a5      	str	r5, [r4, #56]	; 0x38
    6494:	64a5      	str	r5, [r4, #72]	; 0x48
    6496:	64e5      	str	r5, [r4, #76]	; 0x4c
    6498:	e7e6      	b.n	6468 <__sfp+0x48>
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	00007ff4 	.word	0x00007ff4

000064a0 <_fwalk_reent>:
    64a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64a2:	0004      	movs	r4, r0
    64a4:	0007      	movs	r7, r0
    64a6:	2600      	movs	r6, #0
    64a8:	9101      	str	r1, [sp, #4]
    64aa:	3448      	adds	r4, #72	; 0x48
    64ac:	2c00      	cmp	r4, #0
    64ae:	d101      	bne.n	64b4 <_fwalk_reent+0x14>
    64b0:	0030      	movs	r0, r6
    64b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    64b4:	6863      	ldr	r3, [r4, #4]
    64b6:	68a5      	ldr	r5, [r4, #8]
    64b8:	9300      	str	r3, [sp, #0]
    64ba:	9b00      	ldr	r3, [sp, #0]
    64bc:	3b01      	subs	r3, #1
    64be:	9300      	str	r3, [sp, #0]
    64c0:	d501      	bpl.n	64c6 <_fwalk_reent+0x26>
    64c2:	6824      	ldr	r4, [r4, #0]
    64c4:	e7f2      	b.n	64ac <_fwalk_reent+0xc>
    64c6:	89ab      	ldrh	r3, [r5, #12]
    64c8:	2b01      	cmp	r3, #1
    64ca:	d908      	bls.n	64de <_fwalk_reent+0x3e>
    64cc:	220e      	movs	r2, #14
    64ce:	5eab      	ldrsh	r3, [r5, r2]
    64d0:	3301      	adds	r3, #1
    64d2:	d004      	beq.n	64de <_fwalk_reent+0x3e>
    64d4:	0029      	movs	r1, r5
    64d6:	0038      	movs	r0, r7
    64d8:	9b01      	ldr	r3, [sp, #4]
    64da:	4798      	blx	r3
    64dc:	4306      	orrs	r6, r0
    64de:	3568      	adds	r5, #104	; 0x68
    64e0:	e7eb      	b.n	64ba <_fwalk_reent+0x1a>

000064e2 <__locale_ctype_ptr_l>:
    64e2:	30ec      	adds	r0, #236	; 0xec
    64e4:	6800      	ldr	r0, [r0, #0]
    64e6:	4770      	bx	lr

000064e8 <__swhatbuf_r>:
    64e8:	b570      	push	{r4, r5, r6, lr}
    64ea:	000e      	movs	r6, r1
    64ec:	001d      	movs	r5, r3
    64ee:	230e      	movs	r3, #14
    64f0:	5ec9      	ldrsh	r1, [r1, r3]
    64f2:	b090      	sub	sp, #64	; 0x40
    64f4:	0014      	movs	r4, r2
    64f6:	2900      	cmp	r1, #0
    64f8:	da07      	bge.n	650a <__swhatbuf_r+0x22>
    64fa:	2300      	movs	r3, #0
    64fc:	602b      	str	r3, [r5, #0]
    64fe:	89b3      	ldrh	r3, [r6, #12]
    6500:	061b      	lsls	r3, r3, #24
    6502:	d411      	bmi.n	6528 <__swhatbuf_r+0x40>
    6504:	2380      	movs	r3, #128	; 0x80
    6506:	00db      	lsls	r3, r3, #3
    6508:	e00f      	b.n	652a <__swhatbuf_r+0x42>
    650a:	aa01      	add	r2, sp, #4
    650c:	f000 fba0 	bl	6c50 <_fstat_r>
    6510:	2800      	cmp	r0, #0
    6512:	dbf2      	blt.n	64fa <__swhatbuf_r+0x12>
    6514:	22f0      	movs	r2, #240	; 0xf0
    6516:	9b02      	ldr	r3, [sp, #8]
    6518:	0212      	lsls	r2, r2, #8
    651a:	4013      	ands	r3, r2
    651c:	4a05      	ldr	r2, [pc, #20]	; (6534 <__swhatbuf_r+0x4c>)
    651e:	189b      	adds	r3, r3, r2
    6520:	425a      	negs	r2, r3
    6522:	4153      	adcs	r3, r2
    6524:	602b      	str	r3, [r5, #0]
    6526:	e7ed      	b.n	6504 <__swhatbuf_r+0x1c>
    6528:	2340      	movs	r3, #64	; 0x40
    652a:	2000      	movs	r0, #0
    652c:	6023      	str	r3, [r4, #0]
    652e:	b010      	add	sp, #64	; 0x40
    6530:	bd70      	pop	{r4, r5, r6, pc}
    6532:	46c0      	nop			; (mov r8, r8)
    6534:	ffffe000 	.word	0xffffe000

00006538 <__smakebuf_r>:
    6538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    653a:	2602      	movs	r6, #2
    653c:	898b      	ldrh	r3, [r1, #12]
    653e:	0005      	movs	r5, r0
    6540:	000c      	movs	r4, r1
    6542:	4233      	tst	r3, r6
    6544:	d006      	beq.n	6554 <__smakebuf_r+0x1c>
    6546:	0023      	movs	r3, r4
    6548:	3347      	adds	r3, #71	; 0x47
    654a:	6023      	str	r3, [r4, #0]
    654c:	6123      	str	r3, [r4, #16]
    654e:	2301      	movs	r3, #1
    6550:	6163      	str	r3, [r4, #20]
    6552:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6554:	ab01      	add	r3, sp, #4
    6556:	466a      	mov	r2, sp
    6558:	f7ff ffc6 	bl	64e8 <__swhatbuf_r>
    655c:	9900      	ldr	r1, [sp, #0]
    655e:	0007      	movs	r7, r0
    6560:	0028      	movs	r0, r5
    6562:	f000 f8b1 	bl	66c8 <_malloc_r>
    6566:	2800      	cmp	r0, #0
    6568:	d108      	bne.n	657c <__smakebuf_r+0x44>
    656a:	220c      	movs	r2, #12
    656c:	5ea3      	ldrsh	r3, [r4, r2]
    656e:	059a      	lsls	r2, r3, #22
    6570:	d4ef      	bmi.n	6552 <__smakebuf_r+0x1a>
    6572:	2203      	movs	r2, #3
    6574:	4393      	bics	r3, r2
    6576:	431e      	orrs	r6, r3
    6578:	81a6      	strh	r6, [r4, #12]
    657a:	e7e4      	b.n	6546 <__smakebuf_r+0xe>
    657c:	4b0f      	ldr	r3, [pc, #60]	; (65bc <__smakebuf_r+0x84>)
    657e:	62ab      	str	r3, [r5, #40]	; 0x28
    6580:	2380      	movs	r3, #128	; 0x80
    6582:	89a2      	ldrh	r2, [r4, #12]
    6584:	6020      	str	r0, [r4, #0]
    6586:	4313      	orrs	r3, r2
    6588:	81a3      	strh	r3, [r4, #12]
    658a:	9b00      	ldr	r3, [sp, #0]
    658c:	6120      	str	r0, [r4, #16]
    658e:	6163      	str	r3, [r4, #20]
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	2b00      	cmp	r3, #0
    6594:	d00d      	beq.n	65b2 <__smakebuf_r+0x7a>
    6596:	230e      	movs	r3, #14
    6598:	5ee1      	ldrsh	r1, [r4, r3]
    659a:	0028      	movs	r0, r5
    659c:	f000 fb6a 	bl	6c74 <_isatty_r>
    65a0:	2800      	cmp	r0, #0
    65a2:	d006      	beq.n	65b2 <__smakebuf_r+0x7a>
    65a4:	2203      	movs	r2, #3
    65a6:	89a3      	ldrh	r3, [r4, #12]
    65a8:	4393      	bics	r3, r2
    65aa:	001a      	movs	r2, r3
    65ac:	2301      	movs	r3, #1
    65ae:	4313      	orrs	r3, r2
    65b0:	81a3      	strh	r3, [r4, #12]
    65b2:	89a0      	ldrh	r0, [r4, #12]
    65b4:	4338      	orrs	r0, r7
    65b6:	81a0      	strh	r0, [r4, #12]
    65b8:	e7cb      	b.n	6552 <__smakebuf_r+0x1a>
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	00006335 	.word	0x00006335

000065c0 <malloc>:
    65c0:	b510      	push	{r4, lr}
    65c2:	4b03      	ldr	r3, [pc, #12]	; (65d0 <malloc+0x10>)
    65c4:	0001      	movs	r1, r0
    65c6:	6818      	ldr	r0, [r3, #0]
    65c8:	f000 f87e 	bl	66c8 <_malloc_r>
    65cc:	bd10      	pop	{r4, pc}
    65ce:	46c0      	nop			; (mov r8, r8)
    65d0:	20000208 	.word	0x20000208

000065d4 <__ascii_mbtowc>:
    65d4:	b082      	sub	sp, #8
    65d6:	2900      	cmp	r1, #0
    65d8:	d100      	bne.n	65dc <__ascii_mbtowc+0x8>
    65da:	a901      	add	r1, sp, #4
    65dc:	1e10      	subs	r0, r2, #0
    65de:	d006      	beq.n	65ee <__ascii_mbtowc+0x1a>
    65e0:	2b00      	cmp	r3, #0
    65e2:	d006      	beq.n	65f2 <__ascii_mbtowc+0x1e>
    65e4:	7813      	ldrb	r3, [r2, #0]
    65e6:	600b      	str	r3, [r1, #0]
    65e8:	7810      	ldrb	r0, [r2, #0]
    65ea:	1e43      	subs	r3, r0, #1
    65ec:	4198      	sbcs	r0, r3
    65ee:	b002      	add	sp, #8
    65f0:	4770      	bx	lr
    65f2:	2002      	movs	r0, #2
    65f4:	4240      	negs	r0, r0
    65f6:	e7fa      	b.n	65ee <__ascii_mbtowc+0x1a>

000065f8 <memchr>:
    65f8:	b2c9      	uxtb	r1, r1
    65fa:	1882      	adds	r2, r0, r2
    65fc:	4290      	cmp	r0, r2
    65fe:	d101      	bne.n	6604 <memchr+0xc>
    6600:	2000      	movs	r0, #0
    6602:	4770      	bx	lr
    6604:	7803      	ldrb	r3, [r0, #0]
    6606:	428b      	cmp	r3, r1
    6608:	d0fb      	beq.n	6602 <memchr+0xa>
    660a:	3001      	adds	r0, #1
    660c:	e7f6      	b.n	65fc <memchr+0x4>

0000660e <memmove>:
    660e:	b510      	push	{r4, lr}
    6610:	4288      	cmp	r0, r1
    6612:	d902      	bls.n	661a <memmove+0xc>
    6614:	188b      	adds	r3, r1, r2
    6616:	4298      	cmp	r0, r3
    6618:	d308      	bcc.n	662c <memmove+0x1e>
    661a:	2300      	movs	r3, #0
    661c:	429a      	cmp	r2, r3
    661e:	d007      	beq.n	6630 <memmove+0x22>
    6620:	5ccc      	ldrb	r4, [r1, r3]
    6622:	54c4      	strb	r4, [r0, r3]
    6624:	3301      	adds	r3, #1
    6626:	e7f9      	b.n	661c <memmove+0xe>
    6628:	5c8b      	ldrb	r3, [r1, r2]
    662a:	5483      	strb	r3, [r0, r2]
    662c:	3a01      	subs	r2, #1
    662e:	d2fb      	bcs.n	6628 <memmove+0x1a>
    6630:	bd10      	pop	{r4, pc}
	...

00006634 <_free_r>:
    6634:	b570      	push	{r4, r5, r6, lr}
    6636:	0005      	movs	r5, r0
    6638:	2900      	cmp	r1, #0
    663a:	d010      	beq.n	665e <_free_r+0x2a>
    663c:	1f0c      	subs	r4, r1, #4
    663e:	6823      	ldr	r3, [r4, #0]
    6640:	2b00      	cmp	r3, #0
    6642:	da00      	bge.n	6646 <_free_r+0x12>
    6644:	18e4      	adds	r4, r4, r3
    6646:	0028      	movs	r0, r5
    6648:	f000 fb3a 	bl	6cc0 <__malloc_lock>
    664c:	4a1d      	ldr	r2, [pc, #116]	; (66c4 <_free_r+0x90>)
    664e:	6813      	ldr	r3, [r2, #0]
    6650:	2b00      	cmp	r3, #0
    6652:	d105      	bne.n	6660 <_free_r+0x2c>
    6654:	6063      	str	r3, [r4, #4]
    6656:	6014      	str	r4, [r2, #0]
    6658:	0028      	movs	r0, r5
    665a:	f000 fb32 	bl	6cc2 <__malloc_unlock>
    665e:	bd70      	pop	{r4, r5, r6, pc}
    6660:	42a3      	cmp	r3, r4
    6662:	d909      	bls.n	6678 <_free_r+0x44>
    6664:	6821      	ldr	r1, [r4, #0]
    6666:	1860      	adds	r0, r4, r1
    6668:	4283      	cmp	r3, r0
    666a:	d1f3      	bne.n	6654 <_free_r+0x20>
    666c:	6818      	ldr	r0, [r3, #0]
    666e:	685b      	ldr	r3, [r3, #4]
    6670:	1841      	adds	r1, r0, r1
    6672:	6021      	str	r1, [r4, #0]
    6674:	e7ee      	b.n	6654 <_free_r+0x20>
    6676:	0013      	movs	r3, r2
    6678:	685a      	ldr	r2, [r3, #4]
    667a:	2a00      	cmp	r2, #0
    667c:	d001      	beq.n	6682 <_free_r+0x4e>
    667e:	42a2      	cmp	r2, r4
    6680:	d9f9      	bls.n	6676 <_free_r+0x42>
    6682:	6819      	ldr	r1, [r3, #0]
    6684:	1858      	adds	r0, r3, r1
    6686:	42a0      	cmp	r0, r4
    6688:	d10b      	bne.n	66a2 <_free_r+0x6e>
    668a:	6820      	ldr	r0, [r4, #0]
    668c:	1809      	adds	r1, r1, r0
    668e:	1858      	adds	r0, r3, r1
    6690:	6019      	str	r1, [r3, #0]
    6692:	4282      	cmp	r2, r0
    6694:	d1e0      	bne.n	6658 <_free_r+0x24>
    6696:	6810      	ldr	r0, [r2, #0]
    6698:	6852      	ldr	r2, [r2, #4]
    669a:	1841      	adds	r1, r0, r1
    669c:	6019      	str	r1, [r3, #0]
    669e:	605a      	str	r2, [r3, #4]
    66a0:	e7da      	b.n	6658 <_free_r+0x24>
    66a2:	42a0      	cmp	r0, r4
    66a4:	d902      	bls.n	66ac <_free_r+0x78>
    66a6:	230c      	movs	r3, #12
    66a8:	602b      	str	r3, [r5, #0]
    66aa:	e7d5      	b.n	6658 <_free_r+0x24>
    66ac:	6821      	ldr	r1, [r4, #0]
    66ae:	1860      	adds	r0, r4, r1
    66b0:	4282      	cmp	r2, r0
    66b2:	d103      	bne.n	66bc <_free_r+0x88>
    66b4:	6810      	ldr	r0, [r2, #0]
    66b6:	6852      	ldr	r2, [r2, #4]
    66b8:	1841      	adds	r1, r0, r1
    66ba:	6021      	str	r1, [r4, #0]
    66bc:	6062      	str	r2, [r4, #4]
    66be:	605c      	str	r4, [r3, #4]
    66c0:	e7ca      	b.n	6658 <_free_r+0x24>
    66c2:	46c0      	nop			; (mov r8, r8)
    66c4:	20000ac4 	.word	0x20000ac4

000066c8 <_malloc_r>:
    66c8:	2303      	movs	r3, #3
    66ca:	b570      	push	{r4, r5, r6, lr}
    66cc:	1ccd      	adds	r5, r1, #3
    66ce:	439d      	bics	r5, r3
    66d0:	3508      	adds	r5, #8
    66d2:	0006      	movs	r6, r0
    66d4:	2d0c      	cmp	r5, #12
    66d6:	d21e      	bcs.n	6716 <_malloc_r+0x4e>
    66d8:	250c      	movs	r5, #12
    66da:	42a9      	cmp	r1, r5
    66dc:	d81d      	bhi.n	671a <_malloc_r+0x52>
    66de:	0030      	movs	r0, r6
    66e0:	f000 faee 	bl	6cc0 <__malloc_lock>
    66e4:	4a25      	ldr	r2, [pc, #148]	; (677c <_malloc_r+0xb4>)
    66e6:	6814      	ldr	r4, [r2, #0]
    66e8:	0021      	movs	r1, r4
    66ea:	2900      	cmp	r1, #0
    66ec:	d119      	bne.n	6722 <_malloc_r+0x5a>
    66ee:	4c24      	ldr	r4, [pc, #144]	; (6780 <_malloc_r+0xb8>)
    66f0:	6823      	ldr	r3, [r4, #0]
    66f2:	2b00      	cmp	r3, #0
    66f4:	d103      	bne.n	66fe <_malloc_r+0x36>
    66f6:	0030      	movs	r0, r6
    66f8:	f000 f9d0 	bl	6a9c <_sbrk_r>
    66fc:	6020      	str	r0, [r4, #0]
    66fe:	0029      	movs	r1, r5
    6700:	0030      	movs	r0, r6
    6702:	f000 f9cb 	bl	6a9c <_sbrk_r>
    6706:	1c43      	adds	r3, r0, #1
    6708:	d12c      	bne.n	6764 <_malloc_r+0x9c>
    670a:	230c      	movs	r3, #12
    670c:	0030      	movs	r0, r6
    670e:	6033      	str	r3, [r6, #0]
    6710:	f000 fad7 	bl	6cc2 <__malloc_unlock>
    6714:	e003      	b.n	671e <_malloc_r+0x56>
    6716:	2d00      	cmp	r5, #0
    6718:	dadf      	bge.n	66da <_malloc_r+0x12>
    671a:	230c      	movs	r3, #12
    671c:	6033      	str	r3, [r6, #0]
    671e:	2000      	movs	r0, #0
    6720:	bd70      	pop	{r4, r5, r6, pc}
    6722:	680b      	ldr	r3, [r1, #0]
    6724:	1b5b      	subs	r3, r3, r5
    6726:	d41a      	bmi.n	675e <_malloc_r+0x96>
    6728:	2b0b      	cmp	r3, #11
    672a:	d903      	bls.n	6734 <_malloc_r+0x6c>
    672c:	600b      	str	r3, [r1, #0]
    672e:	18cc      	adds	r4, r1, r3
    6730:	6025      	str	r5, [r4, #0]
    6732:	e003      	b.n	673c <_malloc_r+0x74>
    6734:	428c      	cmp	r4, r1
    6736:	d10e      	bne.n	6756 <_malloc_r+0x8e>
    6738:	6863      	ldr	r3, [r4, #4]
    673a:	6013      	str	r3, [r2, #0]
    673c:	0030      	movs	r0, r6
    673e:	f000 fac0 	bl	6cc2 <__malloc_unlock>
    6742:	0020      	movs	r0, r4
    6744:	2207      	movs	r2, #7
    6746:	300b      	adds	r0, #11
    6748:	1d23      	adds	r3, r4, #4
    674a:	4390      	bics	r0, r2
    674c:	1ac3      	subs	r3, r0, r3
    674e:	d0e7      	beq.n	6720 <_malloc_r+0x58>
    6750:	425a      	negs	r2, r3
    6752:	50e2      	str	r2, [r4, r3]
    6754:	e7e4      	b.n	6720 <_malloc_r+0x58>
    6756:	684b      	ldr	r3, [r1, #4]
    6758:	6063      	str	r3, [r4, #4]
    675a:	000c      	movs	r4, r1
    675c:	e7ee      	b.n	673c <_malloc_r+0x74>
    675e:	000c      	movs	r4, r1
    6760:	6849      	ldr	r1, [r1, #4]
    6762:	e7c2      	b.n	66ea <_malloc_r+0x22>
    6764:	2303      	movs	r3, #3
    6766:	1cc4      	adds	r4, r0, #3
    6768:	439c      	bics	r4, r3
    676a:	42a0      	cmp	r0, r4
    676c:	d0e0      	beq.n	6730 <_malloc_r+0x68>
    676e:	1a21      	subs	r1, r4, r0
    6770:	0030      	movs	r0, r6
    6772:	f000 f993 	bl	6a9c <_sbrk_r>
    6776:	1c43      	adds	r3, r0, #1
    6778:	d1da      	bne.n	6730 <_malloc_r+0x68>
    677a:	e7c6      	b.n	670a <_malloc_r+0x42>
    677c:	20000ac4 	.word	0x20000ac4
    6780:	20000ac8 	.word	0x20000ac8

00006784 <_realloc_r>:
    6784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6786:	0007      	movs	r7, r0
    6788:	000d      	movs	r5, r1
    678a:	0016      	movs	r6, r2
    678c:	2900      	cmp	r1, #0
    678e:	d105      	bne.n	679c <_realloc_r+0x18>
    6790:	0011      	movs	r1, r2
    6792:	f7ff ff99 	bl	66c8 <_malloc_r>
    6796:	0004      	movs	r4, r0
    6798:	0020      	movs	r0, r4
    679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    679c:	2a00      	cmp	r2, #0
    679e:	d103      	bne.n	67a8 <_realloc_r+0x24>
    67a0:	f7ff ff48 	bl	6634 <_free_r>
    67a4:	0034      	movs	r4, r6
    67a6:	e7f7      	b.n	6798 <_realloc_r+0x14>
    67a8:	f000 fa8c 	bl	6cc4 <_malloc_usable_size_r>
    67ac:	002c      	movs	r4, r5
    67ae:	4286      	cmp	r6, r0
    67b0:	d9f2      	bls.n	6798 <_realloc_r+0x14>
    67b2:	0031      	movs	r1, r6
    67b4:	0038      	movs	r0, r7
    67b6:	f7ff ff87 	bl	66c8 <_malloc_r>
    67ba:	1e04      	subs	r4, r0, #0
    67bc:	d0ec      	beq.n	6798 <_realloc_r+0x14>
    67be:	0029      	movs	r1, r5
    67c0:	0032      	movs	r2, r6
    67c2:	f7fe ffa0 	bl	5706 <memcpy>
    67c6:	0029      	movs	r1, r5
    67c8:	0038      	movs	r0, r7
    67ca:	f7ff ff33 	bl	6634 <_free_r>
    67ce:	e7e3      	b.n	6798 <_realloc_r+0x14>

000067d0 <__ssputs_r>:
    67d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    67d2:	688e      	ldr	r6, [r1, #8]
    67d4:	b085      	sub	sp, #20
    67d6:	0007      	movs	r7, r0
    67d8:	000c      	movs	r4, r1
    67da:	9203      	str	r2, [sp, #12]
    67dc:	9301      	str	r3, [sp, #4]
    67de:	429e      	cmp	r6, r3
    67e0:	d839      	bhi.n	6856 <__ssputs_r+0x86>
    67e2:	2390      	movs	r3, #144	; 0x90
    67e4:	898a      	ldrh	r2, [r1, #12]
    67e6:	00db      	lsls	r3, r3, #3
    67e8:	421a      	tst	r2, r3
    67ea:	d034      	beq.n	6856 <__ssputs_r+0x86>
    67ec:	2503      	movs	r5, #3
    67ee:	6909      	ldr	r1, [r1, #16]
    67f0:	6823      	ldr	r3, [r4, #0]
    67f2:	1a5b      	subs	r3, r3, r1
    67f4:	9302      	str	r3, [sp, #8]
    67f6:	6963      	ldr	r3, [r4, #20]
    67f8:	9802      	ldr	r0, [sp, #8]
    67fa:	435d      	muls	r5, r3
    67fc:	0feb      	lsrs	r3, r5, #31
    67fe:	195d      	adds	r5, r3, r5
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	106d      	asrs	r5, r5, #1
    6804:	3301      	adds	r3, #1
    6806:	181b      	adds	r3, r3, r0
    6808:	42ab      	cmp	r3, r5
    680a:	d900      	bls.n	680e <__ssputs_r+0x3e>
    680c:	001d      	movs	r5, r3
    680e:	0553      	lsls	r3, r2, #21
    6810:	d532      	bpl.n	6878 <__ssputs_r+0xa8>
    6812:	0029      	movs	r1, r5
    6814:	0038      	movs	r0, r7
    6816:	f7ff ff57 	bl	66c8 <_malloc_r>
    681a:	1e06      	subs	r6, r0, #0
    681c:	d109      	bne.n	6832 <__ssputs_r+0x62>
    681e:	230c      	movs	r3, #12
    6820:	603b      	str	r3, [r7, #0]
    6822:	2340      	movs	r3, #64	; 0x40
    6824:	2001      	movs	r0, #1
    6826:	89a2      	ldrh	r2, [r4, #12]
    6828:	4240      	negs	r0, r0
    682a:	4313      	orrs	r3, r2
    682c:	81a3      	strh	r3, [r4, #12]
    682e:	b005      	add	sp, #20
    6830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6832:	9a02      	ldr	r2, [sp, #8]
    6834:	6921      	ldr	r1, [r4, #16]
    6836:	f7fe ff66 	bl	5706 <memcpy>
    683a:	89a3      	ldrh	r3, [r4, #12]
    683c:	4a14      	ldr	r2, [pc, #80]	; (6890 <__ssputs_r+0xc0>)
    683e:	401a      	ands	r2, r3
    6840:	2380      	movs	r3, #128	; 0x80
    6842:	4313      	orrs	r3, r2
    6844:	81a3      	strh	r3, [r4, #12]
    6846:	9b02      	ldr	r3, [sp, #8]
    6848:	6126      	str	r6, [r4, #16]
    684a:	18f6      	adds	r6, r6, r3
    684c:	6026      	str	r6, [r4, #0]
    684e:	6165      	str	r5, [r4, #20]
    6850:	9e01      	ldr	r6, [sp, #4]
    6852:	1aed      	subs	r5, r5, r3
    6854:	60a5      	str	r5, [r4, #8]
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	42b3      	cmp	r3, r6
    685a:	d200      	bcs.n	685e <__ssputs_r+0x8e>
    685c:	001e      	movs	r6, r3
    685e:	0032      	movs	r2, r6
    6860:	9903      	ldr	r1, [sp, #12]
    6862:	6820      	ldr	r0, [r4, #0]
    6864:	f7ff fed3 	bl	660e <memmove>
    6868:	68a3      	ldr	r3, [r4, #8]
    686a:	2000      	movs	r0, #0
    686c:	1b9b      	subs	r3, r3, r6
    686e:	60a3      	str	r3, [r4, #8]
    6870:	6823      	ldr	r3, [r4, #0]
    6872:	199e      	adds	r6, r3, r6
    6874:	6026      	str	r6, [r4, #0]
    6876:	e7da      	b.n	682e <__ssputs_r+0x5e>
    6878:	002a      	movs	r2, r5
    687a:	0038      	movs	r0, r7
    687c:	f7ff ff82 	bl	6784 <_realloc_r>
    6880:	1e06      	subs	r6, r0, #0
    6882:	d1e0      	bne.n	6846 <__ssputs_r+0x76>
    6884:	6921      	ldr	r1, [r4, #16]
    6886:	0038      	movs	r0, r7
    6888:	f7ff fed4 	bl	6634 <_free_r>
    688c:	e7c7      	b.n	681e <__ssputs_r+0x4e>
    688e:	46c0      	nop			; (mov r8, r8)
    6890:	fffffb7f 	.word	0xfffffb7f

00006894 <_svfiprintf_r>:
    6894:	b5f0      	push	{r4, r5, r6, r7, lr}
    6896:	b09f      	sub	sp, #124	; 0x7c
    6898:	9002      	str	r0, [sp, #8]
    689a:	9305      	str	r3, [sp, #20]
    689c:	898b      	ldrh	r3, [r1, #12]
    689e:	000f      	movs	r7, r1
    68a0:	0016      	movs	r6, r2
    68a2:	061b      	lsls	r3, r3, #24
    68a4:	d511      	bpl.n	68ca <_svfiprintf_r+0x36>
    68a6:	690b      	ldr	r3, [r1, #16]
    68a8:	2b00      	cmp	r3, #0
    68aa:	d10e      	bne.n	68ca <_svfiprintf_r+0x36>
    68ac:	2140      	movs	r1, #64	; 0x40
    68ae:	f7ff ff0b 	bl	66c8 <_malloc_r>
    68b2:	6038      	str	r0, [r7, #0]
    68b4:	6138      	str	r0, [r7, #16]
    68b6:	2800      	cmp	r0, #0
    68b8:	d105      	bne.n	68c6 <_svfiprintf_r+0x32>
    68ba:	230c      	movs	r3, #12
    68bc:	9a02      	ldr	r2, [sp, #8]
    68be:	3801      	subs	r0, #1
    68c0:	6013      	str	r3, [r2, #0]
    68c2:	b01f      	add	sp, #124	; 0x7c
    68c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68c6:	2340      	movs	r3, #64	; 0x40
    68c8:	617b      	str	r3, [r7, #20]
    68ca:	2300      	movs	r3, #0
    68cc:	ad06      	add	r5, sp, #24
    68ce:	616b      	str	r3, [r5, #20]
    68d0:	3320      	adds	r3, #32
    68d2:	766b      	strb	r3, [r5, #25]
    68d4:	3310      	adds	r3, #16
    68d6:	76ab      	strb	r3, [r5, #26]
    68d8:	0034      	movs	r4, r6
    68da:	7823      	ldrb	r3, [r4, #0]
    68dc:	2b00      	cmp	r3, #0
    68de:	d147      	bne.n	6970 <_svfiprintf_r+0xdc>
    68e0:	1ba3      	subs	r3, r4, r6
    68e2:	9304      	str	r3, [sp, #16]
    68e4:	d00d      	beq.n	6902 <_svfiprintf_r+0x6e>
    68e6:	1ba3      	subs	r3, r4, r6
    68e8:	0032      	movs	r2, r6
    68ea:	0039      	movs	r1, r7
    68ec:	9802      	ldr	r0, [sp, #8]
    68ee:	f7ff ff6f 	bl	67d0 <__ssputs_r>
    68f2:	1c43      	adds	r3, r0, #1
    68f4:	d100      	bne.n	68f8 <_svfiprintf_r+0x64>
    68f6:	e0b5      	b.n	6a64 <_svfiprintf_r+0x1d0>
    68f8:	696a      	ldr	r2, [r5, #20]
    68fa:	9b04      	ldr	r3, [sp, #16]
    68fc:	4694      	mov	ip, r2
    68fe:	4463      	add	r3, ip
    6900:	616b      	str	r3, [r5, #20]
    6902:	7823      	ldrb	r3, [r4, #0]
    6904:	2b00      	cmp	r3, #0
    6906:	d100      	bne.n	690a <_svfiprintf_r+0x76>
    6908:	e0ac      	b.n	6a64 <_svfiprintf_r+0x1d0>
    690a:	2201      	movs	r2, #1
    690c:	2300      	movs	r3, #0
    690e:	4252      	negs	r2, r2
    6910:	606a      	str	r2, [r5, #4]
    6912:	a902      	add	r1, sp, #8
    6914:	3254      	adds	r2, #84	; 0x54
    6916:	1852      	adds	r2, r2, r1
    6918:	3401      	adds	r4, #1
    691a:	602b      	str	r3, [r5, #0]
    691c:	60eb      	str	r3, [r5, #12]
    691e:	60ab      	str	r3, [r5, #8]
    6920:	7013      	strb	r3, [r2, #0]
    6922:	65ab      	str	r3, [r5, #88]	; 0x58
    6924:	4e58      	ldr	r6, [pc, #352]	; (6a88 <_svfiprintf_r+0x1f4>)
    6926:	2205      	movs	r2, #5
    6928:	7821      	ldrb	r1, [r4, #0]
    692a:	0030      	movs	r0, r6
    692c:	f7ff fe64 	bl	65f8 <memchr>
    6930:	1c62      	adds	r2, r4, #1
    6932:	2800      	cmp	r0, #0
    6934:	d120      	bne.n	6978 <_svfiprintf_r+0xe4>
    6936:	6829      	ldr	r1, [r5, #0]
    6938:	06cb      	lsls	r3, r1, #27
    693a:	d504      	bpl.n	6946 <_svfiprintf_r+0xb2>
    693c:	2353      	movs	r3, #83	; 0x53
    693e:	ae02      	add	r6, sp, #8
    6940:	3020      	adds	r0, #32
    6942:	199b      	adds	r3, r3, r6
    6944:	7018      	strb	r0, [r3, #0]
    6946:	070b      	lsls	r3, r1, #28
    6948:	d504      	bpl.n	6954 <_svfiprintf_r+0xc0>
    694a:	2353      	movs	r3, #83	; 0x53
    694c:	202b      	movs	r0, #43	; 0x2b
    694e:	ae02      	add	r6, sp, #8
    6950:	199b      	adds	r3, r3, r6
    6952:	7018      	strb	r0, [r3, #0]
    6954:	7823      	ldrb	r3, [r4, #0]
    6956:	2b2a      	cmp	r3, #42	; 0x2a
    6958:	d016      	beq.n	6988 <_svfiprintf_r+0xf4>
    695a:	2000      	movs	r0, #0
    695c:	210a      	movs	r1, #10
    695e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6960:	7822      	ldrb	r2, [r4, #0]
    6962:	3a30      	subs	r2, #48	; 0x30
    6964:	2a09      	cmp	r2, #9
    6966:	d955      	bls.n	6a14 <_svfiprintf_r+0x180>
    6968:	2800      	cmp	r0, #0
    696a:	d015      	beq.n	6998 <_svfiprintf_r+0x104>
    696c:	9309      	str	r3, [sp, #36]	; 0x24
    696e:	e013      	b.n	6998 <_svfiprintf_r+0x104>
    6970:	2b25      	cmp	r3, #37	; 0x25
    6972:	d0b5      	beq.n	68e0 <_svfiprintf_r+0x4c>
    6974:	3401      	adds	r4, #1
    6976:	e7b0      	b.n	68da <_svfiprintf_r+0x46>
    6978:	2301      	movs	r3, #1
    697a:	1b80      	subs	r0, r0, r6
    697c:	4083      	lsls	r3, r0
    697e:	6829      	ldr	r1, [r5, #0]
    6980:	0014      	movs	r4, r2
    6982:	430b      	orrs	r3, r1
    6984:	602b      	str	r3, [r5, #0]
    6986:	e7cd      	b.n	6924 <_svfiprintf_r+0x90>
    6988:	9b05      	ldr	r3, [sp, #20]
    698a:	1d18      	adds	r0, r3, #4
    698c:	681b      	ldr	r3, [r3, #0]
    698e:	9005      	str	r0, [sp, #20]
    6990:	2b00      	cmp	r3, #0
    6992:	db39      	blt.n	6a08 <_svfiprintf_r+0x174>
    6994:	9309      	str	r3, [sp, #36]	; 0x24
    6996:	0014      	movs	r4, r2
    6998:	7823      	ldrb	r3, [r4, #0]
    699a:	2b2e      	cmp	r3, #46	; 0x2e
    699c:	d10b      	bne.n	69b6 <_svfiprintf_r+0x122>
    699e:	7863      	ldrb	r3, [r4, #1]
    69a0:	1c62      	adds	r2, r4, #1
    69a2:	2b2a      	cmp	r3, #42	; 0x2a
    69a4:	d13e      	bne.n	6a24 <_svfiprintf_r+0x190>
    69a6:	9b05      	ldr	r3, [sp, #20]
    69a8:	3402      	adds	r4, #2
    69aa:	1d1a      	adds	r2, r3, #4
    69ac:	681b      	ldr	r3, [r3, #0]
    69ae:	9205      	str	r2, [sp, #20]
    69b0:	2b00      	cmp	r3, #0
    69b2:	db34      	blt.n	6a1e <_svfiprintf_r+0x18a>
    69b4:	9307      	str	r3, [sp, #28]
    69b6:	4e35      	ldr	r6, [pc, #212]	; (6a8c <_svfiprintf_r+0x1f8>)
    69b8:	7821      	ldrb	r1, [r4, #0]
    69ba:	2203      	movs	r2, #3
    69bc:	0030      	movs	r0, r6
    69be:	f7ff fe1b 	bl	65f8 <memchr>
    69c2:	2800      	cmp	r0, #0
    69c4:	d006      	beq.n	69d4 <_svfiprintf_r+0x140>
    69c6:	2340      	movs	r3, #64	; 0x40
    69c8:	1b80      	subs	r0, r0, r6
    69ca:	4083      	lsls	r3, r0
    69cc:	682a      	ldr	r2, [r5, #0]
    69ce:	3401      	adds	r4, #1
    69d0:	4313      	orrs	r3, r2
    69d2:	602b      	str	r3, [r5, #0]
    69d4:	7821      	ldrb	r1, [r4, #0]
    69d6:	2206      	movs	r2, #6
    69d8:	482d      	ldr	r0, [pc, #180]	; (6a90 <_svfiprintf_r+0x1fc>)
    69da:	1c66      	adds	r6, r4, #1
    69dc:	7629      	strb	r1, [r5, #24]
    69de:	f7ff fe0b 	bl	65f8 <memchr>
    69e2:	2800      	cmp	r0, #0
    69e4:	d046      	beq.n	6a74 <_svfiprintf_r+0x1e0>
    69e6:	4b2b      	ldr	r3, [pc, #172]	; (6a94 <_svfiprintf_r+0x200>)
    69e8:	2b00      	cmp	r3, #0
    69ea:	d12f      	bne.n	6a4c <_svfiprintf_r+0x1b8>
    69ec:	6829      	ldr	r1, [r5, #0]
    69ee:	9b05      	ldr	r3, [sp, #20]
    69f0:	2207      	movs	r2, #7
    69f2:	05c9      	lsls	r1, r1, #23
    69f4:	d528      	bpl.n	6a48 <_svfiprintf_r+0x1b4>
    69f6:	189b      	adds	r3, r3, r2
    69f8:	4393      	bics	r3, r2
    69fa:	3308      	adds	r3, #8
    69fc:	9305      	str	r3, [sp, #20]
    69fe:	696b      	ldr	r3, [r5, #20]
    6a00:	9a03      	ldr	r2, [sp, #12]
    6a02:	189b      	adds	r3, r3, r2
    6a04:	616b      	str	r3, [r5, #20]
    6a06:	e767      	b.n	68d8 <_svfiprintf_r+0x44>
    6a08:	425b      	negs	r3, r3
    6a0a:	60eb      	str	r3, [r5, #12]
    6a0c:	2302      	movs	r3, #2
    6a0e:	430b      	orrs	r3, r1
    6a10:	602b      	str	r3, [r5, #0]
    6a12:	e7c0      	b.n	6996 <_svfiprintf_r+0x102>
    6a14:	434b      	muls	r3, r1
    6a16:	3401      	adds	r4, #1
    6a18:	189b      	adds	r3, r3, r2
    6a1a:	2001      	movs	r0, #1
    6a1c:	e7a0      	b.n	6960 <_svfiprintf_r+0xcc>
    6a1e:	2301      	movs	r3, #1
    6a20:	425b      	negs	r3, r3
    6a22:	e7c7      	b.n	69b4 <_svfiprintf_r+0x120>
    6a24:	2300      	movs	r3, #0
    6a26:	0014      	movs	r4, r2
    6a28:	200a      	movs	r0, #10
    6a2a:	001a      	movs	r2, r3
    6a2c:	606b      	str	r3, [r5, #4]
    6a2e:	7821      	ldrb	r1, [r4, #0]
    6a30:	3930      	subs	r1, #48	; 0x30
    6a32:	2909      	cmp	r1, #9
    6a34:	d903      	bls.n	6a3e <_svfiprintf_r+0x1aa>
    6a36:	2b00      	cmp	r3, #0
    6a38:	d0bd      	beq.n	69b6 <_svfiprintf_r+0x122>
    6a3a:	9207      	str	r2, [sp, #28]
    6a3c:	e7bb      	b.n	69b6 <_svfiprintf_r+0x122>
    6a3e:	4342      	muls	r2, r0
    6a40:	3401      	adds	r4, #1
    6a42:	1852      	adds	r2, r2, r1
    6a44:	2301      	movs	r3, #1
    6a46:	e7f2      	b.n	6a2e <_svfiprintf_r+0x19a>
    6a48:	3307      	adds	r3, #7
    6a4a:	e7d5      	b.n	69f8 <_svfiprintf_r+0x164>
    6a4c:	ab05      	add	r3, sp, #20
    6a4e:	9300      	str	r3, [sp, #0]
    6a50:	003a      	movs	r2, r7
    6a52:	4b11      	ldr	r3, [pc, #68]	; (6a98 <_svfiprintf_r+0x204>)
    6a54:	0029      	movs	r1, r5
    6a56:	9802      	ldr	r0, [sp, #8]
    6a58:	e000      	b.n	6a5c <_svfiprintf_r+0x1c8>
    6a5a:	bf00      	nop
    6a5c:	9003      	str	r0, [sp, #12]
    6a5e:	9b03      	ldr	r3, [sp, #12]
    6a60:	3301      	adds	r3, #1
    6a62:	d1cc      	bne.n	69fe <_svfiprintf_r+0x16a>
    6a64:	89bb      	ldrh	r3, [r7, #12]
    6a66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6a68:	065b      	lsls	r3, r3, #25
    6a6a:	d400      	bmi.n	6a6e <_svfiprintf_r+0x1da>
    6a6c:	e729      	b.n	68c2 <_svfiprintf_r+0x2e>
    6a6e:	2001      	movs	r0, #1
    6a70:	4240      	negs	r0, r0
    6a72:	e726      	b.n	68c2 <_svfiprintf_r+0x2e>
    6a74:	ab05      	add	r3, sp, #20
    6a76:	9300      	str	r3, [sp, #0]
    6a78:	003a      	movs	r2, r7
    6a7a:	4b07      	ldr	r3, [pc, #28]	; (6a98 <_svfiprintf_r+0x204>)
    6a7c:	0029      	movs	r1, r5
    6a7e:	9802      	ldr	r0, [sp, #8]
    6a80:	f7ff f804 	bl	5a8c <_printf_i>
    6a84:	e7ea      	b.n	6a5c <_svfiprintf_r+0x1c8>
    6a86:	46c0      	nop			; (mov r8, r8)
    6a88:	00007ff8 	.word	0x00007ff8
    6a8c:	00007ffe 	.word	0x00007ffe
    6a90:	00008002 	.word	0x00008002
    6a94:	00000000 	.word	0x00000000
    6a98:	000067d1 	.word	0x000067d1

00006a9c <_sbrk_r>:
    6a9c:	2300      	movs	r3, #0
    6a9e:	b570      	push	{r4, r5, r6, lr}
    6aa0:	4c06      	ldr	r4, [pc, #24]	; (6abc <_sbrk_r+0x20>)
    6aa2:	0005      	movs	r5, r0
    6aa4:	0008      	movs	r0, r1
    6aa6:	6023      	str	r3, [r4, #0]
    6aa8:	f7fe fca6 	bl	53f8 <_sbrk>
    6aac:	1c43      	adds	r3, r0, #1
    6aae:	d103      	bne.n	6ab8 <_sbrk_r+0x1c>
    6ab0:	6823      	ldr	r3, [r4, #0]
    6ab2:	2b00      	cmp	r3, #0
    6ab4:	d000      	beq.n	6ab8 <_sbrk_r+0x1c>
    6ab6:	602b      	str	r3, [r5, #0]
    6ab8:	bd70      	pop	{r4, r5, r6, pc}
    6aba:	46c0      	nop			; (mov r8, r8)
    6abc:	20000d44 	.word	0x20000d44

00006ac0 <_raise_r>:
    6ac0:	b570      	push	{r4, r5, r6, lr}
    6ac2:	0004      	movs	r4, r0
    6ac4:	000d      	movs	r5, r1
    6ac6:	291f      	cmp	r1, #31
    6ac8:	d904      	bls.n	6ad4 <_raise_r+0x14>
    6aca:	2316      	movs	r3, #22
    6acc:	6003      	str	r3, [r0, #0]
    6ace:	2001      	movs	r0, #1
    6ad0:	4240      	negs	r0, r0
    6ad2:	bd70      	pop	{r4, r5, r6, pc}
    6ad4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d004      	beq.n	6ae4 <_raise_r+0x24>
    6ada:	008a      	lsls	r2, r1, #2
    6adc:	189b      	adds	r3, r3, r2
    6ade:	681a      	ldr	r2, [r3, #0]
    6ae0:	2a00      	cmp	r2, #0
    6ae2:	d108      	bne.n	6af6 <_raise_r+0x36>
    6ae4:	0020      	movs	r0, r4
    6ae6:	f000 f831 	bl	6b4c <_getpid_r>
    6aea:	002a      	movs	r2, r5
    6aec:	0001      	movs	r1, r0
    6aee:	0020      	movs	r0, r4
    6af0:	f000 f81a 	bl	6b28 <_kill_r>
    6af4:	e7ed      	b.n	6ad2 <_raise_r+0x12>
    6af6:	2000      	movs	r0, #0
    6af8:	2a01      	cmp	r2, #1
    6afa:	d0ea      	beq.n	6ad2 <_raise_r+0x12>
    6afc:	1c51      	adds	r1, r2, #1
    6afe:	d103      	bne.n	6b08 <_raise_r+0x48>
    6b00:	2316      	movs	r3, #22
    6b02:	3001      	adds	r0, #1
    6b04:	6023      	str	r3, [r4, #0]
    6b06:	e7e4      	b.n	6ad2 <_raise_r+0x12>
    6b08:	2400      	movs	r4, #0
    6b0a:	0028      	movs	r0, r5
    6b0c:	601c      	str	r4, [r3, #0]
    6b0e:	4790      	blx	r2
    6b10:	0020      	movs	r0, r4
    6b12:	e7de      	b.n	6ad2 <_raise_r+0x12>

00006b14 <raise>:
    6b14:	b510      	push	{r4, lr}
    6b16:	4b03      	ldr	r3, [pc, #12]	; (6b24 <raise+0x10>)
    6b18:	0001      	movs	r1, r0
    6b1a:	6818      	ldr	r0, [r3, #0]
    6b1c:	f7ff ffd0 	bl	6ac0 <_raise_r>
    6b20:	bd10      	pop	{r4, pc}
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	20000208 	.word	0x20000208

00006b28 <_kill_r>:
    6b28:	2300      	movs	r3, #0
    6b2a:	b570      	push	{r4, r5, r6, lr}
    6b2c:	4c06      	ldr	r4, [pc, #24]	; (6b48 <_kill_r+0x20>)
    6b2e:	0005      	movs	r5, r0
    6b30:	0008      	movs	r0, r1
    6b32:	0011      	movs	r1, r2
    6b34:	6023      	str	r3, [r4, #0]
    6b36:	f7fe fc7f 	bl	5438 <_kill>
    6b3a:	1c43      	adds	r3, r0, #1
    6b3c:	d103      	bne.n	6b46 <_kill_r+0x1e>
    6b3e:	6823      	ldr	r3, [r4, #0]
    6b40:	2b00      	cmp	r3, #0
    6b42:	d000      	beq.n	6b46 <_kill_r+0x1e>
    6b44:	602b      	str	r3, [r5, #0]
    6b46:	bd70      	pop	{r4, r5, r6, pc}
    6b48:	20000d44 	.word	0x20000d44

00006b4c <_getpid_r>:
    6b4c:	b510      	push	{r4, lr}
    6b4e:	f7fe fc74 	bl	543a <_getpid>
    6b52:	bd10      	pop	{r4, pc}

00006b54 <__sread>:
    6b54:	b570      	push	{r4, r5, r6, lr}
    6b56:	000c      	movs	r4, r1
    6b58:	250e      	movs	r5, #14
    6b5a:	5f49      	ldrsh	r1, [r1, r5]
    6b5c:	f000 f8ba 	bl	6cd4 <_read_r>
    6b60:	2800      	cmp	r0, #0
    6b62:	db03      	blt.n	6b6c <__sread+0x18>
    6b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b66:	181b      	adds	r3, r3, r0
    6b68:	6563      	str	r3, [r4, #84]	; 0x54
    6b6a:	bd70      	pop	{r4, r5, r6, pc}
    6b6c:	89a3      	ldrh	r3, [r4, #12]
    6b6e:	4a02      	ldr	r2, [pc, #8]	; (6b78 <__sread+0x24>)
    6b70:	4013      	ands	r3, r2
    6b72:	81a3      	strh	r3, [r4, #12]
    6b74:	e7f9      	b.n	6b6a <__sread+0x16>
    6b76:	46c0      	nop			; (mov r8, r8)
    6b78:	ffffefff 	.word	0xffffefff

00006b7c <__swrite>:
    6b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b7e:	001f      	movs	r7, r3
    6b80:	898b      	ldrh	r3, [r1, #12]
    6b82:	0005      	movs	r5, r0
    6b84:	000c      	movs	r4, r1
    6b86:	0016      	movs	r6, r2
    6b88:	05db      	lsls	r3, r3, #23
    6b8a:	d505      	bpl.n	6b98 <__swrite+0x1c>
    6b8c:	230e      	movs	r3, #14
    6b8e:	5ec9      	ldrsh	r1, [r1, r3]
    6b90:	2200      	movs	r2, #0
    6b92:	2302      	movs	r3, #2
    6b94:	f000 f880 	bl	6c98 <_lseek_r>
    6b98:	89a3      	ldrh	r3, [r4, #12]
    6b9a:	4a05      	ldr	r2, [pc, #20]	; (6bb0 <__swrite+0x34>)
    6b9c:	0028      	movs	r0, r5
    6b9e:	4013      	ands	r3, r2
    6ba0:	81a3      	strh	r3, [r4, #12]
    6ba2:	0032      	movs	r2, r6
    6ba4:	230e      	movs	r3, #14
    6ba6:	5ee1      	ldrsh	r1, [r4, r3]
    6ba8:	003b      	movs	r3, r7
    6baa:	f000 f82b 	bl	6c04 <_write_r>
    6bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bb0:	ffffefff 	.word	0xffffefff

00006bb4 <__sseek>:
    6bb4:	b570      	push	{r4, r5, r6, lr}
    6bb6:	000c      	movs	r4, r1
    6bb8:	250e      	movs	r5, #14
    6bba:	5f49      	ldrsh	r1, [r1, r5]
    6bbc:	f000 f86c 	bl	6c98 <_lseek_r>
    6bc0:	89a3      	ldrh	r3, [r4, #12]
    6bc2:	1c42      	adds	r2, r0, #1
    6bc4:	d103      	bne.n	6bce <__sseek+0x1a>
    6bc6:	4a05      	ldr	r2, [pc, #20]	; (6bdc <__sseek+0x28>)
    6bc8:	4013      	ands	r3, r2
    6bca:	81a3      	strh	r3, [r4, #12]
    6bcc:	bd70      	pop	{r4, r5, r6, pc}
    6bce:	2280      	movs	r2, #128	; 0x80
    6bd0:	0152      	lsls	r2, r2, #5
    6bd2:	4313      	orrs	r3, r2
    6bd4:	81a3      	strh	r3, [r4, #12]
    6bd6:	6560      	str	r0, [r4, #84]	; 0x54
    6bd8:	e7f8      	b.n	6bcc <__sseek+0x18>
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	ffffefff 	.word	0xffffefff

00006be0 <__sclose>:
    6be0:	b510      	push	{r4, lr}
    6be2:	230e      	movs	r3, #14
    6be4:	5ec9      	ldrsh	r1, [r1, r3]
    6be6:	f000 f821 	bl	6c2c <_close_r>
    6bea:	bd10      	pop	{r4, pc}

00006bec <__ascii_wctomb>:
    6bec:	1e0b      	subs	r3, r1, #0
    6bee:	d004      	beq.n	6bfa <__ascii_wctomb+0xe>
    6bf0:	2aff      	cmp	r2, #255	; 0xff
    6bf2:	d904      	bls.n	6bfe <__ascii_wctomb+0x12>
    6bf4:	238a      	movs	r3, #138	; 0x8a
    6bf6:	6003      	str	r3, [r0, #0]
    6bf8:	3b8b      	subs	r3, #139	; 0x8b
    6bfa:	0018      	movs	r0, r3
    6bfc:	4770      	bx	lr
    6bfe:	700a      	strb	r2, [r1, #0]
    6c00:	2301      	movs	r3, #1
    6c02:	e7fa      	b.n	6bfa <__ascii_wctomb+0xe>

00006c04 <_write_r>:
    6c04:	b570      	push	{r4, r5, r6, lr}
    6c06:	0005      	movs	r5, r0
    6c08:	0008      	movs	r0, r1
    6c0a:	0011      	movs	r1, r2
    6c0c:	2200      	movs	r2, #0
    6c0e:	4c06      	ldr	r4, [pc, #24]	; (6c28 <_write_r+0x24>)
    6c10:	6022      	str	r2, [r4, #0]
    6c12:	001a      	movs	r2, r3
    6c14:	f7fc f8f2 	bl	2dfc <_write>
    6c18:	1c43      	adds	r3, r0, #1
    6c1a:	d103      	bne.n	6c24 <_write_r+0x20>
    6c1c:	6823      	ldr	r3, [r4, #0]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d000      	beq.n	6c24 <_write_r+0x20>
    6c22:	602b      	str	r3, [r5, #0]
    6c24:	bd70      	pop	{r4, r5, r6, pc}
    6c26:	46c0      	nop			; (mov r8, r8)
    6c28:	20000d44 	.word	0x20000d44

00006c2c <_close_r>:
    6c2c:	2300      	movs	r3, #0
    6c2e:	b570      	push	{r4, r5, r6, lr}
    6c30:	4c06      	ldr	r4, [pc, #24]	; (6c4c <_close_r+0x20>)
    6c32:	0005      	movs	r5, r0
    6c34:	0008      	movs	r0, r1
    6c36:	6023      	str	r3, [r4, #0]
    6c38:	f7fe fbf0 	bl	541c <_close>
    6c3c:	1c43      	adds	r3, r0, #1
    6c3e:	d103      	bne.n	6c48 <_close_r+0x1c>
    6c40:	6823      	ldr	r3, [r4, #0]
    6c42:	2b00      	cmp	r3, #0
    6c44:	d000      	beq.n	6c48 <_close_r+0x1c>
    6c46:	602b      	str	r3, [r5, #0]
    6c48:	bd70      	pop	{r4, r5, r6, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	20000d44 	.word	0x20000d44

00006c50 <_fstat_r>:
    6c50:	2300      	movs	r3, #0
    6c52:	b570      	push	{r4, r5, r6, lr}
    6c54:	4c06      	ldr	r4, [pc, #24]	; (6c70 <_fstat_r+0x20>)
    6c56:	0005      	movs	r5, r0
    6c58:	0008      	movs	r0, r1
    6c5a:	0011      	movs	r1, r2
    6c5c:	6023      	str	r3, [r4, #0]
    6c5e:	f7fe fbe0 	bl	5422 <_fstat>
    6c62:	1c43      	adds	r3, r0, #1
    6c64:	d103      	bne.n	6c6e <_fstat_r+0x1e>
    6c66:	6823      	ldr	r3, [r4, #0]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d000      	beq.n	6c6e <_fstat_r+0x1e>
    6c6c:	602b      	str	r3, [r5, #0]
    6c6e:	bd70      	pop	{r4, r5, r6, pc}
    6c70:	20000d44 	.word	0x20000d44

00006c74 <_isatty_r>:
    6c74:	2300      	movs	r3, #0
    6c76:	b570      	push	{r4, r5, r6, lr}
    6c78:	4c06      	ldr	r4, [pc, #24]	; (6c94 <_isatty_r+0x20>)
    6c7a:	0005      	movs	r5, r0
    6c7c:	0008      	movs	r0, r1
    6c7e:	6023      	str	r3, [r4, #0]
    6c80:	f7fe fbd4 	bl	542c <_isatty>
    6c84:	1c43      	adds	r3, r0, #1
    6c86:	d103      	bne.n	6c90 <_isatty_r+0x1c>
    6c88:	6823      	ldr	r3, [r4, #0]
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d000      	beq.n	6c90 <_isatty_r+0x1c>
    6c8e:	602b      	str	r3, [r5, #0]
    6c90:	bd70      	pop	{r4, r5, r6, pc}
    6c92:	46c0      	nop			; (mov r8, r8)
    6c94:	20000d44 	.word	0x20000d44

00006c98 <_lseek_r>:
    6c98:	b570      	push	{r4, r5, r6, lr}
    6c9a:	0005      	movs	r5, r0
    6c9c:	0008      	movs	r0, r1
    6c9e:	0011      	movs	r1, r2
    6ca0:	2200      	movs	r2, #0
    6ca2:	4c06      	ldr	r4, [pc, #24]	; (6cbc <_lseek_r+0x24>)
    6ca4:	6022      	str	r2, [r4, #0]
    6ca6:	001a      	movs	r2, r3
    6ca8:	f7fe fbc2 	bl	5430 <_lseek>
    6cac:	1c43      	adds	r3, r0, #1
    6cae:	d103      	bne.n	6cb8 <_lseek_r+0x20>
    6cb0:	6823      	ldr	r3, [r4, #0]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d000      	beq.n	6cb8 <_lseek_r+0x20>
    6cb6:	602b      	str	r3, [r5, #0]
    6cb8:	bd70      	pop	{r4, r5, r6, pc}
    6cba:	46c0      	nop			; (mov r8, r8)
    6cbc:	20000d44 	.word	0x20000d44

00006cc0 <__malloc_lock>:
    6cc0:	4770      	bx	lr

00006cc2 <__malloc_unlock>:
    6cc2:	4770      	bx	lr

00006cc4 <_malloc_usable_size_r>:
    6cc4:	1f0b      	subs	r3, r1, #4
    6cc6:	681b      	ldr	r3, [r3, #0]
    6cc8:	1f18      	subs	r0, r3, #4
    6cca:	2b00      	cmp	r3, #0
    6ccc:	da01      	bge.n	6cd2 <_malloc_usable_size_r+0xe>
    6cce:	580b      	ldr	r3, [r1, r0]
    6cd0:	18c0      	adds	r0, r0, r3
    6cd2:	4770      	bx	lr

00006cd4 <_read_r>:
    6cd4:	b570      	push	{r4, r5, r6, lr}
    6cd6:	0005      	movs	r5, r0
    6cd8:	0008      	movs	r0, r1
    6cda:	0011      	movs	r1, r2
    6cdc:	2200      	movs	r2, #0
    6cde:	4c06      	ldr	r4, [pc, #24]	; (6cf8 <_read_r+0x24>)
    6ce0:	6022      	str	r2, [r4, #0]
    6ce2:	001a      	movs	r2, r3
    6ce4:	f7fc f868 	bl	2db8 <_read>
    6ce8:	1c43      	adds	r3, r0, #1
    6cea:	d103      	bne.n	6cf4 <_read_r+0x20>
    6cec:	6823      	ldr	r3, [r4, #0]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d000      	beq.n	6cf4 <_read_r+0x20>
    6cf2:	602b      	str	r3, [r5, #0]
    6cf4:	bd70      	pop	{r4, r5, r6, pc}
    6cf6:	46c0      	nop			; (mov r8, r8)
    6cf8:	20000d44 	.word	0x20000d44
    6cfc:	4e414843 	.word	0x4e414843
    6d00:	204c454e 	.word	0x204c454e
    6d04:	52414c41 	.word	0x52414c41
    6d08:	0044454d 	.word	0x0044454d
    6d0c:	45574f50 	.word	0x45574f50
    6d10:	41542052 	.word	0x41542052
    6d14:	5245504d 	.word	0x5245504d
    6d18:	414c4120 	.word	0x414c4120
    6d1c:	00004d52 	.word	0x00004d52
    6d20:	53494144 	.word	0x53494144
    6d24:	48432059 	.word	0x48432059
    6d28:	204e4941 	.word	0x204e4941
    6d2c:	504d4154 	.word	0x504d4154
    6d30:	41205245 	.word	0x41205245
    6d34:	4d52414c 	.word	0x4d52414c
    6d38:	00000000 	.word	0x00000000
    6d3c:	6c756f43 	.word	0x6c756f43
    6d40:	74276e64 	.word	0x74276e64
    6d44:	6d724120 	.word	0x6d724120
    6d48:	63656220 	.word	0x63656220
    6d4c:	65737561 	.word	0x65737561
    6d50:	20666f20 	.word	0x20666f20
    6d54:	61736944 	.word	0x61736944
    6d58:	75446d72 	.word	0x75446d72
    6d5c:	69746172 	.word	0x69746172
    6d60:	69546e6f 	.word	0x69546e6f
    6d64:	0a72656d 	.word	0x0a72656d
    6d68:	00000000 	.word	0x00000000
    6d6c:	2a2a0a0a 	.word	0x2a2a0a0a
    6d70:	2a2a2a2a 	.word	0x2a2a2a2a
    6d74:	50202a2a 	.word	0x50202a2a
    6d78:	7265776f 	.word	0x7265776f
    6d7c:	6e612064 	.word	0x6e612064
    6d80:	72412064 	.word	0x72412064
    6d84:	20424c6d 	.word	0x20424c6d
    6d88:	6e6e6f43 	.word	0x6e6e6f43
    6d8c:	65746365 	.word	0x65746365
    6d90:	2a2a2064 	.word	0x2a2a2064
    6d94:	2a2a2a2a 	.word	0x2a2a2a2a
    6d98:	0a202a2a 	.word	0x0a202a2a
    6d9c:	0000000a 	.word	0x0000000a
    6da0:	656d7241 	.word	0x656d7241
    6da4:	6f702064 	.word	0x6f702064
    6da8:	66207472 	.word	0x66207472
    6dac:	206d6f72 	.word	0x206d6f72
    6db0:	61736944 	.word	0x61736944
    6db4:	64656d72 	.word	0x64656d72
    6db8:	61745320 	.word	0x61745320
    6dbc:	000a6574 	.word	0x000a6574
    6dc0:	656d7241 	.word	0x656d7241
    6dc4:	6f702064 	.word	0x6f702064
    6dc8:	66207472 	.word	0x66207472
    6dcc:	206d6f72 	.word	0x206d6f72
    6dd0:	656c6953 	.word	0x656c6953
    6dd4:	4120746e 	.word	0x4120746e
    6dd8:	6d72614c 	.word	0x6d72614c
    6ddc:	20676e69 	.word	0x20676e69
    6de0:	74617453 	.word	0x74617453
    6de4:	00000a65 	.word	0x00000a65
    6de8:	2b2b2b0a 	.word	0x2b2b2b0a
    6dec:	41202b2b 	.word	0x41202b2b
    6df0:	204f5455 	.word	0x204f5455
    6df4:	204d5241 	.word	0x204d5241
    6df8:	55514552 	.word	0x55514552
    6dfc:	20545345 	.word	0x20545345
    6e00:	504d4f43 	.word	0x504d4f43
    6e04:	4554454c 	.word	0x4554454c
    6e08:	2b2b2b20 	.word	0x2b2b2b20
    6e0c:	200a2b2b 	.word	0x200a2b2b
    6e10:	00000000 	.word	0x00000000
    6e14:	0000077a 	.word	0x0000077a
    6e18:	0000077a 	.word	0x0000077a
    6e1c:	0000071c 	.word	0x0000071c
    6e20:	0000075c 	.word	0x0000075c
    6e24:	00000762 	.word	0x00000762
    6e28:	00000768 	.word	0x00000768
    6e2c:	0000076c 	.word	0x0000076c
    6e30:	00000770 	.word	0x00000770
    6e34:	00000774 	.word	0x00000774

00006e38 <buzzerPatterns>:
    6e38:	00007134 000070fc 00006f98 000072b4     4q...p...o...r..
    6e48:	000072c4 000072f4 0000712c 00006f80     .r...r..,q...o..
    6e58:	000071d4 00006fbc 0000711c 00007124     .q...o...q..$q..
    6e68:	00007138 00006f24 00006f30 00007144     8q..$o..0o..Dq..
    6e78:	0000730c 00006e84 00007194              .s...n...q..

00006e84 <patternAlert>:
    6e84:	00640007 01900000 00640007 01900000     ..d.......d.....
    6e94:	00640007 01900000 00640007 01900000     ..d.......d.....
    6ea4:	00640007 01900000 00640007 01900000     ..d.......d.....
    6eb4:	00640007 01900000 00640007 01900000     ..d.......d.....
    6ec4:	00640007 01900000 00640007 01900000     ..d.......d.....
    6ed4:	00640007 01900000 00640007 01900000     ..d.......d.....
    6ee4:	00640007 01900000 00640007 01900000     ..d.......d.....
    6ef4:	00640007 01900000 00640007 01900000     ..d.......d.....
    6f04:	00640007 01900000 00640007 01900000     ..d.......d.....
    6f14:	00640007 01900000 00640007 00000000     ..d.......d.....

00006f24 <patternAuthReplaceConfirming>:
    6f24:	00320007 00c80000 00000000              ..2.........

00006f30 <patternBaseNoPower>:
    6f30:	00640007 00640000 00640007 01f40000     ..d...d...d.....
    6f40:	00640007 00640000 00640007 01f40000     ..d...d...d.....
    6f50:	00640007 00640000 00640007 01f40000     ..d...d...d.....
    6f60:	00640007 00640000 00640007 01f40000     ..d...d...d.....
    6f70:	00640007 00640000 00640007 00000000     ..d...d...d.....

00006f80 <patternBatteryEol>:
    6f80:	01f40007 01f40000 01f40007 01f40000     ................
    6f90:	01f40007 00000000                       ........

00006f98 <patternDelayError>:
    6f98:	012c0000 00320007 00640000 00320007     ..,...2...d...2.
    6fa8:	00640000 00320007 00640000 00320007     ..d...2...d...2.
    6fb8:	00000000                                ....

00006fbc <patternDelete>:
    6fbc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    6fcc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    6fdc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    6fec:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    6ffc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    700c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    701c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    702c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    703c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    704c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    705c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    706c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    707c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    708c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    709c:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    70ac:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    70bc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    70cc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    70dc:	00320007 00c80000 00320007 00c80000     ..2.......2.....
    70ec:	00320007 00c80000 00320007 00000000     ..2.......2.....

000070fc <patternError>:
    70fc:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    710c:	00320007 00640000 00320007 00000000     ..2...d...2.....

0000711c <patternFactoryTest>:
    711c:	ea600004 00000001                       ..`.....

00007124 <patternFactoryTest2>:
    7124:	ea600008 00000001                       ..`.....

0000712c <patternLowBat>:
    712c:	03e80006 00000000                       ........

00007134 <patternNone>:
    7134:	00000000                                ....

00007138 <patternProvision>:
    7138:	03200000 00960004 00000000              .. .........

00007144 <patternPuckDeepSleep>:
    7144:	00640007 00640000 00640007 00640000     ..d...d...d...d.
    7154:	00640007 00640000 00640007 00640000     ..d...d...d...d.
    7164:	00640007 03e80000 00640007 00640000     ..d.......d...d.
    7174:	00640007 00640000 00640007 00640000     ..d...d...d...d.
    7184:	00640007 00640000 00640007 00000000     ..d...d...d.....

00007194 <patternRFIDError>:
    7194:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    71a4:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    71b4:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    71c4:	00320007 00640000 00320007 00000000     ..2...d...2.....

000071d4 <patternSkeleton>:
    71d4:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    71e4:	00320007 00640000 00320007 00fa0000     ..2...d...2.....
    71f4:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    7204:	00320007 00640000 00320007 00fa0000     ..2...d...2.....
    7214:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    7224:	00320007 00640000 00320007 00fa0000     ..2...d...2.....
    7234:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    7244:	00320007 00640000 00320007 00fa0000     ..2...d...2.....
    7254:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    7264:	00320007 00640000 00320007 00fa0000     ..2...d...2.....
    7274:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    7284:	00320007 00640000 00320007 00fa0000     ..2...d...2.....
    7294:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    72a4:	00320007 00640000 00320007 00000000     ..2...d...2.....

000072b4 <patternSucceed>:
    72b4:	00320007 00640000 00320007 00000000     ..2...d...2.....

000072c4 <patternSucceedCant>:
    72c4:	00320007 00640000 00320007 012c0000     ..2...d...2...,.
    72d4:	00320007 00640000 00320007 00640000     ..2...d...2...d.
    72e4:	00320007 00640000 00320007 00000000     ..2...d...2.....

000072f4 <patternSucceedLowBat>:
    72f4:	00320007 00640000 00320007 01f40000     ..2...d...2.....
    7304:	03e80006 00000000                       ........

0000730c <patternWarning>:
    730c:	00640007 00c80000 00640007 00c80000     ..d.......d.....
    731c:	00640007 00c80000 00640007 00c80000     ..d.......d.....
    732c:	00640007 00c80000 00640007 00c80000     ..d.......d.....
    733c:	00640007 00c80000 00640007 00c80000     ..d.......d.....
    734c:	00640007 00c80000 00640007 00c80000     ..d.......d.....
    735c:	00640007 00c80000 00640007 00000000     ..d.......d.....
    736c:	4843200a 454e4e41 2030204c 54495753     . CHANNEL 0 SWIT
    737c:	4f204843 454e4550 00000a44 4843200a     CH OPENED.... CH
    738c:	454e4e41 2030204c 54495753 43204843     ANNEL 0 SWITCH C
    739c:	45534f4c 00000a44 4843200a 454e4e41     LOSED.... CHANNE
    73ac:	2031204c 54495753 4f204843 454e4550     L 1 SWITCH OPENE
    73bc:	00000a44 4843200a 454e4e41 2031204c     D.... CHANNEL 1 
    73cc:	54495753 43204843 45534f4c 00000a44     SWITCH CLOSED...
    73dc:	4843200a 454e4e41 2032204c 54495753     . CHANNEL 2 SWIT
    73ec:	4f204843 454e4550 00000a44 4843200a     CH OPENED.... CH
    73fc:	454e4e41 2032204c 54495753 43204843     ANNEL 2 SWITCH C
    740c:	45534f4c 00000a44 4843200a 454e4e41     LOSED.... CHANNE
    741c:	2033204c 54495753 4f204843 454e4550     L 3 SWITCH OPENE
    742c:	00000a44 4843200a 454e4e41 2033204c     D.... CHANNEL 3 
    743c:	54495753 43204843 45534f4c 00000a44     SWITCH CLOSED...
    744c:	4843200a 454e4e41 2034204c 54495753     . CHANNEL 4 SWIT
    745c:	4f204843 454e4550 00000a44 4843200a     CH OPENED.... CH
    746c:	454e4e41 2034204c 54495753 43204843     ANNEL 4 SWITCH C
    747c:	45534f4c 00000a44 4843200a 454e4e41     LOSED.... CHANNE
    748c:	2035204c 54495753 4f204843 454e4550     L 5 SWITCH OPENE
    749c:	00000a44 4843200a 454e4e41 2035204c     D.... CHANNEL 5 
    74ac:	54495753 43204843 45534f4c 00000a44     SWITCH CLOSED...
    74bc:	4843200a 454e4e41 2036204c 54495753     . CHANNEL 6 SWIT
    74cc:	4f204843 454e4550 00000a44 4843200a     CH OPENED.... CH
    74dc:	454e4e41 2036204c 54495753 43204843     ANNEL 6 SWITCH C
    74ec:	45534f4c 00000a44 4843200a 454e4e41     LOSED.... CHANNE
    74fc:	2037204c 54495753 4f204843 454e4550     L 7 SWITCH OPENE
    750c:	00000a44 4843200a 454e4e41 2037204c     D.... CHANNEL 7 
    751c:	54495753 43204843 45534f4c 00000a44     SWITCH CLOSED...
    752c:	4843200a 454e4e41 2038204c 54495753     . CHANNEL 8 SWIT
    753c:	4f204843 454e4550 00000a44 4843200a     CH OPENED.... CH
    754c:	454e4e41 2038204c 54495753 43204843     ANNEL 8 SWITCH C
    755c:	45534f4c 00000a44 4843200a 454e4e41     LOSED.... CHANNE
    756c:	2039204c 54495753 4f204843 454e4550     L 9 SWITCH OPENE
    757c:	00000a44 4843200a 454e4e41 2039204c     D.... CHANNEL 9 
    758c:	54495753 43204843 45534f4c 00000a44     SWITCH CLOSED...
    759c:	4843200a 454e4e41 3031204c 49575320     . CHANNEL 10 SWI
    75ac:	20484354 4e45504f 000a4445 4843200a     TCH OPENED... CH
    75bc:	454e4e41 3031204c 49575320 20484354     ANNEL 10 SWITCH 
    75cc:	534f4c43 000a4445 4843200a 454e4e41     CLOSED... CHANNE
    75dc:	3131204c 49575320 20484354 4e45504f     L 11 SWITCH OPEN
    75ec:	000a4445 4843200a 454e4e41 3131204c     ED... CHANNEL 11
    75fc:	49575320 20484354 534f4c43 000a4445      SWITCH CLOSED..
    760c:	5349446e 3a4d5241 6d724120 71655220     nDISARM: Arm Req
    761c:	74736575 00006465 5349446e 3a4d5241     uested..nDISARM:
    762c:	53494420 214d5241 00000000 54524155      DISARM!....UART
    763c:	414d4420 61745320 54207472 736e6172      DMA Start Trans
    764c:	20726566 74617453 69207375 7061206e     fer Status in ap
    765c:	61755f70 655f7472 6c62616e 25203a65     p_uart_enable: %
    766c:	20583230 0000000a 4420474e 67756265     02X ....NG Debug
    767c:	726f5020 6e452074 656c6261 00000a64      Port Enabled...
    768c:	4920474e 6c61766e 63206469 616d6d6f     NG Invalid comma
    769c:	7220646e 69656365 0a646576 00000000     nd received.....
    76ac:	4220474e 65666675 766f2072 6c667265     NG Buffer overfl
    76bc:	000a776f 54524155 414d4420 61745320     ow..UART DMA Sta
    76cc:	54207472 736e6172 20726566 74617453     rt Transfer Stat
    76dc:	69207375 6d64206e 6d695461 61487265     us in dmaTimerHa
    76ec:	656c646e 25203a72 20583230 0000000a     ndler: %02X ....
    76fc:	203a5243 000a6425 7369440a 656d7261     CR: %d...Disarme
    770c:	6c465f64 5f687361 3a6e6950 47494820     d_Flash_Pin: HIG
    771c:	00000a48 7369440a 656d7261 6c465f64     H....Disarmed_Fl
    772c:	5f687361 3a6e6950 776f4c20 0000000a     ash_Pin: Low....
    773c:	45470a0a 54532054 53555441 000d0d3a     ..GET STATUS:...
    774c:	73655209 43207465 65737561 6f53203a     .Reset Cause: So
    775c:	61777466 000a6572 73655209 43207465     ftware...Reset C
    776c:	65737561 6157203a 64686374 5420676f     ause: Watchdog T
    777c:	72656d69 0000000a 73655209 43207465     imer.....Reset C
    778c:	65737561 4f42203a 0a333344 00000000     ause: BOD33.....
    779c:	73655209 43207465 65737561 4f42203a     .Reset Cause: BO
    77ac:	0a323144 00000000 73655209 43207465     D12......Reset C
    77bc:	65737561 6f50203a 20726577 52206e4f     ause: Power On R
    77cc:	74657365 0000000a 73655209 43207465     eset.....Reset C
    77dc:	65737561 7845203a 6e726574 52206c61     ause: External R
    77ec:	74657365 0000000a 59530d0d 4d455453     eset......SYSTEM
    77fc:	41545320 3a535554 0000000d 204d4109      STATUS:.....AM 
    780c:	74617453 203a7375 30257830 000d7832     Status: 0x%02x..
    781c:	2e4d4109 614d7369 72657473 6325203a     .AM.isMaster: %c
    782c:	0000000d 2e4d4109 65776f50 3a646572     .....AM.Powered:
    783c:	0d632520 00000000 2e4d4109 43746f6e      %c......AM.notC
    784c:	67726168 3a676e69 0d632520 00000000     harging: %c.....
    785c:	2e4d4109 70656564 65656c53 25203a70     .AM.deepSleep: %
    786c:	00000d63 2e4d4109 74756873 6e776f44     c....AM.shutDown
    787c:	6325203a 0000000d 2e4d4109 74697773     : %c.....AM.swit
    788c:	694c6863 64657466 6325203a 0000000d     chLifted: %c....
    789c:	49446e09 4d524153 203a3120 206e6143     .nDISARM 1: Can 
    78ac:	0d6d7241 00000000 49446e09 4d524153     Arm......nDISARM
    78bc:	203a3020 276e6143 72412074 00000d6d      0: Can't Arm...
    78cc:	4941440d 43205953 4e494148 41545320     .DAISY CHAIN STA
    78dc:	3a535554 0000000d 3a52430d 0d642520     TUS:.....CR: %d.
    78ec:	00000000 4d52410d 41545320 3a535554     .....ARM STATUS:
    78fc:	0000000d 7261090d 3a64656d 0d632520     ......armed: %c.
    790c:	00000000 6c697309 41746e65 6d72616c     .....silentAlarm
    791c:	6325203a 0000000d 61686309 6c656e6e     : %c.....channel
    792c:	616c415f 203a6d72 000d6325 776f7009     _Alarm: %c...pow
    793c:	61547265 7265706d 6d72415f 203a6465     erTamper_Armed: 
    794c:	000d6325 776f7009 61547265 7265706d     %c...powerTamper
    795c:	616c415f 203a6d72 000d6325 69616409     _Alarm: %c...dai
    796c:	68437973 546e6961 65706d61 6c415f72     syChainTamper_Al
    797c:	3a6d7261 0d632520 00000000 69616409     arm: %c......dai
    798c:	68437973 546e6961 65706d61 72415f72     syChainTamper_Ar
    799c:	3a64656d 0d632520 00000000 4148430d     med: %c......CHA
    79ac:	4c454e4e 41545320 3a535554 0000000d     NNEL STATUS:....
    79bc:	6843090d 656e6e61 6425206c 61745320     ..Channel %d Sta
    79cc:	20737574 7830203a 78323025 0000000d     tus : 0x%02x....
    79dc:	62616309 7250656c 6e657365 25203a74     .cablePresent: %
    79ec:	00000d63 6d726109 203a6465 000d6325     c....armed: %c..
    79fc:	616c6109 6e696d72 25203a67 00000d63     .alarming: %c...
    7a0c:	5441420d 59524554 41545320 3a535554     .BATTERY STATUS:
    7a1c:	0000000d 73254e4e 25097325 73250973     ....NN%s%s.%s.%s
    7a2c:	0000000d 30303030 00000031 4c500a0a     ....00001.....PL
    7a3c:	54205941 3a454e55 25783020 0a583230     AY TUNE: 0x%02X.
    7a4c:	00000000 2d205642 74614220 79726574     ....BV - Battery
    7a5c:	6c6f5620 65676174 0000000a 2d205243      Voltage....CR -
    7a6c:	69725020 6420746e 67756265 74616420      Print debug dat
    7a7c:	6f742061 52415520 00000a54 2d204646     a to UART...FF -
    7a8c:	65724620 75462065 6974636e 28206e6f      Free Function (
    7a9c:	63616c70 6c6f6865 29726564 0000000a     placeholder)....
    7aac:	2d205347 74654720 61745320 0a737574     GS - Get Status.
    7abc:	00000000 2d205647 74654720 72655620     ....GV - Get Ver
    7acc:	6e6f6973 0000000a 3c205450 203e4e4e     sion....PT <NN> 
    7adc:	6c50202d 54207961 0a656e75 00000000     - Play Tune.....
    7aec:	3c204252 2d203e4e 62655220 00746f6f     RB <N> - Reboot.
    7afc:	3c204153 2d203e4e 74655320 6d724120     SA <N> - Set Arm
    7b0c:	7369442f 0a6d7261 00000000 3c204853     /Disarm.....SH <
    7b1c:	3c3e5656 3c3e4141 203e5353 6553202d     VV><AA><SS> - Se
    7b2c:	73552074 43207265 69666e6f 00000a67     t User Config...
    7b3c:	2d203f3f 6c654820 00000a70 45520a0a     ?? - Help.....RE
    7b4c:	544f4f42 51455220 54534555 0000093a     BOOT REQUEST:...
    7b5c:	74666f53 65726177 73655220 69747465     Software Resetti
    7b6c:	5020676e 0a6b6375 00000000 45530a0a     ng Puck.......SE
    7b7c:	52412054 49442f4d 4d524153 00000a3a     T ARM/DISARM:...
    7b8c:	7165520a 74736575 20676e69 646f7270     .Requesting prod
    7b9c:	20746375 2e4d5241 000a2e2e 43435553     uct ARM.....SUCC
    7bac:	2c535345 6d724120 0a216465 00000000     ESS, Armed!.....
    7bbc:	6c696146 2c657275 69747320 64206c6c     Failure, still d
    7bcc:	72617369 2164656d 0000000a 5349440a     isarmed!.....DIS
    7bdc:	454d5241 0a0a2144 00000000 6c69530a     ARMED!.......Sil
    7bec:	65636e65 0a0a2164 00000000 6e49090a     enced!........In
    7bfc:	696c6176 52412064 49442f4d 4d524153     valid ARM/DISARM
    7c0c:	6d6f6320 646e616d 0000000a 20415309      command.....SA 
    7c1c:	203d2030 41534944 000a4d52 20415309     0 = DISARM...SA 
    7c2c:	203d2031 0a4d5241 00000000 20415309     1 = ARM......SA 
    7c3c:	203d2032 454c4953 0a45434e 00000000     2 = SILENCE.....
    7c4c:	45530a0a 53552054 43205245 49464e4f     ..SET USER CONFI
    7c5c:	000a3a47 00005642 4520474e 726f7272     G:..BV..NG Error
    7c6c:	42202d20 00000a56 00005243 4520474e      - BV...CR..NG E
    7c7c:	726f7272 43202d20 00000a52 00004646     rror - CR...FF..
    7c8c:	4520474e 726f7272 46202d20 00000a46     NG Error - FF...
    7c9c:	00005347 4520474e 726f7272 47202d20     GS..NG Error - G
    7cac:	00000a53 00005647 4520474e 726f7272     S...GV..NG Error
    7cbc:	47202d20 00000a56 00005450 4520474e      - GV...PT..NG E
    7ccc:	726f7272 50202d20 4e3c2054 000a3e4e     rror - PT <NN>..
    7cdc:	00004252 4520474e 726f7272 52202d20     RB..NG Error - R
    7cec:	4e3c2042 00000a3e 00004153 4520474e     B <N>...SA..NG E
    7cfc:	726f7272 53202d20 4e3c2041 00000a3e     rror - SA <N>...
    7d0c:	00004853 4520474e 726f7272 53202d20     SH..NG Error - S
    7d1c:	563c2048 413c3e56 533c3e41 000a3e53     H <VV><AA><SS>..
    7d2c:	00005553 4520474e 726f7272 53202d20     SU..NG Error - S
    7d3c:	42423c55 3c3e4242 43434343 00000d3e     U<BBBB><CCCC>...
    7d4c:	00005753 4520474e 726f7272 53202d20     SW..NG Error - S
    7d5c:	00000d57 00003f3f 4520474e 726f7272     W...??..NG Error
    7d6c:	3f202d20 00000a3f 54524155 414d4420      - ??...UART DMA
    7d7c:	61745320 54207472 736e6172 20726566      Start Transfer 
    7d8c:	74617453 69207375 7274206e 66736e61     Status in transf
    7d9c:	645f7265 5f656e6f 203a7872 58323025     er_done_rx: %02X
    7dac:	00000a20 42000800 42000c00 42001000      ......B...B...B
    7dbc:	42001400                                ...B

00007dc0 <tc_interrupt_vectors.12281>:
    7dc0:	00141312                                ....

00007dc4 <__func__.6062>:
    7dc4:	69437076 75426372 6e695f66 00007469     vpCircBuf_init..

00007dd4 <__func__.6077>:
    7dd4:	69437076 75426372 6f635f66 00746e75     vpCircBuf_count.

00007de4 <__func__.6081>:
    7de4:	69437076 75426372 72665f66 6f436565     vpCircBuf_freeCo
    7df4:	00746e75                                unt.

00007df8 <__func__.6094>:
    7df8:	69437076 75426372 75705f66 00000074     vpCircBuf_put...

00007e08 <__func__.6103>:
    7e08:	69437076 75426372 75705f66 6c6c4174     vpCircBuf_putAll
    7e18:	00000000                                ....

00007e1c <__func__.6119>:
    7e1c:	69437076 75426372 65675f66 00000074     vpCircBuf_get...

00007e2c <__func__.6127>:
    7e2c:	69437076 75426372 65675f66 6c6c4174     vpCircBuf_getAll
    7e3c:	00000000 733e2d70 74726174 00000000     ....p->start....
    7e4c:	733e2d70 00706f74 3e2d7021 64616568     p->stop.!p->head
    7e5c:	207c7c20 2d702028 6165683e 3d3e2064      || ( p->head >=
    7e6c:	3e2d7020 72617473 26262074 3e2d7020      p->start && p->
    7e7c:	64616568 70203c20 74733e2d 2620706f     head < p->stop &
    7e8c:	2d702026 6961743e 3d3e206c 3e2d7020     & p->tail >= p->
    7e9c:	72617473 26262074 3e2d7020 6c696174     start && p->tail
    7eac:	70203c20 74733e2d 2920706f 00000000      < p->stop )....
    7ebc:	00000070 732f2e2e 762f6372 632f6970     p...../src/vpi/c
    7ecc:	42637269 632e6675 00000000 66667562     ircBuf.c....buff
    7edc:	00007265 53667562 5f657a69 6d656c65     er..bufSize_elem
    7eec:	73746e65 30203e20 00000000 3d3d206e     ents > 0....n ==
    7efc:	756f6320 655f746e 656d656c 0073746e      count_elements.

00007f0c <_tcc_apbcmasks>:
    7f0c:	00000100 00000200 00000400              ............

00007f18 <_tcc_cc_nums>:
    7f18:	00020204                                ....

00007f1c <_tcc_gclk_ids>:
    7f1c:	001b1a1a                                ....

00007f20 <_tcc_maxs>:
    7f20:	00ffffff 00ffffff 0000ffff              ............

00007f2c <_tcc_ow_nums>:
    7f2c:	00020408                                ....

00007f30 <_tcc_intflag>:
    7f30:	00000001 00000002 00000004 00000008     ................
    7f40:	00001000 00002000 00004000 00008000     ..... ...@......
    7f50:	00010000 00020000 00040000 00080000     ................

00007f60 <tcc_interrupt_vectors.12502>:
    7f60:	0011100f 42002c00 42003000 42003400     .....,.B.0.B.4.B
    7f70:	00004cfa 00004cf6 00004cf6 00004d5c     .L...L...L..\M..
    7f80:	00004d5c 00004d0e 00004d00 00004d14     \M...M...M...M..
    7f90:	00004d4a 00004de4 00004dc4 00004dc4     JM...M...M...M..
    7fa0:	00004e50 00004dd6 00004df2 00004dc8     PN...M...M...M..
    7fb0:	00004e00 00004e40 7566202c 6974636e     .N..@N.., functi
    7fc0:	203a6e6f 73736100 69747265 22206e6f     on: .assertion "
    7fd0:	20227325 6c696166 203a6465 656c6966     %s" failed: file
    7fe0:	73252220 6c202c22 20656e69 73256425      "%s", line %d%s
    7ff0:	000a7325                                %s..

00007ff4 <_global_impure_ptr>:
    7ff4:	2000020c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    8004:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    8014:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    8024:	64636261 00006665                       abcdef..

0000802c <__sf_fake_stderr>:
	...

0000804c <__sf_fake_stdin>:
	...

0000806c <__sf_fake_stdout>:
	...
    808c:	4f500043 00584953 2000002e                       C.POSIX...

00008096 <_ctype_>:
    8096:	20202000 20202020 28282020 20282828     .         ((((( 
    80a6:	20202020 20202020 20202020 20202020                     
    80b6:	10108820 10101010 10101010 10101010      ...............
    80c6:	04040410 04040404 10040404 10101010     ................
    80d6:	41411010 41414141 01010101 01010101     ..AAAAAA........
    80e6:	01010101 01010101 01010101 10101010     ................
    80f6:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8106:	02020202 02020202 02020202 10101010     ................
    8116:	00000020 00000000 00000000 00000000      ...............
	...

00008198 <_init>:
    8198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    819a:	46c0      	nop			; (mov r8, r8)
    819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    819e:	bc08      	pop	{r3}
    81a0:	469e      	mov	lr, r3
    81a2:	4770      	bx	lr

000081a4 <__init_array_start>:
    81a4:	000000dd 	.word	0x000000dd

000081a8 <_fini>:
    81a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81aa:	46c0      	nop			; (mov r8, r8)
    81ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    81ae:	bc08      	pop	{r3}
    81b0:	469e      	mov	lr, r3
    81b2:	4770      	bx	lr

000081b4 <__fini_array_start>:
    81b4:	000000b5 	.word	0x000000b5
